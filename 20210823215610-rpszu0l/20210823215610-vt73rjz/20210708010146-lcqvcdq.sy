{
	"ID": "20210708010146-lcqvcdq",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20210708010146-lcqvcdq",
		"title": "301.Docker",
		"type": "doc",
		"updated": "20210708010648"
	},
	"Children": [
		{
			"ID": "20210708010146-5ib9vrn",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210708010146-5ib9vrn"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "Docker 概述"
				}
			]
		},
		{
			"ID": "20210708010146-1496kzk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-1496kzk"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "Docker 是什么"
				}
			]
		},
		{
			"ID": "20210708010146-r03crl0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-r03crl0"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Docker 使用 Google 公司推出的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Go"
				},
				{
					"Type": "NodeText",
					"Data": " 语言进行开发实现，基于 Linux 内核的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "cgroup"
				},
				{
					"Type": "NodeText",
					"Data": "，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "namespace"
				},
				{
					"Type": "NodeText",
					"Data": "，以及 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AUFS"
				},
				{
					"Type": "NodeText",
					"Data": " 类的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Union FS"
				},
				{
					"Type": "NodeText",
					"Data": " 等技术，对"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "进程进行封装隔离"
				},
				{
					"Type": "NodeText",
					"Data": "，属于操作系统层面的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "虚拟化技术"
				},
				{
					"Type": "NodeText",
					"Data": "。由于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "隔离的进程独立于宿主和其它的隔离的进程"
				},
				{
					"Type": "NodeText",
					"Data": "，因此也称其为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "容器"
				},
				{
					"Type": "NodeText",
					"Data": " 。最初实现是基于 LXC，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 libcontainer，从 1.11 开始，则进一步演进为使用 runC 和 containerd。Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。"
				}
			]
		},
		{
			"ID": "20210708010146-77q9zqf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-77q9zqf",
				"updated": "20210708010146"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面的图片比较了 Docker 和传统虚拟化方式的不同之处。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。"
				}
			]
		},
		{
			"ID": "20210708010513-4lxm5n3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010513-4lxm5n3",
				"updated": "20210708010612"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "c8aa2f2dde50973.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "./assets/c8aa2f2dde50973.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				}
			]
		},
		{
			"ID": "20210708010635-wbzp2or",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010635-wbzp2or",
				"updated": "20210708010648"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "337ebe0ed8d0bb8.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "./assets/337ebe0ed8d0bb8.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				}
			]
		},
		{
			"ID": "20210708010146-rmp6tls",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-rmp6tls"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "Docker 能干什么"
				}
			]
		},
		{
			"ID": "20210708010146-j3zp0f7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-j3zp0f7"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "传统上认为，软件编码开发/测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等(java 为例)。而为了让这些程序可以顺利执行，开发团队也得准备完整的部署文件，让维运团队得以部署应用程式，开发需要清楚的告诉运维部署团队，用的全部配置文件+所有软件环境。不过，即便如此，仍然常常发生部署失败的状况。"
				}
			]
		},
		{
			"ID": "20210708010146-ilw5akf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-ilw5akf"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Docker 镜像的设计，使得 Docker 得以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "打破过去「程序即应用」的观念"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "透过镜像(images)将作业系统核心除外，运作应用程式所需要的系统环境，由下而上打包，达到应用程式跨平台间的无缝接轨运作"
				},
				{
					"Type": "NodeText",
					"Data": "。其主要目标是“"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Build，Ship and Run Any App,Anywhere"
				},
				{
					"Type": "NodeText",
					"Data": "”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的 APP（可以是一个 WEB 应用或数据库应用等等）及其运行环境能够做到“一次封装，到处运行”。Linux 容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用运行在 Docker 容器上面，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "解决了运行环境和配置问题的软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。"
				},
				{
					"Type": "NodeText",
					"Data": "软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。"
				}
			]
		},
		{
			"ID": "20210708010146-z3azo2v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-z3azo2v"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "开发/运维（DevOps）"
				},
				{
					"Type": "NodeText",
					"Data": "：一次构建、随处运行"
				}
			]
		},
		{
			"ID": "20210708010146-anen189",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-anen189"
			},
			"Children": [
				{
					"ID": "20210708010146-znnpgx6",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-znnpgx6"
					},
					"Children": [
						{
							"ID": "20210708010146-inuwi2j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-inuwi2j"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "一致的运行环境"
								}
							]
						},
						{
							"ID": "20210708010146-5ri02zf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-5ri02zf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度一致，容器会将应用程序相关的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的 BUG。当出现程序异常时，也可以通过测试环境的相同容器进行快速定位和修复。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-mie4wwk",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-mie4wwk"
					},
					"Children": [
						{
							"ID": "20210708010146-ibpwerc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-ibpwerc"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "更快速的启动时间"
								}
							]
						},
						{
							"ID": "20210708010146-o3jdrnm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-o3jdrnm"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-8uxt5en",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-8uxt5en"
					},
					"Children": [
						{
							"ID": "20210708010146-kgquw8w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-kgquw8w"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "持续交付和部署"
								}
							]
						},
						{
							"ID": "20210708010146-zjt7yet",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-zjt7yet"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 Dockerfile 来进行镜像构建，并结合"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "持续集成"
								},
								{
									"Type": "NodeText",
									"Data": "(Continuous Integration) 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "持续部署"
								},
								{
									"Type": "NodeText",
									"Data": "(Continuous Delivery/Deployment) 系统进行自动部署。而且使用 Dockerfile 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-ll2x4nm",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-ll2x4nm"
					},
					"Children": [
						{
							"ID": "20210708010146-5s1g3k2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-5s1g3k2"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "更轻松的迁移"
								}
							]
						},
						{
							"ID": "20210708010146-17z0wbq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-17z0wbq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云（可使用 OpenStack 搭建），甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-1tokny9",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-1tokny9"
					},
					"Children": [
						{
							"ID": "20210708010146-txuomnr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-txuomnr"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "更高效的计算资源利用"
								}
							]
						},
						{
							"ID": "20210708010146-4jmu59b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-4jmu59b"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Docker 是内核级虚拟化，其不像传统的虚拟化技术一样需要额外的 Hypervisor 支持，不需要进行硬件虚拟以及运行完整操作系统等额外开销，所以在一台物理机上可以运行很多个容器实例，可大大提升物理服务器的 CPU 和内存的利用率。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-keg91r5",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-keg91r5"
					},
					"Children": [
						{
							"ID": "20210708010146-ujtuyj0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-ujtuyj0"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "更便捷的升级和扩缩容"
								}
							]
						},
						{
							"ID": "20210708010146-jyh4009",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-jyh4009"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "随着微服务架构和 Docker 的发展，大量的应用会通过微服务方式架构，应用的开发构建将变成搭乐高积木一样，每个 Docker 容器将变成一块“积木”，应用的升级将变得非常容易。当现有的容器不足以支撑业务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天级变成分钟级甚至秒级。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-wpu2hgg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-wpu2hgg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对比传统虚拟机总结"
				}
			]
		},
		{
			"ID": "20210708010146-fp6e7wx",
			"Type": "NodeTable",
			"Data": "| 特性       | 容器               | 虚拟机      |\n| :--------- | :----------------- | :---------- |\n| 启动       | 秒级               | 分钟级      |\n| 硬盘使用   | 一般为 `MB`        | 一般为 `GB` |\n| 性能       | 接近原生           | 弱于        |\n| 系统支持量 | 单机支持上千个容器 | 一般几十个  |",
			"TableAligns": [
				1,
				1,
				1
			],
			"Properties": {
				"id": "20210708010146-fp6e7wx"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Children": [
								{
									"Type": "NodeTableCell",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "特性"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "容器"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "虚拟机"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						1,
						1,
						1
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "启动"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "秒级"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "分钟级"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						1,
						1,
						1
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "硬盘使用"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一般为 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "MB"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一般为 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "GB"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						1,
						1,
						1
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "性能"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "接近原生"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "弱于"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						1,
						1,
						1
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "系统支持量"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "单机支持上千个容器"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一般几十个"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-2qkksis",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-2qkksis"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "img"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "./assets/BD7EE2EF-EFE3-404F-AC33-2B480797FE4E.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-kzhbe9j",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-kzhbe9j"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "Docker 引擎"
				}
			]
		},
		{
			"ID": "20210708010146-jo0wwcb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-jo0wwcb"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Docker 引擎是一个包含以下主要组件的客户端服务器应用程序。"
				}
			]
		},
		{
			"ID": "20210708010146-xo0alw0",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-xo0alw0"
			},
			"Children": [
				{
					"ID": "20210708010146-dlz7xg2",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-dlz7xg2"
					},
					"Children": [
						{
							"ID": "20210708010146-nlsjy18",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-nlsjy18"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一种服务器，它是一种称为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "守护进程并且长时间运行的程序"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-8fr0wec",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-8fr0wec"
					},
					"Children": [
						{
							"ID": "20210708010146-ahkrqtx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-ahkrqtx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "REST API 用于指定程序可以用来与守护进程通信的接口，并指示它做什么。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-e1dczrt",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-e1dczrt"
					},
					"Children": [
						{
							"ID": "20210708010146-ruplmyj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-ruplmyj"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一个有命令行界面 (CLI) 工具的客户端。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-s4nbezm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-s4nbezm"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "img"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "./assets/6bf7ceddc852371.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-je6dd0k",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-je6dd0k"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "Docker 架构"
				}
			]
		},
		{
			"ID": "20210708010146-unxfr4w",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-unxfr4w"
			},
			"Children": [
				{
					"ID": "20210708010146-6bcsx0w",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-6bcsx0w"
					},
					"Children": [
						{
							"ID": "20210708010146-91ith5j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-91ith5j"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Docker 使用客户端 - 服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-khz1htu",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-khz1htu"
					},
					"Children": [
						{
							"ID": "20210708010146-qtvryty",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-qtvryty"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Docker 容器通过 Docker 镜像来创建。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-h8a1sav",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-h8a1sav"
					},
					"Children": [
						{
							"ID": "20210708010146-8oi0ohb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-8oi0ohb"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "容器与镜像的关系类似于面向对象编程中的对象与类。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-69bszjd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-69bszjd"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "img"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "./assets/5270ab20cec963d.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-d2al1cc",
			"Type": "NodeTable",
			"Data": "| 标题            | 说明                                                                                                                                                                                                                                                                                |\n| :-------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 镜像(Images)    | Docker 镜像是用于创建 Docker 容器的模板。                                                                                                                                                                                                                                           |\n| 容器(Container) | 容器是独立运行的一个或一组应用。                                                                                                                                                                                                                                                    |\n| 客户端(Client)  | Docker 客户端通过命令行或者其他工具使用 Docker API ([https://docs.docker.com/reference/api/docker_remote_api](http://www.qfdmy.com/wp-content/themes/quanbaike/go.php?url=aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vcmVmZXJlbmNlL2FwaS9kb2NrZXJfcmVtb3RlX2FwaQ==)) 与 Docker 的守护进程通信。 |\n| 主机(Host)      | 一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。                                                                                                                                                                                                                              |\n| 仓库(Registry)  | Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub([https://hub.docker.com](http://www.qfdmy.com/wp-content/themes/quanbaike/go.php?url=aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=)) 提供了庞大的镜像集合供使用。                                                            |\n| Docker Machine  | Docker Machine 是一个简化 Docker 安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装 Docker，比如 VirtualBox、 Digital Ocean、Microsoft Azure。                                                                                                                            |",
			"TableAligns": [
				1,
				1
			],
			"Properties": {
				"id": "20210708010146-d2al1cc"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Children": [
								{
									"Type": "NodeTableCell",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "标题"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						1,
						1
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "镜像(Images)"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Docker 镜像是用于创建 Docker 容器的模板。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						1,
						1
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "容器(Container)"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "容器是独立运行的一个或一组应用。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						1,
						1
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "客户端(Client)"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Docker 客户端通过命令行或者其他工具使用 Docker API ("
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "http://www.qfdmy.com/wp-content/themes/quanbaike/go.php?url=aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vcmVmZXJlbmNlL2FwaS9kb2NrZXJfcmVtb3RlX2FwaQ==",
									"TextMarkTextContent": "https://docs.docker.com/reference/api/docker_remote_api"
								},
								{
									"Type": "NodeText",
									"Data": ") 与 Docker 的守护进程通信。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						1,
						1
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主机(Host)"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						1,
						1
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "仓库(Registry)"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub("
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "http://www.qfdmy.com/wp-content/themes/quanbaike/go.php?url=aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=",
									"TextMarkTextContent": "https://hub.docker.com"
								},
								{
									"Type": "NodeText",
									"Data": ") 提供了庞大的镜像集合供使用。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						1,
						1
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Docker Machine"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Docker Machine 是一个简化 Docker 安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装 Docker，比如 VirtualBox、 Digital Ocean、Microsoft Azure。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-c1gwszy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-c1gwszy"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "Docker 基本组成"
				}
			]
		},
		{
			"ID": "20210708010146-r83g14m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-r83g14m"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Docker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就就是 image 镜像文件。只有通过这个镜像文件才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。"
				}
			]
		},
		{
			"ID": "20210708010146-21qydts",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-21qydts"
			},
			"Children": [
				{
					"ID": "20210708010146-h7ywdiq",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-h7ywdiq"
					},
					"Children": [
						{
							"ID": "20210708010146-rcqia47",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-rcqia47"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "镜像"
								},
								{
									"Type": "NodeText",
									"Data": "：Docker 镜像（Image）就是一个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "只读的模板"
								},
								{
									"Type": "NodeText",
									"Data": "。镜像可以"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "用来创建 Docker 容器"
								},
								{
									"Type": "NodeText",
									"Data": "，一个镜像可以创建很多容器。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-sarj9h5",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-sarj9h5"
					},
					"Children": [
						{
							"ID": "20210708010146-skeazrx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-skeazrx"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "容器"
								},
								{
									"Type": "NodeText",
									"Data": "：Docker 利用容器（Container）独立运行的一个或一组应用。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "容器是用镜像创建的运行实例"
								},
								{
									"Type": "NodeText",
									"Data": "。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "可以把容器看做是一个简易版的 Linux 环境"
								},
								{
									"Type": "NodeText",
									"Data": "（包括 root 用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-r9k0oz9",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-r9k0oz9"
					},
					"Children": [
						{
							"ID": "20210708010146-94rpps6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-94rpps6"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "仓库"
								},
								{
									"Type": "NodeText",
									"Data": "：仓库（Repository）是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "集中存放镜像文件的场所"
								},
								{
									"Type": "NodeText",
									"Data": "。仓库（Repository）和仓库注册服务器（Registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。仓库分为公开仓库（Public）和私有仓库（Private）两种形式。最大的公开仓库是 Docker Hub(https://hub.docker.com/)，存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云等"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-t5rxgq5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-t5rxgq5"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "Docker 的底层原理"
				}
			]
		},
		{
			"ID": "20210708010146-cxmme52",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-cxmme52"
			},
			"Children": [
				{
					"ID": "20210708010146-axj7v82",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-axj7v82"
					},
					"Children": [
						{
							"ID": "20210708010146-qhnp3e8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-qhnp3e8"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Docker 如何工作？"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-t9hw3ac",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-t9hw3ac"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Docker 是一个 Client-Server 结构的系统，Docker 守护进程运行在主机上， 然后通过 Socket 连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。容器是一个运行时环境，就是我们前面说到的集装箱。"
				}
			]
		},
		{
			"ID": "20210708010146-ysoe8jc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-ysoe8jc"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "img"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "./assets/301D0380-BCC2-4F1D-B679-5481801103D9.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-kclkvmp",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-kclkvmp"
			},
			"Children": [
				{
					"ID": "20210708010146-ssht1eo",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-ssht1eo"
					},
					"Children": [
						{
							"ID": "20210708010146-s4by2bb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-s4by2bb"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "为什么 Docker 比较比 VM 快？"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-vpigbvp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-vpigbvp"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美的运行了另一套系统，能够使"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "应用程序，操作系统和硬件"
				},
				{
					"Type": "NodeText",
					"Data": "三者之间的逻辑不变。虚拟机的缺点：资源占用多、冗余步骤多、启动慢。"
				}
			]
		},
		{
			"ID": "20210708010146-jvp6h02",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-jvp6h02"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由于前面虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。"
				}
			]
		},
		{
			"ID": "20210708010146-c8e4ynx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-c8e4ynx"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "1557638701414"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "./assets/1557638701414.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-joakw6z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-joakw6z"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比较 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Docker 和传统虚拟化方式的不同之处"
				},
				{
					"Type": "NodeText",
					"Data": "："
				}
			]
		},
		{
			"ID": "20210708010146-qbsbg04",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-qbsbg04"
			},
			"Children": [
				{
					"ID": "20210708010146-nk6oy9z",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-nk6oy9z"
					},
					"Children": [
						{
							"ID": "20210708010146-ocrpsy1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-ocrpsy1"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "传统虚拟机技术是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "虚拟出一套硬件"
								},
								{
									"Type": "NodeText",
									"Data": "后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；Docker 有着比虚拟机更少的抽象层。由于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Docker 不需要 Hypervisor 实现硬件资源虚拟化"
								},
								{
									"Type": "NodeText",
									"Data": "，运行在 Docker 容器上的程序直接使用的都是实际物理机的硬件资源。因此在 CPU、内存利用率上 Docker 将会在效率上有明显优势。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-xi9oob7",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-xi9oob7"
					},
					"Children": [
						{
							"ID": "20210708010146-lm4sl0d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-lm4sl0d"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Docker"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "利用的是宿主机的内核"
								},
								{
									"Type": "NodeText",
									"Data": "，而不需要 Guest OS。因此当新建一个容器时，Docker 不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核等比较费时费资源的过程。然而当新建一个虚拟机时，虚拟机软件需要加载 Guest OS，返个新建过程是分钟级别的。而 Docker 由于直接利用宿主机的操作系统，则省略了返个过程，因此新建一个 Docker 容器只需要几秒钟。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-6wu8bq4",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-6wu8bq4"
					},
					"Children": [
						{
							"ID": "20210708010146-ximlhri",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-ximlhri"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "每个容器之间"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "互相隔离"
								},
								{
									"Type": "NodeText",
									"Data": "，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-krxvtlm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-krxvtlm"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "1557638555701"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "./assets/1557638555701.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-h0strz3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210708010146-h0strz3"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "Docker 镜像原理"
				}
			]
		},
		{
			"ID": "20210708010146-91yq1cn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-91yq1cn"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "UnionFS"
				}
			]
		},
		{
			"ID": "20210708010146-95uey2f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-95uey2f"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "UnionFS（联合文件系统）：Union 文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "对文件系统的修改作为一次提交来一层层的叠加"
				},
				{
					"Type": "NodeText",
					"Data": "，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。UnionFS 是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。以我们的 pull 为例，在下载的过程中我们可以看到 docker 的镜像好像是在一层一层的在下载。"
				}
			]
		},
		{
			"ID": "20210708010146-61qjdga",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-61qjdga"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。"
				}
			]
		},
		{
			"ID": "20210708010146-zf1wik9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-zf1wik9"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "Docker 分层镜像\u0026镜像加载原理"
				}
			]
		},
		{
			"ID": "20210708010146-2sayffq",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-2sayffq"
			},
			"Children": [
				{
					"ID": "20210708010146-vbcpimg",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-vbcpimg"
					},
					"Children": [
						{
							"ID": "20210708010146-ybnt530",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-ybnt530"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-iqk6s21",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-iqk6s21"
					},
					"Children": [
						{
							"ID": "20210708010146-4fkb21h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-4fkb21h"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "bootfs"
								},
								{
									"Type": "NodeText",
									"Data": "(boot file system)主要包含"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "bootloader 和 kernel"
								},
								{
									"Type": "NodeText",
									"Data": ", bootloader 主要是引导加载 kernel, Linux 刚启动时会加载 bootfs 文件系统，在 Docker 镜像的最底层是 bootfs。这一层与我们典型的 Linux/Unix 系统是一样的，包含 boot 加载器和内核。当 boot 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-dl2108i",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-dl2108i"
					},
					"Children": [
						{
							"ID": "20210708010146-fgi3xeb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-fgi3xeb"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "rootfs"
								},
								{
									"Type": "NodeText",
									"Data": " (root file system) ，在 bootfs 之上 rootfs (root file system) ，在 bootfs 之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs 就是各种不同的操作系统发行版，比如 Ubuntu，Centos 等等。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-25e8zod",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-25e8zod"
					},
					"Children": [
						{
							"ID": "20210708010146-q3k735u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-q3k735u"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "为什么 Docker 镜像要采用这种"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "分层结构"
								},
								{
									"Type": "NodeText",
									"Data": "呢——"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "共享资源"
								}
							]
						},
						{
							"ID": "20210708010146-3ne982f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-3ne982f"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "比如：有多个镜像都从相同的 base 镜像构建而来，那么宿主机只需在磁盘上保存一份 base 镜像，同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-2msso13",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-2msso13"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "img"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "./assets/C96ACA73-17A3-4498-9629-2D4931EA0D67.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-ioxdt41",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20210708010146-ioxdt41"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e "
				},
				{
					"ID": "20210708010146-l3k0v67",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210708010146-l3k0v67"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "平时我们安装进虚拟机的 CentOS 都是好几个 G，为什么 docker 这里才 200M？？"
						}
					]
				},
				{
					"ID": "20210708010146-1cz3218",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210708010146-1cz3218"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "对于一个精简的 OS，rootfs 可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用 Host 的 kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的 linux 发行版, bootfs 基本是一致的, rootfs 会有差别, 因此不同的发行版可以公用 bootfs。"
						}
					]
				},
				{
					"ID": "20210708010146-jav02vg",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210708010146-jav02vg"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "平时我们安装进虚拟机的 Tomcat 都是几十 M，为什么 Docker 这里几百 M？？"
						}
					]
				},
				{
					"ID": "20210708010146-uns5hnj",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210708010146-uns5hnj"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "分层结构，可能包括了 Linux kernel / Ubuntu / JDK / Tomcat。"
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-rs4i17p",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-rs4i17p"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "Docker 镜像的特点"
				}
			]
		},
		{
			"ID": "20210708010146-hnv50zt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-hnv50zt"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Docker 镜像都是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "只读"
				},
				{
					"Type": "NodeText",
					"Data": "的。当容器启动时，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "一个新的可写层被加载到镜像的顶部"
				},
				{
					"Type": "NodeText",
					"Data": "。这一层通常被称作“"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "容器层"
				},
				{
					"Type": "NodeText",
					"Data": "”，“容器层”之下的都叫“镜像层”。"
				}
			]
		},
		{
			"ID": "20210708010146-aqvrchr",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-aqvrchr"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "Docker 镜像 Commit"
				}
			]
		},
		{
			"ID": "20210708010146-sgek7g8",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-sgek7g8"
			},
			"Children": [
				{
					"ID": "20210708010146-2jdu1ur",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-2jdu1ur"
					},
					"Children": [
						{
							"ID": "20210708010146-p9438yq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-p9438yq"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker commit -m \u0026quot;提交的描述信息” -a “作者” 容器ID 要创建的目标镜像名:[标签名]"
								}
							]
						},
						{
							"ID": "20210708010146-gd04guy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-gd04guy"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "提交容器副本使之成为一个新的镜像"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-9dimivc",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-9dimivc"
					},
					"Children": [
						{
							"ID": "20210708010146-92hk1wj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-92hk1wj"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "案例演示"
								}
							]
						},
						{
							"ID": "20210708010146-t6s8s0q",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1,
								"Tight": true,
								"Start": 1,
								"Delimiter": 46,
								"Padding": 3,
								"Marker": "MQ==",
								"Num": 1
							},
							"Properties": {
								"id": "20210708010146-t6s8s0q"
							},
							"Children": [
								{
									"ID": "20210708010146-w5ytpd1",
									"Type": "NodeListItem",
									"Data": "1",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 1,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "MQ==",
										"Num": 1
									},
									"Properties": {
										"id": "20210708010146-w5ytpd1"
									},
									"Children": [
										{
											"ID": "20210708010146-7xp7x62",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-7xp7x62"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "从 Hub 上下载 tomcat 镜像到本地并成功运行"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "docker run -it -p 8080:8080 tomcat"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-6cy8ere",
									"Type": "NodeListItem",
									"Data": "2",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 2,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "Mg==",
										"Num": 2
									},
									"Properties": {
										"id": "20210708010146-6cy8ere"
									},
									"Children": [
										{
											"ID": "20210708010146-sms2u83",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-sms2u83"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "故意删除上一步镜像生产 tomcat 容器的文档 docs（需要启动后进入）"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-08abww6",
									"Type": "NodeListItem",
									"Data": "3",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 3,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "Mw==",
										"Num": 3
									},
									"Properties": {
										"id": "20210708010146-08abww6"
									},
									"Children": [
										{
											"ID": "20210708010146-su55fw9",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-su55fw9"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "也即当前的 tomcat 运行实例是一个没有文档内容的容器，以它为模板 commit 一个没有 doc 的 tomcat 新镜像"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-vbi4mf1",
									"Type": "NodeListItem",
									"Data": "4",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 4,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "NA==",
										"Num": 4
									},
									"Properties": {
										"id": "20210708010146-vbi4mf1"
									},
									"Children": [
										{
											"ID": "20210708010146-1rrhgeq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-1rrhgeq"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "启动我们的新镜像并和原来的对比"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-lba6mr5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210708010146-lba6mr5"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "Docker 安装"
				}
			]
		},
		{
			"ID": "20210708010146-jjbmvt1",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 3,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210708010146-jjbmvt1"
			},
			"Children": [
				{
					"ID": "20210708010146-101be8u",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210708010146-101be8u"
					},
					"Children": [
						{
							"ID": "20210708010146-fsoxgqw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-fsoxgqw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "查看"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://docs.docker.com/install/",
									"TextMarkTextContent": "官网文档"
								},
								{
									"Type": "NodeText",
									"Data": "，有各种系统的安装介绍。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-ka27zh1",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210708010146-ka27zh1"
					},
					"Children": [
						{
							"ID": "20210708010146-144pvwp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-144pvwp"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "配置镜像加速，在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://cr.console.aliyun.com/cn-hangzhou/instances/repositories",
									"TextMarkTextContent": "阿里云的容器镜像服务"
								},
								{
									"Type": "NodeText",
									"Data": "中镜像加速器按步骤配置即可。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-e1mempf",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20210708010146-e1mempf"
					},
					"Children": [
						{
							"ID": "20210708010146-mjru1c8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-mjru1c8"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "为解决每次执行 docker 命令都需要 sudo，可以将当前用户添加到 docker 组中"
								}
							]
						},
						{
							"ID": "20210708010146-q17kihx",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "YmFzaA==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708010146-q17kihx"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YmFzaA=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "sudo groupadd docker # 一般安装 docker 后都会自动添加该组\nsudo gpasswd -a ${USER} docker # 添加当前用户到 docker 组\nsudo service docker restart # 重启 docker 服务\nnewgrp - docker # 刷新 docker 成员\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-tpy4s7f",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210708010146-tpy4s7f"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "Docker 帮助命令"
				}
			]
		},
		{
			"ID": "20210708010146-m8ckubb",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-m8ckubb"
			},
			"Children": [
				{
					"ID": "20210708010146-uvefph9",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-uvefph9"
					},
					"Children": [
						{
							"ID": "20210708010146-5purmz0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-5purmz0"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker version"
								},
								{
									"Type": "NodeText",
									"Data": "：docker 的版本等信息"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-9lzx3in",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-9lzx3in"
					},
					"Children": [
						{
							"ID": "20210708010146-gu2cwzw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-gu2cwzw"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker info"
								},
								{
									"Type": "NodeText",
									"Data": "：docker 详细信息"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-hm42klw",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-hm42klw"
					},
					"Children": [
						{
							"ID": "20210708010146-73q639a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-73q639a"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker --help"
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "帮助"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-pl0542d",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210708010146-pl0542d"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "Docker 镜像命令"
				}
			]
		},
		{
			"ID": "20210708010146-tjjzixd",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-tjjzixd"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "列出镜像"
				}
			]
		},
		{
			"ID": "20210708010146-ynkum7o",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-ynkum7o"
			},
			"Children": [
				{
					"ID": "20210708010146-3u9tqow",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-3u9tqow"
					},
					"Children": [
						{
							"ID": "20210708010146-o6nyzjd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-o6nyzjd"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker images [options]"
								},
								{
									"Type": "NodeText",
									"Data": "：列出"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "本地主机"
								},
								{
									"Type": "NodeText",
									"Data": "上的镜像"
								}
							]
						},
						{
							"ID": "20210708010146-m73swaz",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210708010146-m73swaz"
							},
							"Children": [
								{
									"ID": "20210708010146-7okogo8",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-7okogo8"
									},
									"Children": [
										{
											"ID": "20210708010146-qvztmoa",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-qvztmoa"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "ls"
												},
												{
													"Type": "NodeText",
													"Data": "：可省略，简写"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-tzo9g66",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-tzo9g66"
									},
									"Children": [
										{
											"ID": "20210708010146-og909ql",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-og909ql"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "-a"
												},
												{
													"Type": "NodeText",
													"Data": "："
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "列出本地所有的镜像（含中间映像层）"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-zkkgkwi",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-zkkgkwi"
									},
									"Children": [
										{
											"ID": "20210708010146-3qo9dgq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-3qo9dgq"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "-q"
												},
												{
													"Type": "NodeText",
													"Data": "："
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "静默"
												},
												{
													"Type": "NodeText",
													"Data": "模式，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "只显示镜像 ID"
												},
												{
													"Type": "NodeText",
													"Data": "。"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-18qqaji",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-18qqaji"
									},
									"Children": [
										{
											"ID": "20210708010146-bb7u9b9",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-bb7u9b9"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "--digests"
												},
												{
													"Type": "NodeText",
													"Data": "：显示镜像的摘要信息"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-pipxnrx",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-pipxnrx"
									},
									"Children": [
										{
											"ID": "20210708010146-z7rvvub",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-z7rvvub"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "--no-trunc"
												},
												{
													"Type": "NodeText",
													"Data": "：显示完整的镜像信息"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20210708010146-sdbhncs",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "YmFzaA==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708010146-sdbhncs"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YmFzaA=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "docker image ls\n# 输出如下\nREPOSITORY           TAG                 IMAGE ID            CREATED             SIZE\nredis                latest              5f515359c7f8        5 days ago          183 MB\nnginx                latest              05a60462f8ba        5 days ago          181 MB\nmongo                3.2                 fe9198c04d62        5 days ago          342 MB\n\u003cnone\u003e               \u003cnone\u003e              00285df0df87        5 days ago          342 MB\nubuntu               16.04               f753707788c5        4 weeks ago         127 MB\nubuntu               latest              f753707788c5        4 weeks ago         127 MB\nubuntu               14.04               1e0c3dd64ccd        4 weeks ago         188 MB\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708010146-5qit2ev",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-5qit2ev"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "REPOSITORY：表示镜像的仓库名；TAG：镜像的标签；IMAGE ID：镜像 ID；CREATED：镜像创建时间；SIZE：镜像大小"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-cpnic92",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-cpnic92"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "搜索镜像"
				}
			]
		},
		{
			"ID": "20210708010146-7tr5tvj",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-7tr5tvj"
			},
			"Children": [
				{
					"ID": "20210708010146-w9i4q6u",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-w9i4q6u"
					},
					"Children": [
						{
							"ID": "20210708010146-2kj8hw3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-2kj8hw3"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker search [OPTIONS] 镜像名字"
								},
								{
									"Type": "NodeText",
									"Data": "：从https://hub.docker.com来查找镜像的！"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-97sh700",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-97sh700"
					},
					"Children": [
						{
							"ID": "20210708010146-5kp5llj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-5kp5llj"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "--no-trunc"
								},
								{
									"Type": "NodeText",
									"Data": " : 显示完整的镜像描述"
								}
							]
						},
						{
							"ID": "20210708010146-7jgna6k",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210708010146-7jgna6k"
							},
							"Children": [
								{
									"ID": "20210708010146-mny4cnn",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-mny4cnn"
									},
									"Children": [
										{
											"ID": "20210708010146-upgut8e",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-upgut8e"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "-s"
												},
												{
													"Type": "NodeText",
													"Data": " : "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "列出收藏数不小于指定值的镜像"
												},
												{
													"Type": "NodeText",
													"Data": "，star 缩写"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-gp5ovzi",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-gp5ovzi"
									},
									"Children": [
										{
											"ID": "20210708010146-mufx3h5",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-mufx3h5"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "--automated"
												},
												{
													"Type": "NodeText",
													"Data": " : 只列出 automated build 类型的镜像；"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-v2vutwf",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-v2vutwf"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "拉取镜像"
				}
			]
		},
		{
			"ID": "20210708010146-x8rexe9",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-x8rexe9"
			},
			"Children": [
				{
					"ID": "20210708010146-rr59zrn",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-rr59zrn"
					},
					"Children": [
						{
							"ID": "20210708010146-2a4o5sd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-2a4o5sd"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]"
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "下载镜像"
								}
							]
						},
						{
							"ID": "20210708010146-x8cs39j",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210708010146-x8cs39j"
							},
							"Children": [
								{
									"ID": "20210708010146-28ahipl",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-28ahipl"
									},
									"Children": [
										{
											"ID": "20210708010146-uoyhckz",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-uoyhckz"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "镜像仓库地址："
												},
												{
													"Type": "NodeText",
													"Data": " 地址的格式一般是 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "\u0026lt;域名/IP\u0026gt;[:端口号]"
												},
												{
													"Type": "NodeText",
													"Data": "。默认地址是 Docker Hub。"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-fnd7kvv",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-fnd7kvv"
									},
									"Children": [
										{
											"ID": "20210708010146-88gq0oa",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-88gq0oa"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "仓库名："
												},
												{
													"Type": "NodeText",
													"Data": " 如之前所说，这里的仓库名是两段式名称，即 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "\u0026lt;用户名\u0026gt;/\u0026lt;软件名\u0026gt;"
												},
												{
													"Type": "NodeText",
													"Data": "。对于 Docker Hub，如果不给出用户名，则默认为 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "library"
												},
												{
													"Type": "NodeText",
													"Data": "，也就是官方镜像。"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-f9a8y6i",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-f9a8y6i"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "删除镜像"
				}
			]
		},
		{
			"ID": "20210708010146-m1dzrpg",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-m1dzrpg"
			},
			"Children": [
				{
					"ID": "20210708010146-ki3qd2t",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-ki3qd2t"
					},
					"Children": [
						{
							"ID": "20210708010146-xga1zws",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-xga1zws"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker image rm [选项] \u0026lt;镜像1\u0026gt; [\u0026lt;镜像2\u0026gt; ...]"
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "删除镜像"
								},
								{
									"Type": "NodeText",
									"Data": "，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "-f"
								},
								{
									"Type": "NodeText",
									"Data": "为强制删除"
								}
							]
						},
						{
							"ID": "20210708010146-1krhjaf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-1krhjaf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "其中，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "\u0026lt;镜像\u0026gt;"
								},
								{
									"Type": "NodeText",
									"Data": " 可以是 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "镜像短 ID"
								},
								{
									"Type": "NodeText",
									"Data": "（截取长 ID 首部即可）、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "镜像长 ID"
								},
								{
									"Type": "NodeText",
									"Data": "、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "镜像名"
								},
								{
									"Type": "NodeText",
									"Data": " 或者 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "镜像摘要"
								}
							]
						},
						{
							"ID": "20210708010146-4003z9b",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210708010146-4003z9b"
							},
							"Children": [
								{
									"ID": "20210708010146-7incddf",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-7incddf"
									},
									"Children": [
										{
											"ID": "20210708010146-wnkgdp7",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-wnkgdp7"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "docker rmi -f 镜像ID"
												},
												{
													"Type": "NodeText",
													"Data": "：删除单个，不写 tag 默认为 latest"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-43ep02a",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-43ep02a"
									},
									"Children": [
										{
											"ID": "20210708010146-zrb67ec",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-zrb67ec"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "docker rmi -f 镜像名1:TAG 镜像名2:TAG "
												},
												{
													"Type": "NodeText",
													"Data": "：删除多个"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-ow9t34y",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-ow9t34y"
									},
									"Children": [
										{
											"ID": "20210708010146-ybvq9sw",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-ybvq9sw"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "docker rmi -f $(docker images -qa)"
												},
												{
													"Type": "NodeText",
													"Data": "：删除全部"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-ww2sxh4",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-ww2sxh4"
					},
					"Children": [
						{
							"ID": "20210708010146-4whox0d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-4whox0d"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker image ls"
								},
								{
									"Type": "NodeText",
									"Data": " 命令来配合"
								}
							]
						},
						{
							"ID": "20210708010146-0sslawd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-0sslawd"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "像其它可以承接多个实体的命令一样，可以使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker image ls -q"
								},
								{
									"Type": "NodeText",
									"Data": " 来配合使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker image rm"
								},
								{
									"Type": "NodeText",
									"Data": "，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。比如，我们需要删除所有仓库名为 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "redis"
								},
								{
									"Type": "NodeText",
									"Data": " 的镜像："
								}
							]
						},
						{
							"ID": "20210708010146-hcq9wld",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "YmFzaA==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708010146-hcq9wld"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YmFzaA=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "docker image rm $(docker image ls -q redis)\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708010146-xfg4hiu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-xfg4hiu"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "或者删除所有在 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "mongo:3.2"
								},
								{
									"Type": "NodeText",
									"Data": " 之前的镜像："
								}
							]
						},
						{
							"ID": "20210708010146-hiuey0b",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "YmFzaA==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708010146-hiuey0b"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YmFzaA=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "docker image rm $(docker image ls -q -f before=mongo:3.2)\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-far8yyb",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-far8yyb"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "镜像、容器等体积"
				}
			]
		},
		{
			"ID": "20210708010146-lx8vckr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-lx8vckr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果仔细观察，会注意到，这里标识的所占用空间和在 Docker Hub 上看到的镜像大小不同。比如，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ubuntu:16.04"
				},
				{
					"Type": "NodeText",
					"Data": " 镜像大小，在这里是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "127 MB"
				},
				{
					"Type": "NodeText",
					"Data": "，但是在 Docker Hub 显示的却是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "50 MB"
				},
				{
					"Type": "NodeText",
					"Data": "。这是因为 Docker Hub 中显示的体积是压缩后的体积。在镜像下载和上传过程中镜像是保持着压缩状态的，因此 Docker Hub 所显示的大小是网络传输中更关心的流量大小。而 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker image ls"
				},
				{
					"Type": "NodeText",
					"Data": " 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。"
				}
			]
		},
		{
			"ID": "20210708010146-xtnclmr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-xtnclmr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "另外一个需要注意的问题是，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker image ls"
				},
				{
					"Type": "NodeText",
					"Data": " 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。你可以通过以下命令来便捷的查看镜像、容器、数据卷所占用的空间。"
				}
			]
		},
		{
			"ID": "20210708010146-ey67boq",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-ey67boq"
			},
			"Children": [
				{
					"ID": "20210708010146-w2jdm8o",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-w2jdm8o"
					},
					"Children": [
						{
							"ID": "20210708010146-6oa49yg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-6oa49yg"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker system df"
								},
								{
									"Type": "NodeText",
									"Data": "：查看镜像、容器、本地卷、构建缓存的空间"
								}
							]
						},
						{
							"ID": "20210708010146-j2mho1r",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "YmFzaA==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708010146-j2mho1r"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YmFzaA=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "docker system df\n# 输出如下\nTYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE\nImages              24                  0                   1.992GB             1.992GB (100%)\nContainers          1                   0                   62.82MB             62.82MB (100%)\nLocal Volumes       9                   0                   652.2MB             652.2MB (100%)\nBuild Cache                                                 0B                  0B\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-ktaz5ry",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-ktaz5ry"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "虚悬镜像"
				}
			]
		},
		{
			"ID": "20210708010146-gswixh2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-gswixh2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "iamges"
				},
				{
					"Type": "NodeText",
					"Data": "的镜像列表中，还可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "none"
				}
			]
		},
		{
			"ID": "20210708010146-qb8k6og",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-qb8k6og"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cnone\u003e               \u003cnone\u003e              00285df0df87        5 days ago          342 MB\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-tu4jjag",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-tu4jjag"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个镜像原本是有镜像名和标签的，原来为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "mongo:3.2"
				},
				{
					"Type": "NodeText",
					"Data": "，随着官方镜像维护，发布了新版本后，重新 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker pull mongo:3.2"
				},
				{
					"Type": "NodeText",
					"Data": " 时，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "mongo:3.2"
				},
				{
					"Type": "NodeText",
					"Data": " 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "none"
				},
				{
					"Type": "NodeText",
					"Data": "。除了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker pull"
				},
				{
					"Type": "NodeText",
					"Data": " 可能导致这种情况，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker build"
				},
				{
					"Type": "NodeText",
					"Data": " 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "none"
				},
				{
					"Type": "NodeText",
					"Data": " 的镜像。这类无标签镜像也被称为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "虚悬镜像(dangling image)"
				},
				{
					"Type": "NodeText",
					"Data": " ，可以用下面的命令专门显示这类镜像："
				}
			]
		},
		{
			"ID": "20210708010146-43zyou7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-43zyou7"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "docker image ls -f dangling=true\n# 输出如下\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n\u003cnone\u003e              \u003cnone\u003e              00285df0df87        5 days ago          342 MB\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-dhzp88z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-dhzp88z"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。"
				}
			]
		},
		{
			"ID": "20210708010146-lz10jj0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-lz10jj0"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "docker image prune\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-3rw9s1l",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-3rw9s1l"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "中间层镜像"
				}
			]
		},
		{
			"ID": "20210708010146-ohxrpjl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-ohxrpjl"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了加速镜像构建、重复利用资源，Docker 会利用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "中间层镜像"
				},
				{
					"Type": "NodeText",
					"Data": "。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker image ls"
				},
				{
					"Type": "NodeText",
					"Data": " 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-a"
				},
				{
					"Type": "NodeText",
					"Data": " 参数。"
				}
			]
		},
		{
			"ID": "20210708010146-vkuh769",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-vkuh769"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "docker image ls -a\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-fmxwsr6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-fmxwsr6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。"
				}
			]
		},
		{
			"ID": "20210708010146-vtkrsnt",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-vtkrsnt"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "列出部分镜像"
				}
			]
		},
		{
			"ID": "20210708010146-k3pqd1r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-k3pqd1r"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不加任何参数的情况下，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker image ls"
				},
				{
					"Type": "NodeText",
					"Data": " 会列出所有顶级镜像，但是有时候我们只希望列出部分镜像。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker image ls"
				},
				{
					"Type": "NodeText",
					"Data": " 有好几个参数可以帮助做到这个事情。"
				}
			]
		},
		{
			"ID": "20210708010146-69dp99i",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-69dp99i"
			},
			"Children": [
				{
					"ID": "20210708010146-k7l50du",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-k7l50du"
					},
					"Children": [
						{
							"ID": "20210708010146-e1q13ka",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-e1q13ka"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "根据仓库名列出镜像"
								}
							]
						},
						{
							"ID": "20210708010146-1sa9oqi",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "YmFzaA==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708010146-1sa9oqi"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YmFzaA=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "docker image ls ubuntu\n# 输出如下\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              16.04               f753707788c5        4 weeks ago         127 MB\nubuntu              latest              f753707788c5        4 weeks ago         127 MB\nubuntu              14.04               1e0c3dd64ccd        4 weeks ago         188 MB\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-cotg38w",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-cotg38w"
					},
					"Children": [
						{
							"ID": "20210708010146-chqli0w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-chqli0w"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "列出特定的某个镜像，也就是说指定仓库名和标签"
								}
							]
						},
						{
							"ID": "20210708010146-31lkhiz",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "YmFzaA==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708010146-31lkhiz"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YmFzaA=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "docker image ls ubuntu:16.04\n# 输出如下\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              16.04               f753707788c5        4 weeks ago         127 MB\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-v4lj50s",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-v4lj50s"
					},
					"Children": [
						{
							"ID": "20210708010146-gf63y4d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-gf63y4d"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "除此以外，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker image ls"
								},
								{
									"Type": "NodeText",
									"Data": " 还支持强大的过滤器参数 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "--filter"
								},
								{
									"Type": "NodeText",
									"Data": "，或者简写 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "-f"
								},
								{
									"Type": "NodeText",
									"Data": "。之前我们已经看到了使用过滤器来列出虚悬镜像的用法，它还有更多的用法。比如，我们希望看到在 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "mongo:3.2"
								},
								{
									"Type": "NodeText",
									"Data": " 之后建立的镜像，可以用下面的命令"
								}
							]
						},
						{
							"ID": "20210708010146-6jokp58",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "YmFzaA==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708010146-6jokp58"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YmFzaA=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "docker image ls -f since=mongo:3.2\n# 输出如下\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nredis               latest              5f515359c7f8        5 days ago          183 MB\nnginx               latest              05a60462f8ba        5 days ago          181 MB\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-zd4db4a",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-zd4db4a"
					},
					"Children": [
						{
							"ID": "20210708010146-9xi6ddv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-9xi6ddv"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "想查看某个位置之前的镜像也可以，只需要把 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "since"
								},
								{
									"Type": "NodeText",
									"Data": " 换成 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "before"
								},
								{
									"Type": "NodeText",
									"Data": " 即可。"
								}
							]
						},
						{
							"ID": "20210708010146-ockpbpx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-ockpbpx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "此外，如果镜像构建时，定义了 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "LABEL"
								},
								{
									"Type": "NodeText",
									"Data": "，还可以通过 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "LABEL"
								},
								{
									"Type": "NodeText",
									"Data": " 来过滤。"
								}
							]
						},
						{
							"ID": "20210708010146-ydt8guf",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "YmFzaA==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708010146-ydt8guf"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "YmFzaA=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "docker image ls -f label=com.example.version=0.1\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-6ao4x6u",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-6ao4x6u"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "以特定格式显示"
				}
			]
		},
		{
			"ID": "20210708010146-e9e8fgv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-e9e8fgv"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认情况下，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker image ls"
				},
				{
					"Type": "NodeText",
					"Data": " 会输出一个完整的表格，但是我们并非所有时候都会需要这些内容。比如，刚才删除虚悬镜像的时候，我们需要利用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker image ls"
				},
				{
					"Type": "NodeText",
					"Data": " 把所有的虚悬镜像的 ID 列出来，然后才可以交给 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker image rm"
				},
				{
					"Type": "NodeText",
					"Data": " 命令作为参数来删除指定的这些镜像，这个时候就用到了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-q"
				},
				{
					"Type": "NodeText",
					"Data": " 参数。"
				}
			]
		},
		{
			"ID": "20210708010146-3iqh2og",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-3iqh2og"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "docker image ls -q\n# 输出如下\n5f515359c7f8\n05a60462f8ba\nfe9198c04d62\n00285df0df87\nf753707788c5\nf753707788c5\n1e0c3dd64ccd\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-m22thx9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-m22thx9"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "--filter"
				},
				{
					"Type": "NodeText",
					"Data": " 配合 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-q"
				},
				{
					"Type": "NodeText",
					"Data": " 产生出指定范围的 ID 列表，然后送给另一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker"
				},
				{
					"Type": "NodeText",
					"Data": " 命令作为参数，从而针对这组实体成批的进行某种操作的做法在 Docker 命令行使用过程中非常常见，不仅仅是镜像，将来我们会在各个命令中看到这类搭配以完成很强大的功能。因此每次在文档看到过滤器后，可以多注意一下它们的用法。"
				}
			]
		},
		{
			"ID": "20210708010146-xqtwqqj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-xqtwqqj"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "另外一些时候，我们可能只是对表格的结构不满意，希望自己组织列；或者不希望有标题，这样方便其它程序解析结果等，这就用到了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://www.qfdmy.com/wp-content/themes/quanbaike/go.php?url=aHR0cHM6Ly9nb2h1Z28uaW8vdGVtcGxhdGVzL2dvLXRlbXBsYXRlcy8=",
					"TextMarkTextContent": "Go 的模板语法"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210708010146-ka4kpyp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-ka4kpyp"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如，下面的命令会直接列出镜像结果，并且只包含镜像 ID 和仓库名："
				}
			]
		},
		{
			"ID": "20210708010146-i1szjuy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-i1szjuy"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "docker image ls --format \"{{.ID}}: {{.Repository}}\"\n# 输出如下\n5f515359c7f8: redis\n05a60462f8ba: nginx\nfe9198c04d62: mongo\n00285df0df87: \u003cnone\u003e\nf753707788c5: ubuntu\nf753707788c5: ubuntu\n1e0c3dd64ccd: ubuntu\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-dowwctb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-dowwctb"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "或者打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列："
				}
			]
		},
		{
			"ID": "20210708010146-unm8ytc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-unm8ytc"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "docker image ls --format \"table {{.ID}}\\t{{.Repository}}\\t{{.Tag}}\"\n# 输出如下\nIMAGE ID            REPOSITORY          TAG\n5f515359c7f8        redis               latest\n05a60462f8ba        nginx               latest\nfe9198c04d62        mongo               3.2\n00285df0df87        \u003cnone\u003e              \u003cnone\u003e\nf753707788c5        ubuntu              16.04\nf753707788c5        ubuntu              latest\n1e0c3dd64ccd        ubuntu              14.04\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-yv6bta1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210708010146-yv6bta1"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "Docker 容器命令"
				}
			]
		},
		{
			"ID": "20210708010146-h2ds6ja",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-h2ds6ja"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "查看容器"
				}
			]
		},
		{
			"ID": "20210708010146-0lvbesm",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-0lvbesm"
			},
			"Children": [
				{
					"ID": "20210708010146-qgznv9e",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-qgznv9e"
					},
					"Children": [
						{
							"ID": "20210708010146-899e0zh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-899e0zh"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "列出当前所有正在运行的容器"
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker ps [OPTIONS]"
								}
							]
						},
						{
							"ID": "20210708010146-vze9qlx",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210708010146-vze9qlx"
							},
							"Children": [
								{
									"ID": "20210708010146-j4ts0dy",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-j4ts0dy"
									},
									"Children": [
										{
											"ID": "20210708010146-kyjcxib",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-kyjcxib"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "-a"
												},
												{
													"Type": "NodeText",
													"Data": " :列出当前"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "所有正在运行的容器+历史上运行过的"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-epret27",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-epret27"
									},
									"Children": [
										{
											"ID": "20210708010146-8ckuae6",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-8ckuae6"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "-l"
												},
												{
													"Type": "NodeText",
													"Data": " :显示最近创建的容器。"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-hd0xw34",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-hd0xw34"
									},
									"Children": [
										{
											"ID": "20210708010146-23v062u",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-23v062u"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "-n"
												},
												{
													"Type": "NodeText",
													"Data": "：显示最近 n 个创建的容器。"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-1r9hm5z",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-1r9hm5z"
									},
									"Children": [
										{
											"ID": "20210708010146-1p9o4nm",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-1p9o4nm"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "-q"
												},
												{
													"Type": "NodeText",
													"Data": " :"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "静默"
												},
												{
													"Type": "NodeText",
													"Data": "模式，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "只显示容器编号"
												},
												{
													"Type": "NodeText",
													"Data": "。"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-03guc5x",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-03guc5x"
									},
									"Children": [
										{
											"ID": "20210708010146-jtuqtla",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-jtuqtla"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "--no-trunc"
												},
												{
													"Type": "NodeText",
													"Data": " :不截断输出。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-xu0uywn",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-xu0uywn"
					},
					"Children": [
						{
							"ID": "20210708010146-p6eyz68",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-p6eyz68"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "查看"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "容器内运行的进程"
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker top 容器ID"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-v3ooy3s",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-v3ooy3s"
					},
					"Children": [
						{
							"ID": "20210708010146-uyt6suw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-uyt6suw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "查看容器内部细节："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker inspect 容器ID"
								},
								{
									"Type": "NodeText",
									"Data": "。以 JSON 格式来查看细节"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-75mpxa4",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-75mpxa4"
					},
					"Children": [
						{
							"ID": "20210708010146-27ncrdd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-27ncrdd"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "进入正在运行的容器并以命令行交互"
								}
							]
						},
						{
							"ID": "20210708010146-czdxxdd",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210708010146-czdxxdd"
							},
							"Children": [
								{
									"ID": "20210708010146-5wns8oi",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-5wns8oi"
									},
									"Children": [
										{
											"ID": "20210708010146-xw1jvui",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-xw1jvui"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "docker exec -it 容器ID [命令]"
												},
												{
													"Type": "NodeText",
													"Data": "：在容器中打开新的终端，并且可以启动新的进程（利用命令）"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-o70m5m7",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-o70m5m7"
									},
									"Children": [
										{
											"ID": "20210708010146-ig07vfm",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-ig07vfm"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "docker attach 容器ID"
												},
												{
													"Type": "NodeText",
													"Data": "：直接重新进入容器启动命令的终端，不会启动新的进程"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-3ixz5or",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-3ixz5or"
					},
					"Children": [
						{
							"ID": "20210708010146-l37bokv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-l37bokv"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "查看容器"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "日志"
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker logs -f -t --tail 容器ID"
								}
							]
						},
						{
							"ID": "20210708010146-vdws40m",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210708010146-vdws40m"
							},
							"Children": [
								{
									"ID": "20210708010146-2dkfrml",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-2dkfrml"
									},
									"Children": [
										{
											"ID": "20210708010146-atne84u",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-atne84u"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "-t"
												},
												{
													"Type": "NodeText",
													"Data": " 是加入时间戳"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-9l3nviz",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-9l3nviz"
									},
									"Children": [
										{
											"ID": "20210708010146-hn5rsq4",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-hn5rsq4"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "-f"
												},
												{
													"Type": "NodeText",
													"Data": " 跟随最新的日志打印"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-s6zfn68",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-s6zfn68"
									},
									"Children": [
										{
											"ID": "20210708010146-ouyqb81",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-ouyqb81"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "--tail"
												},
												{
													"Type": "NodeText",
													"Data": " 数字 显示最后多少条"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-sa3hnhp",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-sa3hnhp"
					},
					"Children": [
						{
							"ID": "20210708010146-f8j41gq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-f8j41gq"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "从容器内拷贝文件到主机上（可反过来）"
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker cp 容器ID:容器内路径 目的主机路径"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-pbjd9td",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-pbjd9td"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "启动容器"
				}
			]
		},
		{
			"ID": "20210708010146-qq91bdf",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-qq91bdf"
			},
			"Children": [
				{
					"ID": "20210708010146-ic998lv",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-ic998lv"
					},
					"Children": [
						{
							"ID": "20210708010146-kxk5rqa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-kxk5rqa"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "新建并启动容器"
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker run [OPTIONS] IMAGE [COMMAND] [ARG...]"
								}
							]
						},
						{
							"ID": "20210708010146-5ue5sfn",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210708010146-5ue5sfn"
							},
							"Children": [
								{
									"ID": "20210708010146-tnu1uek",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-tnu1uek"
									},
									"Children": [
										{
											"ID": "20210708010146-lf0vfii",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-lf0vfii"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "--name=指定容器名称"
												},
												{
													"Type": "NodeText",
													"Data": ": 为容器指定一个"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "名称"
												},
												{
													"Type": "NodeText",
													"Data": "；"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-cvpoti7",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-cvpoti7"
									},
									"Children": [
										{
											"ID": "20210708010146-waz24xr",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-waz24xr"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "-d"
												},
												{
													"Type": "NodeText",
													"Data": ": 后台运行容器，并返回容器 ID，也即"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "启动守护式容器"
												},
												{
													"Type": "NodeText",
													"Data": "；"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-xnfrxcv",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-xnfrxcv"
									},
									"Children": [
										{
											"ID": "20210708010146-ax4nfhy",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-ax4nfhy"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "-i"
												},
												{
													"Type": "NodeText",
													"Data": "：以"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "交互模式运行容器"
												},
												{
													"Type": "NodeText",
													"Data": "，通常与 -t 同时使用；需指定或在容器内执行/bin/bash 命令。"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-wnwa5fq",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-wnwa5fq"
									},
									"Children": [
										{
											"ID": "20210708010146-41ngsg8",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-41ngsg8"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "-t"
												},
												{
													"Type": "NodeText",
													"Data": "：为容器重新"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "分配一个伪输入终端"
												},
												{
													"Type": "NodeText",
													"Data": "，通常与 -i 同时使用；"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-mdbrvc5",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-mdbrvc5"
									},
									"Children": [
										{
											"ID": "20210708010146-saoq3ts",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-saoq3ts"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "-P"
												},
												{
													"Type": "NodeText",
													"Data": ": 随机端口映射；"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-173clip",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-173clip"
									},
									"Children": [
										{
											"ID": "20210708010146-wehtvow",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-wehtvow"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "-p"
												},
												{
													"Type": "NodeText",
													"Data": ": "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "指定端口映射"
												},
												{
													"Type": "NodeText",
													"Data": "，有以下四种格式"
												}
											]
										},
										{
											"ID": "20210708010146-xw1glse",
											"Type": "NodeList",
											"ListData": {
												"Tight": true,
												"BulletChar": 45,
												"Padding": 2,
												"Marker": "LQ==",
												"Num": -1
											},
											"Properties": {
												"id": "20210708010146-xw1glse"
											},
											"Children": [
												{
													"ID": "20210708010146-e8qci3y",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210708010146-e8qci3y"
													},
													"Children": [
														{
															"ID": "20210708010146-p1b86io",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210708010146-p1b86io"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "code",
																	"TextMarkTextContent": "ip:hostPort:containerPort"
																}
															]
														}
													]
												},
												{
													"ID": "20210708010146-aqzbvjt",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210708010146-aqzbvjt"
													},
													"Children": [
														{
															"ID": "20210708010146-meb7g4y",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210708010146-meb7g4y"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "code",
																	"TextMarkTextContent": "ip::containerPort"
																}
															]
														}
													]
												},
												{
													"ID": "20210708010146-xz2utlz",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210708010146-xz2utlz"
													},
													"Children": [
														{
															"ID": "20210708010146-7raf5k4",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210708010146-7raf5k4"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "code",
																	"TextMarkTextContent": "hostPort:containerPort"
																},
																{
																	"Type": "NodeText",
																	"Data": "（常用）"
																}
															]
														}
													]
												},
												{
													"ID": "20210708010146-ez47hkh",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210708010146-ez47hkh"
													},
													"Children": [
														{
															"ID": "20210708010146-zzhwrn6",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210708010146-zzhwrn6"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "code",
																	"TextMarkTextContent": "containerPort"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-1gmzu6t",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-1gmzu6t"
					},
					"Children": [
						{
							"ID": "20210708010146-xedcjgh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-xedcjgh"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "启动守护式容器"
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker run -d 容器名"
								}
							]
						},
						{
							"ID": "20210708010146-berbwlm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-berbwlm"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "问题：然后 docker ps -a 进行查看, 会发现容器已经退出。因为 Docker 容器后台运行,就必须有一个前台进程，容器运行的命令如果不是那些一直挂起的命令（比如运行 top，tail），就是会自动退出的。例如启动 Ngixn，需要使用交互模式。Tomcat 可以使用守护式启动。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-ieoqiy2",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-ieoqiy2"
					},
					"Children": [
						{
							"ID": "20210708010146-f3gce47",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-f3gce47"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "启动容器"
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker start 容器ID或者容器名"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-w6zx3le",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-w6zx3le"
					},
					"Children": [
						{
							"ID": "20210708010146-nc3r86n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-nc3r86n"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "重启容器"
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker restart 容器ID或者容器名"
								}
							]
						},
						{
							"ID": "20210708010146-a8zqchk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-a8zqchk"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当利用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker run"
								},
								{
									"Type": "NodeText",
									"Data": " 来创建容器时，Docker 在后台运行的标准操作包括："
								}
							]
						},
						{
							"ID": "20210708010146-95nzjny",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210708010146-95nzjny"
							},
							"Children": [
								{
									"ID": "20210708010146-ls36kqx",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-ls36kqx"
									},
									"Children": [
										{
											"ID": "20210708010146-wfe8cgk",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-wfe8cgk"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "检查本地是否存在指定的镜像，不存在就从公有仓库下载"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-vwk7n08",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-vwk7n08"
									},
									"Children": [
										{
											"ID": "20210708010146-8d6i1oa",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-8d6i1oa"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "利用镜像创建并启动一个容器"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-57swwjc",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-57swwjc"
									},
									"Children": [
										{
											"ID": "20210708010146-6nlwdmo",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-6nlwdmo"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "分配一个文件系统，并在只读的镜像层外面挂载一层可读写层"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-cdaenr0",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-cdaenr0"
									},
									"Children": [
										{
											"ID": "20210708010146-j3icq50",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-j3icq50"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-rn9uddm",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-rn9uddm"
									},
									"Children": [
										{
											"ID": "20210708010146-nzxc4vb",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-nzxc4vb"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "从地址池配置一个 ip 地址给容器"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-hk4nfvx",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-hk4nfvx"
									},
									"Children": [
										{
											"ID": "20210708010146-kdigvrr",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-kdigvrr"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "执行用户指定的应用程序"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-e9gftce",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-e9gftce"
									},
									"Children": [
										{
											"ID": "20210708010146-7l331hw",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-7l331hw"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "执行完毕后容器被终止"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-t0wgaig",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-t0wgaig"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "终止容器"
				}
			]
		},
		{
			"ID": "20210708010146-gpfpphh",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-gpfpphh"
			},
			"Children": [
				{
					"ID": "20210708010146-0vc82kc",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-0vc82kc"
					},
					"Children": [
						{
							"ID": "20210708010146-8wfsuqr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-8wfsuqr"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "退出容器"
								},
								{
									"Type": "NodeText",
									"Data": "："
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-2rv290n",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-2rv290n"
					},
					"Children": [
						{
							"ID": "20210708010146-y7h71jr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-y7h71jr"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "exit"
								},
								{
									"Type": "NodeText",
									"Data": "：容器停止退出"
								}
							]
						},
						{
							"ID": "20210708010146-unuztp6",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210708010146-unuztp6"
							},
							"Children": [
								{
									"ID": "20210708010146-ynpp7b0",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-ynpp7b0"
									},
									"Children": [
										{
											"ID": "20210708010146-29jsdrd",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-29jsdrd"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Ctrl+D"
												}
											]
										}
									]
								},
								{
									"ID": "20210708010146-44rccrp",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708010146-44rccrp"
									},
									"Children": [
										{
											"ID": "20210708010146-i200dho",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708010146-i200dho"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "Ctrl+P+Q"
												},
												{
													"Type": "NodeText",
													"Data": "：容器不停止退出"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-enf581k",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-enf581k"
					},
					"Children": [
						{
							"ID": "20210708010146-okksv3v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-okksv3v"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "停止容器（会有延迟）："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker stop 容器ID或者容器名"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-cxn6263",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-cxn6263"
					},
					"Children": [
						{
							"ID": "20210708010146-rde7zke",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-rde7zke"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "强制立即停止容器："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker kill 容器ID或者容器名"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-dydrob9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-dydrob9"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "删除容器"
				}
			]
		},
		{
			"ID": "20210708010146-lnyjr7v",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-lnyjr7v"
			},
			"Children": [
				{
					"ID": "20210708010146-q01943g",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-q01943g"
					},
					"Children": [
						{
							"ID": "20210708010146-hh82g3b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-hh82g3b"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "删除已停止的容器"
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker rm 容器ID"
								},
								{
									"Type": "NodeText",
									"Data": "，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "-f"
								},
								{
									"Type": "NodeText",
									"Data": "为强制删除（终止容器并删除）"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-dgvw318",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-dgvw318"
					},
					"Children": [
						{
							"ID": "20210708010146-s5r92s2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-s5r92s2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "删除多个容器："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker rm -f $(docker ps -a -q)"
								},
								{
									"Type": "NodeText",
									"Data": "或"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker ps -a -q | xargs docker rm"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-7ugu3sl",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-7ugu3sl"
			},
			"Children": [
				{
					"ID": "20210708010146-11pluav",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-11pluav"
					},
					"Children": [
						{
							"ID": "20210708010146-q2bhr1g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-q2bhr1g"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "清理所有处于终止状态的容器："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker container prune"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-9hzsb42",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-9hzsb42"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "常用镜像/容器"
				}
			]
		},
		{
			"ID": "20210708010146-m8hvnok",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-m8hvnok"
			},
			"Children": [
				{
					"ID": "20210708010146-28yx4yn",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-28yx4yn"
					},
					"Children": [
						{
							"ID": "20210708010146-qd7ecex",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-qd7ecex"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "MySQL"
								}
							]
						},
						{
							"ID": "20210708010146-7xmvgkz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-7xmvgkz"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "docker run -d --name=tensquare_mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root [mysqlname/id]"
								}
							]
						},
						{
							"ID": "20210708010146-o2x1j1b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-o2x1j1b"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "会设置 ROOT 用户的密码为 root"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-cdwa46k",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210708010146-cdwa46k"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "常用命令表"
				}
			]
		},
		{
			"ID": "20210708010146-unqmnlm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-unqmnlm"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "img"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "./assets/18126975-DB12-4B9E-B653-D921C7BFFA70.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-grjgw4a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-grjgw4a"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像\nbuild     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像\ncommit    Create a new image from a container changes   # 提交当前容器为新的镜像\ncp        Copy files/folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中\ncreate    Create a new container                        # 创建一个新的容器，同 run，但不启动容器\ndiff      Inspect changes on a container's filesystem   # 查看 docker 容器变化\nevents    Get real time events from the server          # 从 docker 服务获取容器实时事件\nexec      Run a command in an existing container        # 在已存在的容器上运行命令\nexport    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]\nhistory   Show the history of an image                  # 展示一个镜像形成历史\nimages    List images                                   # 列出系统当前镜像\nimport    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]\ninfo      Display system-wide information               # 显示系统相关信息\ninspect   Return low-level information on a container   # 查看容器详细信息\nkill      Kill a running container                      # kill 指定 docker 容器\nload      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]\nlogin     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器\nlogout    Log out from a Docker registry server          # 从当前 Docker registry 退出\nlogs      Fetch the logs of a container                 # 输出当前容器日志信息\nport      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口\npause     Pause all processes within a container        # 暂停容器\nps        List containers                               # 列出容器列表\npull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像\npush      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器\nrestart   Restart a running container                   # 重启运行的容器\nrm        Remove one or more containers                 # 移除一个或者多个容器\nrmi       Remove one or more images      # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]\nrun       Run a command in a new container              # 创建一个新的容器并运行一个命令\nsave      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]\nsearch    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像\nstart     Start a stopped containers                    # 启动容器\nstop      Stop a running containers                     # 停止容器\ntag       Tag an image into a repository                # 给源中镜像打标签\ntop       Lookup the running processes of a container   # 查看容器中运行的进程信息\nunpause   Unpause a paused container                    # 取消暂停容器\nversion   Show the docker version information           # 查看 docker 版本号\nwait      Block until a container stops, then print its exit code   # 截取容器停止时的退出状态值\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-z70iz18",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210708010146-z70iz18"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "Dockerfile"
				}
			]
		},
		{
			"ID": "20210708010146-m16a4z8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-m16a4z8"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Dockerfile 是一个文本文件，其内包含了一条条的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "指令(Instruction)"
				},
				{
					"Type": "NodeText",
					"Data": "，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。就是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类似 Linux 中如何安装部署应用的过程"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210708010146-7bkzth8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-7bkzth8"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "FROM 指定基础镜像"
				}
			]
		},
		{
			"ID": "20210708010146-8tv7nll",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-8tv7nll"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以之前的 Nginx 镜像为例，这次我们使用 Dockerfile 来定制。在一个空白目录中，建立一个文本文件，并命名为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				}
			]
		},
		{
			"ID": "20210708010146-uteb2x2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-uteb2x2"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mkdir mynginx\ncd mynginx\ntouch Dockerfile\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-adj9z97",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-adj9z97"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": "其内容为"
				}
			]
		},
		{
			"ID": "20210708010146-7apduzv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-7apduzv"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "FROM nginx:latest\nRUN echo '\u003ch1\u003eHello, Docker!\u003c/h1\u003e' \u003e /usr/share/nginx/html/index.html\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-6v7lius",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20210708010146-6v7lius"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e "
				},
				{
					"ID": "20210708010146-i4bnjbf",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210708010146-i4bnjbf"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意：该文件的内容都是在 Docker 引擎中 ，与构建时上下文有关，与宿主机无关。为何 nginx 的目录在/usr/share/nginx，是因为以命令行方式进入 run 后的 nginx 容器中，其存在于该目录下。其他应用可能不同，如 Tomcat 在/usr/local/tomcat 下"
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-g2b4m6l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-g2b4m6l"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 Nginx 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FROM"
				},
				{
					"Type": "NodeText",
					"Data": " 就是指定 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "基础镜像"
				},
				{
					"Type": "NodeText",
					"Data": "，因此一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 中 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FROM"
				},
				{
					"Type": "NodeText",
					"Data": " 是必备的指令，并且必须是第一条指令。可指定基础镜像的版本如"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "nginx:v1"
				},
				{
					"Type": "NodeText",
					"Data": "，不指定版本则默认为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "latest"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210708010146-3417wd2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-3417wd2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "scratch"
				},
				{
					"Type": "NodeText",
					"Data": "。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。如果你以 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "scratch"
				},
				{
					"Type": "NodeText",
					"Data": " 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "swarm"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "coreos/etcd"
				},
				{
					"Type": "NodeText",
					"Data": "。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FROM scratch"
				},
				{
					"Type": "NodeText",
					"Data": " 会让镜像体积更加小巧。使用 Go 语言开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构语言的原因之一。"
				}
			]
		},
		{
			"ID": "20210708010146-4tbhi63",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-4tbhi63"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "RUN 执行命令"
				}
			]
		},
		{
			"ID": "20210708010146-l60vs5d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-l60vs5d"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": " 指令是用来执行命令行命令的。由于命令行的强大能力，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": " 指令在定制镜像时是最常用的指令之一。其格式有两种："
				}
			]
		},
		{
			"ID": "20210708010146-0elw6zx",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-0elw6zx"
			},
			"Children": [
				{
					"ID": "20210708010146-t0kk5jg",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-t0kk5jg"
					},
					"Children": [
						{
							"ID": "20210708010146-hfig2ej",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-hfig2ej"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "shell 格式："
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "RUN \u0026lt;命令\u0026gt;"
								},
								{
									"Type": "NodeText",
									"Data": "，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "RUN"
								},
								{
									"Type": "NodeText",
									"Data": " 指令就是这种格式。"
								}
							]
						},
						{
							"ID": "20210708010146-rjzc1no",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708010146-rjzc1no"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "RUN echo '\u003ch1\u003eHello, Docker!\u003c/h1\u003e' \u003e /usr/share/nginx/html/index.html\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-vlnrue5",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-vlnrue5"
					},
					"Children": [
						{
							"ID": "20210708010146-f10ymhf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-f10ymhf"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "exec 格式："
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "RUN [\u0026quot;可执行文件\u0026quot;, \u0026quot;参数1\u0026quot;, \u0026quot;参数2\u0026quot;]"
								},
								{
									"Type": "NodeText",
									"Data": "，这更像是函数调用中的格式。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-valuw36",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-valuw36"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "既然 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": " 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样："
				}
			]
		},
		{
			"ID": "20210708010146-tcc3hhg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-tcc3hhg"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "FROM debian:jessie\nRUN apt-get update\nRUN apt-get install -y gcc libc6-dev make\nRUN wget -O redis.tar.gz \"http://download.redis.io/releases/redis-3.2.5.tar.gz\"\nRUN mkdir -p /usr/src/redis\nRUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1\nRUN make -C /usr/src/redis\nRUN make -C /usr/src/redis install\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-np5wjxu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-np5wjxu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之前说过，Dockerfile 中每一个指令都会建立一层，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": " 也不例外。每一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": " 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "commit"
				},
				{
					"Type": "NodeText",
					"Data": " 这一层的修改，构成新的镜像。"
				}
			]
		},
		{
			"ID": "20210708010146-5ovkpyz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-5ovkpyz"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。这是很多初学 Docker 的人常犯的一个错误。"
				}
			]
		},
		{
			"ID": "20210708010146-n0f1xy8",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20210708010146-n0f1xy8"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e "
				},
				{
					"ID": "20210708010146-xwue66o",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210708010146-xwue66o"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "注意："
						},
						{
							"Type": "NodeText",
							"Data": " Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。"
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-903kwjs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-903kwjs"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 正确的写法应该是这样："
				}
			]
		},
		{
			"ID": "20210708010146-vh3jy5j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-vh3jy5j"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "FROM debian:jessie\nRUN buildDeps='gcc libc6-dev make' \\\n    \u0026\u0026 apt-get update \\\n    \u0026\u0026 apt-get install -y $buildDeps \\\n    \u0026\u0026 wget -O redis.tar.gz \"http://download.redis.io/releases/redis-3.2.5.tar.gz\" \\\n    \u0026\u0026 mkdir -p /usr/src/redis \\\n    \u0026\u0026 tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n    \u0026\u0026 make -C /usr/src/redis \\\n    \u0026\u0026 make -C /usr/src/redis install \\\n    \u0026\u0026 rm -rf /var/lib/apt/lists/* \\\n    \u0026\u0026 rm redis.tar.gz \\\n    \u0026\u0026 rm -r /usr/src/redis \\\n    \u0026\u0026 apt-get purge -y --auto-remove $buildDeps\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-dvbcbjm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-dvbcbjm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，之前所有的命令只有一个目的，就是编译、安装 Redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": " 对一一对应不同的命令，而是仅仅使用一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": " 指令，并使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026amp;\u0026amp;"
				},
				{
					"Type": "NodeText",
					"Data": " 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 Dockerfile 的时候，要经常提醒自己，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "这并不是在写 Shell 脚本，而是在定义每一层该如何构建。"
				}
			]
		},
		{
			"ID": "20210708010146-z6fmaa1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-z6fmaa1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\\"
				},
				{
					"Type": "NodeText",
					"Data": " 的命令换行方式，以及行首 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "#"
				},
				{
					"Type": "NodeText",
					"Data": " 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。"
				}
			]
		},
		{
			"ID": "20210708010146-l5w6kqd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-l5w6kqd"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "apt"
				},
				{
					"Type": "NodeText",
					"Data": " 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。"
				}
			]
		},
		{
			"ID": "20210708010146-0fdtb09",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-0fdtb09"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "每一层构建的最后一定要清理掉无关文件"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210708010146-dr1ffku",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-dr1ffku"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "COPY 复制文件到容器中"
				}
			]
		},
		{
			"ID": "20210708010146-oj5scnz",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-oj5scnz"
			},
			"Children": [
				{
					"ID": "20210708010146-1dyv2s5",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-1dyv2s5"
					},
					"Children": [
						{
							"ID": "20210708010146-b09iok2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-b09iok2"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "COPY \u0026lt;源路径\u0026gt;... \u0026lt;目标路径\u0026gt;"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-p1rs6pi",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-p1rs6pi"
					},
					"Children": [
						{
							"ID": "20210708010146-gsfqowe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-gsfqowe"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "COPY [\u0026quot;\u0026lt;源路径1\u0026gt;\u0026quot;,... \u0026quot;\u0026lt;目标路径\u0026gt;\u0026quot;]"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-lbqan8y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-lbqan8y"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": " 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "COPY"
				},
				{
					"Type": "NodeText",
					"Data": " 指令将从构建上下文目录中 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;源路径\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": " 的文件/目录复制到新的一层的镜像内的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;目标路径\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": " 位置。比如："
				}
			]
		},
		{
			"ID": "20210708010146-cu3986d",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-cu3986d"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "COPY package.json /usr/src/app/\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-ydpnzht",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-ydpnzht"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;源路径\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": " 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "filepath.Match"
				},
				{
					"Type": "NodeText",
					"Data": "规则，如："
				}
			]
		},
		{
			"ID": "20210708010146-mwc983g",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-mwc983g"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "COPY hom* /mydir/\nCOPY hom?.txt /mydir/\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-tf8qtcq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-tf8qtcq"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;目标路径\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": " 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "WORKDIR"
				},
				{
					"Type": "NodeText",
					"Data": " 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。"
				}
			]
		},
		{
			"ID": "20210708010146-q2hxd0a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-q2hxd0a"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此外，还需要注意一点，使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "COPY"
				},
				{
					"Type": "NodeText",
					"Data": " 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。"
				}
			]
		},
		{
			"ID": "20210708010146-3iiossd",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20210708010146-3iiossd"
			}
		},
		{
			"ID": "20210708010146-smczdmo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-smczdmo"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "修改默认 Tomcat 容器中的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "index.jsp"
				}
			]
		},
		{
			"ID": "20210708010146-c4e3bic",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-c4e3bic"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "COPY index.jsp /usr/local/tomcat/webapps/ROOT\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-im0fbfs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-im0fbfs"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "index.jsp"
				},
				{
					"Type": "NodeText",
					"Data": " 必须在 Dockerfile 文件所属的上下文中，后面的路径就是容器中的地址，和宿主机无关"
				}
			]
		},
		{
			"ID": "20210708010146-nfwxgv3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-nfwxgv3"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "ADD（自动解压缩）"
				}
			]
		},
		{
			"ID": "20210708010146-4tt9ybr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-4tt9ybr"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ADD"
				},
				{
					"Type": "NodeText",
					"Data": " 指令和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "COPY"
				},
				{
					"Type": "NodeText",
					"Data": " 的格式和性质基本一致。但是在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "COPY"
				},
				{
					"Type": "NodeText",
					"Data": " 基础上增加了一些功能。比如 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;源路径\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": " 可以是一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "URL"
				},
				{
					"Type": "NodeText",
					"Data": "，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;目标路径\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": " 去。下载后的文件权限自动设置为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "600"
				},
				{
					"Type": "NodeText",
					"Data": "，如果这并不是想要的权限，那么还需要增加额外的一层 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": " 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": " 指令进行解压缩。所以不如直接使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": " 指令，然后使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "wget"
				},
				{
					"Type": "NodeText",
					"Data": " 或者 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "curl"
				},
				{
					"Type": "NodeText",
					"Data": " 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。"
				}
			]
		},
		{
			"ID": "20210708010146-fub7w3i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-fub7w3i"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;源路径\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": " 为一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "tar"
				},
				{
					"Type": "NodeText",
					"Data": " 压缩文件的话，压缩格式为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "gzip"
				},
				{
					"Type": "NodeText",
					"Data": ", "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bzip2"
				},
				{
					"Type": "NodeText",
					"Data": " 以及 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "xz"
				},
				{
					"Type": "NodeText",
					"Data": " 的情况下，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ADD"
				},
				{
					"Type": "NodeText",
					"Data": " 指令将会自动解压缩这个压缩文件到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;目标路径\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": " 去。在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ubuntu"
				},
				{
					"Type": "NodeText",
					"Data": " 中："
				}
			]
		},
		{
			"ID": "20210708010146-ehjj3pj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-ehjj3pj"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "FROM scratch\nADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-037cd4j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-037cd4j"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ADD"
				},
				{
					"Type": "NodeText",
					"Data": " 命令了。在 Docker 官方的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile 最佳实践文档"
				},
				{
					"Type": "NodeText",
					"Data": " 中要求，尽可能的使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "COPY"
				},
				{
					"Type": "NodeText",
					"Data": "，因为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "COPY"
				},
				{
					"Type": "NodeText",
					"Data": " 的语义很明确，就是复制文件而已，而 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ADD"
				},
				{
					"Type": "NodeText",
					"Data": " 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ADD"
				},
				{
					"Type": "NodeText",
					"Data": " 的场合，就是所提及的需要自动解压缩的场合。另外需要注意的是，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ADD"
				},
				{
					"Type": "NodeText",
					"Data": " 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。因此在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "COPY"
				},
				{
					"Type": "NodeText",
					"Data": " 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ADD"
				},
				{
					"Type": "NodeText",
					"Data": " 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "COPY"
				},
				{
					"Type": "NodeText",
					"Data": " 指令，仅在需要自动解压缩的场合使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ADD"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210708010146-ifxyaji",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-ifxyaji"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "CMD 脚本"
				}
			]
		},
		{
			"ID": "20210708010146-k9xx73s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-k9xx73s"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 指令的格式和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": " 相似，也是两种格式："
				}
			]
		},
		{
			"ID": "20210708010146-bgtae97",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-bgtae97"
			},
			"Children": [
				{
					"ID": "20210708010146-g1ui1p4",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-g1ui1p4"
					},
					"Children": [
						{
							"ID": "20210708010146-p8qif7y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-p8qif7y"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "shell"
								},
								{
									"Type": "NodeText",
									"Data": " 格式："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "CMD \u0026lt;命令\u0026gt;"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-w528pn6",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-w528pn6"
					},
					"Children": [
						{
							"ID": "20210708010146-xvonj46",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-xvonj46"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "exec"
								},
								{
									"Type": "NodeText",
									"Data": " 格式："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "CMD [\u0026quot;可执行文件\u0026quot;, \u0026quot;参数1\u0026quot;, \u0026quot;参数2\u0026quot;...]"
								}
							]
						},
						{
							"ID": "20210708010146-3y2q0sm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-3y2q0sm"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "参数列表格式："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "CMD [\u0026quot;参数1\u0026quot;, \u0026quot;参数2\u0026quot;...]"
								},
								{
									"Type": "NodeText",
									"Data": "。在指定了 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ENTRYPOINT"
								},
								{
									"Type": "NodeText",
									"Data": " 指令后，用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "CMD"
								},
								{
									"Type": "NodeText",
									"Data": " 指定具体的参数。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-1gdpe32",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-1gdpe32"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 指令就是用于指定默认的容器主进程的启动命令的。"
				}
			]
		},
		{
			"ID": "20210708010146-kyjmwxq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-kyjmwxq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ubuntu"
				},
				{
					"Type": "NodeText",
					"Data": " 镜像默认的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/bin/bash"
				},
				{
					"Type": "NodeText",
					"Data": "，如果我们直接 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker run -it ubuntu"
				},
				{
					"Type": "NodeText",
					"Data": " 的话，会直接进入 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bash"
				},
				{
					"Type": "NodeText",
					"Data": "。我们也可以在运行时指定运行别的命令，如 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker run -it ubuntu cat /etc/os-release"
				},
				{
					"Type": "NodeText",
					"Data": "。这就是用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "cat /etc/os-release"
				},
				{
					"Type": "NodeText",
					"Data": " 命令替换了默认的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/bin/bash"
				},
				{
					"Type": "NodeText",
					"Data": " 命令了，输出了系统版本信息。"
				}
			]
		},
		{
			"ID": "20210708010146-9zv80qs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-9zv80qs"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在指令格式上，一般"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "推荐"
				},
				{
					"Type": "NodeText",
					"Data": "使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "exec"
				},
				{
					"Type": "NodeText",
					"Data": " 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026quot;"
				},
				{
					"Type": "NodeText",
					"Data": "，而不要使用单引号。如果使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "shell"
				},
				{
					"Type": "NodeText",
					"Data": " 格式的话，实际的命令会被包装为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "sh -c"
				},
				{
					"Type": "NodeText",
					"Data": " 的参数的形式进行执行。比如："
				}
			]
		},
		{
			"ID": "20210708010146-xafp7fz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-xafp7fz"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CMD echo $HOME\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-jdcaku7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-jdcaku7"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在实际执行中，会将其变更为："
				}
			]
		},
		{
			"ID": "20210708010146-waec489",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-waec489"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CMD [ \"sh\", \"-c\", \"echo $HOME\" ]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-bicdnby",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-bicdnby"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。"
				}
			]
		},
		{
			"ID": "20210708010146-kzofngr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-kzofngr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。"
				}
			]
		},
		{
			"ID": "20210708010146-ym5itxj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-ym5itxj"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一些初学者将 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 写为："
				}
			]
		},
		{
			"ID": "20210708010146-4qaq059",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-4qaq059"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CMD service nginx start\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-zhc0hqi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-zhc0hqi"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后发现容器执行后就立即退出了。甚至在容器内去使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "systemctl"
				},
				{
					"Type": "NodeText",
					"Data": " 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。"
				}
			]
		},
		{
			"ID": "20210708010146-k2uuioo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-k2uuioo"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。而使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "service nginx start"
				},
				{
					"Type": "NodeText",
					"Data": " 命令，则是希望 upstart 来以后台守护进程形式启动 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "nginx"
				},
				{
					"Type": "NodeText",
					"Data": " 服务。而刚才说了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD service nginx start"
				},
				{
					"Type": "NodeText",
					"Data": " 会被理解为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD [ \u0026quot;sh\u0026quot;, \u0026quot;-c\u0026quot;, \u0026quot;service nginx start\u0026quot;]"
				},
				{
					"Type": "NodeText",
					"Data": "，因此主进程实际上是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "sh"
				},
				{
					"Type": "NodeText",
					"Data": "。那么当 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "service nginx start"
				},
				{
					"Type": "NodeText",
					"Data": " 命令结束后，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "sh"
				},
				{
					"Type": "NodeText",
					"Data": " 也就结束了，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "sh"
				},
				{
					"Type": "NodeText",
					"Data": " 作为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "主进程退出了，自然就会令容器退出"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210708010146-74w22fa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-74w22fa"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "正确的做法是直接执行 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "nginx"
				},
				{
					"Type": "NodeText",
					"Data": " 可执行文件，并且要求以前台形式运行。比如："
				}
			]
		},
		{
			"ID": "20210708010146-otk2812",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-otk2812"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-yh0vbcu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-yh0vbcu"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "ENTRYPOINT 脚本"
				}
			]
		},
		{
			"ID": "20210708010146-di9pvb7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-di9pvb7"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ENTRYPOINT"
				},
				{
					"Type": "NodeText",
					"Data": " 的格式和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 指令格式一样，分为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "exec"
				},
				{
					"Type": "NodeText",
					"Data": " 格式和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "shell"
				},
				{
					"Type": "NodeText",
					"Data": " 格式。"
				}
			]
		},
		{
			"ID": "20210708010146-h6sqizs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-h6sqizs"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ENTRYPOINT"
				},
				{
					"Type": "NodeText",
					"Data": " 的目的和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 一样，都是在指定容器启动程序及参数。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ENTRYPOINT"
				},
				{
					"Type": "NodeText",
					"Data": " 在运行时也可以替代，不过比 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 要略显繁琐，需要通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker run"
				},
				{
					"Type": "NodeText",
					"Data": " 的参数 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "--entrypoint"
				},
				{
					"Type": "NodeText",
					"Data": " 来指定。当指定了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ENTRYPOINT"
				},
				{
					"Type": "NodeText",
					"Data": " 后，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 的含义就发生了改变，不再是直接的运行其命令，而是将 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 的内容作为参数传给 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ENTRYPOINT"
				},
				{
					"Type": "NodeText",
					"Data": " 指令，换句话说实际执行时，将变为："
				}
			]
		},
		{
			"ID": "20210708010146-qbh09th",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-qbh09th"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cENTRYPOINT\u003e \"\u003cCMD\u003e\"\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-6ow1rrn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-6ow1rrn"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那么有了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 后，为什么还要有 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ENTRYPOINT"
				},
				{
					"Type": "NodeText",
					"Data": " 呢？这种 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": " \u0026lt;ENTRYPOINT\u0026gt; \u0026quot;\u0026lt;CMD\u0026gt;\u0026quot;"
				},
				{
					"Type": "NodeText",
					"Data": " 有什么好处么？让我们来看几个场景。"
				}
			]
		},
		{
			"ID": "20210708010146-wbhboi7",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210708010146-wbhboi7"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "场景一：让镜像变成像命令一样使用"
				}
			]
		},
		{
			"ID": "20210708010146-mm6l1o0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-mm6l1o0"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 来实现："
				}
			]
		},
		{
			"ID": "20210708010146-k5jiplc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-k5jiplc"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "FROM ubuntu:16.04\nRUN apt-get update \\\n    \u0026\u0026 apt-get install -y curl \\\n    \u0026\u0026 rm -rf /var/lib/apt/lists/*\nCMD [ \"curl\", \"-s\", \"http://ip.cn\" ]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-bu0pmaa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-bu0pmaa"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假如我们使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker build -t myip ."
				},
				{
					"Type": "NodeText",
					"Data": " 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行："
				}
			]
		},
		{
			"ID": "20210708010146-dnag4h2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-dnag4h2"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "docker run myip\n当前 IP：61.148.226.66 来自：北京市 联通\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-lqgvf80",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-lqgvf80"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 中可以看到实质的命令是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "curl"
				},
				{
					"Type": "NodeText",
					"Data": "，那么如果我们希望显示 HTTP 头信息，就需要加上 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-i"
				},
				{
					"Type": "NodeText",
					"Data": " 参数。那么我们可以直接加 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-i"
				},
				{
					"Type": "NodeText",
					"Data": " 参数给 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker run myip"
				},
				{
					"Type": "NodeText",
					"Data": " 么？"
				}
			]
		},
		{
			"ID": "20210708010146-xkdtle2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-xkdtle2"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "docker run myip -i\ndocker: Error response from daemon: invalid header field value \"oci runtime error: container_linux.go:247: starting container process caused \\\"exec: \\\\\\\"-i\\\\\\\": executable file not found in $PATH\\\"\\n\".\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-k68ilff",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-k68ilff"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以看到可执行文件找不到的报错，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "executable file not found"
				},
				{
					"Type": "NodeText",
					"Data": "。之前我们说过，跟在镜像名后面的是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "command"
				},
				{
					"Type": "NodeText",
					"Data": "，运行时会替换 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 的默认值。因此这里的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-i"
				},
				{
					"Type": "NodeText",
					"Data": " 替换了原来的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": "，而不是添加在原来的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "curl -s http://ip.cn"
				},
				{
					"Type": "NodeText",
					"Data": " 后面。而 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-i"
				},
				{
					"Type": "NodeText",
					"Data": " 根本不是命令，所以自然找不到。"
				}
			]
		},
		{
			"ID": "20210708010146-g6jzftv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-g6jzftv"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那么如果我们希望加入 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-i"
				},
				{
					"Type": "NodeText",
					"Data": " 这参数，我们就必须重新完整的输入这个命令："
				}
			]
		},
		{
			"ID": "20210708010146-gh3ol9c",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-gh3ol9c"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "docker run myip curl -s http://ip.cn -i\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-s13gfeu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-s13gfeu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这显然不是很好的解决方案，而使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ENTRYPOINT"
				},
				{
					"Type": "NodeText",
					"Data": " 就可以解决这个问题。现在我们重新用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ENTRYPOINT"
				},
				{
					"Type": "NodeText",
					"Data": " 来实现这个镜像："
				}
			]
		},
		{
			"ID": "20210708010146-ia546nw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-ia546nw"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "FROM ubuntu:16.04\nRUN apt-get update \\\n    \u0026\u0026 apt-get install -y curl \\\n    \u0026\u0026 rm -rf /var/lib/apt/lists/*\nENTRYPOINT [ \"curl\", \"-s\", \"http://ip.cn\" ]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-auwbgw1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-auwbgw1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这次我们再来尝试直接使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker run myip -i"
				},
				{
					"Type": "NodeText",
					"Data": "："
				}
			]
		},
		{
			"ID": "20210708010146-p9a7e9x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-p9a7e9x"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "docker run myip\n当前 IP：61.148.226.66 来自：北京市 联通\ndocker run myip -i\nHTTP/1.1 200 OK\nServer: nginx/1.8.0\nDate: Tue, 22 Nov 2016 05:12:40 GMT\nContent-Type: text/html; charset=UTF-8\nVary: Accept-Encoding\nX-Powered-By: PHP/5.6.24-1~dotdeb+7.1\nX-Cache: MISS from cache-2\nX-Cache-Lookup: MISS from cache-2:80\nX-Cache: MISS from proxy-2_6\nTransfer-Encoding: chunked\nVia: 1.1 cache-2:80, 1.1 proxy-2_6:8006\nConnection: keep-alive\n当前 IP：61.148.226.66 来自：北京市 联通\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-o3m5oc9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-o3m5oc9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到，这次成功了。这是因为当存在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ENTRYPOINT"
				},
				{
					"Type": "NodeText",
					"Data": " 后，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 的内容将会作为参数传给 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ENTRYPOINT"
				},
				{
					"Type": "NodeText",
					"Data": "，而这里 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-i"
				},
				{
					"Type": "NodeText",
					"Data": " 就是新的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": "，因此会作为参数传给 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "curl"
				},
				{
					"Type": "NodeText",
					"Data": "，从而达到了我们预期的效果。"
				}
			]
		},
		{
			"ID": "20210708010146-gq8n5hu",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210708010146-gq8n5hu"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "场景二：应用运行前的准备工作"
				}
			]
		},
		{
			"ID": "20210708010146-2lcytn7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-2lcytn7"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。"
				}
			]
		},
		{
			"ID": "20210708010146-q53977h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-q53977h"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "mysql"
				},
				{
					"Type": "NodeText",
					"Data": " 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。"
				}
			]
		},
		{
			"ID": "20210708010146-2wwaskp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-2wwaskp"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此外，可能希望避免使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "root"
				},
				{
					"Type": "NodeText",
					"Data": " 用户去启动服务，从而提高安全性，而在启动服务前还需要以 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "root"
				},
				{
					"Type": "NodeText",
					"Data": " 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "root"
				},
				{
					"Type": "NodeText",
					"Data": " 身份执行，方便调试等。"
				}
			]
		},
		{
			"ID": "20210708010146-ddr6d53",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-ddr6d53"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这些准备工作是和容器 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 无关的，无论 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ENTRYPOINT"
				},
				{
					"Type": "NodeText",
					"Data": " 中去执行，而这个脚本会将接到的参数（也就是 ``）作为命令，在脚本最后执行。比如官方镜像 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "redis"
				},
				{
					"Type": "NodeText",
					"Data": " 中就是这么做的："
				}
			]
		},
		{
			"ID": "20210708010146-gkxugg4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-gkxugg4"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "FROM alpine:3.4\nRUN addgroup -S redis \u0026\u0026 adduser -S -G redis redis\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 6379\nCMD [ \"redis-server\" ]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-ip86ull",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-ip86ull"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ENTRYPOINT"
				},
				{
					"Type": "NodeText",
					"Data": " 为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker-entrypoint.sh"
				},
				{
					"Type": "NodeText",
					"Data": " 脚本。"
				}
			]
		},
		{
			"ID": "20210708010146-atkq6dk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c2g=",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-atkq6dk"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2g="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#!/bin/sh\n# allow the container to be started with `--user`\nif [ \"$1\" = 'redis-server' -a \"$(id -u)\" = '0' ]; then\n    chown -R redis .\n    exec su-exec redis \"$0\" \"$@\"\nfi\nexec \"$@\"\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-z4r2zot",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-z4r2zot"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "该脚本的内容就是根据 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CMD"
				},
				{
					"Type": "NodeText",
					"Data": " 的内容来判断，如果是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "redis-server"
				},
				{
					"Type": "NodeText",
					"Data": " 的话，则切换到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "redis"
				},
				{
					"Type": "NodeText",
					"Data": " 用户身份启动服务器，否则依旧使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "root"
				},
				{
					"Type": "NodeText",
					"Data": " 身份执行。比如："
				}
			]
		},
		{
			"ID": "20210708010146-bqfus47",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-bqfus47"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "docker run -it redis id\nuid=0(root) gid=0(root) groups=0(root)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-dynoyjl",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-dynoyjl"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "ENV"
				}
			]
		},
		{
			"ID": "20210708010146-2ku87i2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-2ku87i2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "格式有两种："
				}
			]
		},
		{
			"ID": "20210708010146-c1l4r3d",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-c1l4r3d"
			},
			"Children": [
				{
					"ID": "20210708010146-rgihpu6",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-rgihpu6"
					},
					"Children": [
						{
							"ID": "20210708010146-mtyn3ft",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-mtyn3ft"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ENV "
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-tb5jzjr",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-tb5jzjr"
					},
					"Children": [
						{
							"ID": "20210708010146-at2ker1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-at2ker1"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ENV = =..."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-5m4n2sj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-5m4n2sj"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": "，还是运行时的应用，都可以直接使用这里定义的环境变量。"
				}
			]
		},
		{
			"ID": "20210708010146-wmw4u8q",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-wmw4u8q"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "ENV VERSION=1.0 DEBUG=on \\\n    NAME=\"Happy Feet\"\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-9xj9os6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-9xj9os6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。"
				}
			]
		},
		{
			"ID": "20210708010146-zfa6sdg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-zfa6sdg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "node"
				},
				{
					"Type": "NodeText",
					"Data": " 镜像 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 中，就有类似这样的代码："
				}
			]
		},
		{
			"ID": "20210708010146-07gkhp0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-07gkhp0"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "ENV NODE_VERSION 7.2.0\nRUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \\\n  \u0026\u0026 curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n  \u0026\u0026 gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n  \u0026\u0026 grep \" node-v$NODE_VERSION-linux-x64.tar.xz\\$\" SHASUMS256.txt | sha256sum -c - \\\n  \u0026\u0026 tar -xJf \"node-v$NODE_VERSION-linux-x64.tar.xz\" -C /usr/local --strip-components=1 \\\n  \u0026\u0026 rm \"node-v$NODE_VERSION-linux-x64.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n  \u0026\u0026 ln -s /usr/local/bin/node /usr/local/bin/nodejs\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-jacuafu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-jacuafu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在这里先定义了环境变量 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "NODE_VERSION"
				},
				{
					"Type": "NodeText",
					"Data": "，其后的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": " 这层里，多次使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "$NODE_VERSION"
				},
				{
					"Type": "NodeText",
					"Data": " 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "7.2.0"
				},
				{
					"Type": "NodeText",
					"Data": " 即可，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 构建维护变得更轻松了。"
				}
			]
		},
		{
			"ID": "20210708010146-1ao3cfz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-1ao3cfz"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下列指令可以支持环境变量展开： "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ADD"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "COPY"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ENV"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "EXPOSE"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LABEL"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "USER"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "WORKDIR"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "VOLUME"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "STOPSIGNAL"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ONBUILD"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210708010146-02ja7f4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-02ja7f4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 制作更多的镜像，只需使用不同的环境变量即可。"
				}
			]
		},
		{
			"ID": "20210708010146-zy0d1vo",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-zy0d1vo"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "VOLUME"
				}
			]
		},
		{
			"ID": "20210708010146-yti10n3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-yti10n3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "格式为："
				}
			]
		},
		{
			"ID": "20210708010146-8fn1tgc",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708010146-8fn1tgc"
			},
			"Children": [
				{
					"ID": "20210708010146-mi3iaw8",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-mi3iaw8"
					},
					"Children": [
						{
							"ID": "20210708010146-m2uztsx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-m2uztsx"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "VOLUME [\u0026quot;\u0026lt;路径1\u0026gt;\u0026quot;, \u0026quot;\u0026lt;路径2\u0026gt;\u0026quot;...]"
								}
							]
						}
					]
				},
				{
					"ID": "20210708010146-er7vtiw",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708010146-er7vtiw"
					},
					"Children": [
						{
							"ID": "20210708010146-ut2f1us",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708010146-ut2f1us"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "VOLUME \u0026lt;路径\u0026gt;"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708010146-4twqpbs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-4twqpbs"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。"
				}
			]
		},
		{
			"ID": "20210708010146-hoyo59r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-hoyo59r"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "VOLUME /data\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-xt8jdkl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-xt8jdkl"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/data"
				},
				{
					"Type": "NodeText",
					"Data": " 目录就会在运行时自动挂载为匿名卷，任何向 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/data"
				},
				{
					"Type": "NodeText",
					"Data": " 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如："
				}
			]
		},
		{
			"ID": "20210708010146-6mmkpqw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-6mmkpqw"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "docker run -d -v mydata:/data xxxx\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-c7wx3bf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-c7wx3bf"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在这行命令中，就使用了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "mydata"
				},
				{
					"Type": "NodeText",
					"Data": " 这个命名卷挂载到了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/data"
				},
				{
					"Type": "NodeText",
					"Data": " 这个位置，替代了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 中定义的匿名卷的挂载配置。"
				}
			]
		},
		{
			"ID": "20210708010146-9hhk4ef",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-9hhk4ef"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "EXPOSE 声明端口"
				}
			]
		},
		{
			"ID": "20210708010146-8usnyqx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-8usnyqx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "格式为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "EXPOSE \u0026lt;端口1\u0026gt; [\u0026lt;端口2\u0026gt;...]"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210708010146-0pjxt6h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-0pjxt6h"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "EXPOSE"
				},
				{
					"Type": "NodeText",
					"Data": " 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker run -P"
				},
				{
					"Type": "NodeText",
					"Data": " 时，会自动随机映射 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "EXPOSE"
				},
				{
					"Type": "NodeText",
					"Data": " 的端口。"
				}
			]
		},
		{
			"ID": "20210708010146-8qwdcsu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-8qwdcsu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此外，在早期 Docker 版本中还有一个特殊的用处。以前所有容器都运行于默认桥接网络中，因此所有容器互相之间都可以直接访问，这样存在一定的安全性问题。于是有了一个 Docker 引擎参数 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "--icc=false"
				},
				{
					"Type": "NodeText",
					"Data": "，当指定该参数后，容器间将默认无法互访，除非互相间使用了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "--links"
				},
				{
					"Type": "NodeText",
					"Data": " 参数的容器才可以互通，并且只有镜像中 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "EXPOSE"
				},
				{
					"Type": "NodeText",
					"Data": " 所声明的端口才可以被访问。这个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "--icc=false"
				},
				{
					"Type": "NodeText",
					"Data": " 的用法，在引入了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker network"
				},
				{
					"Type": "NodeText",
					"Data": " 后已经基本不用了，通过自定义网络可以很轻松的实现容器间的互联与隔离。"
				}
			]
		},
		{
			"ID": "20210708010146-cdedejl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-cdedejl"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要将 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "EXPOSE"
				},
				{
					"Type": "NodeText",
					"Data": " 和在运行时使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-p \u0026lt;宿主端口\u0026gt;:\u0026lt;容器端口\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": " 区分开来。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-p"
				},
				{
					"Type": "NodeText",
					"Data": "，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "EXPOSE"
				},
				{
					"Type": "NodeText",
					"Data": " 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。"
				}
			]
		},
		{
			"ID": "20210708010146-xilo7u1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-xilo7u1"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "WORKDIR"
				}
			]
		},
		{
			"ID": "20210708010146-yfrf0k4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-yfrf0k4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "格式为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "WORKDIR \u0026lt;工作目录路径\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210708010146-nft6vvj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-nft6vvj"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "WORKDIR"
				},
				{
					"Type": "NodeText",
					"Data": " 指令可以来"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "指定工作目录"
				},
				{
					"Type": "NodeText",
					"Data": "（或者称为当前目录）类似"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "cd"
				},
				{
					"Type": "NodeText",
					"Data": "，使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "exec"
				},
				{
					"Type": "NodeText",
					"Data": "进入容器后的目录。以后各层的当前目录就被改为指定的目录，如该目录不存在，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "WORKDIR"
				},
				{
					"Type": "NodeText",
					"Data": " 会帮你建立目录。之前提到一些初学者常犯的错误是把 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误："
				}
			]
		},
		{
			"ID": "20210708010146-hrle512",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-hrle512"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "RUN cd /app\nRUN echo \"hello\" \u003e world.txt\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-503clfp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-503clfp"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果将这个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 进行构建镜像运行后，会发现找不到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/app/world.txt"
				},
				{
					"Type": "NodeText",
					"Data": " 文件，或者其内容不是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "hello"
				},
				{
					"Type": "NodeText",
					"Data": "。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 中，这两行 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": " 命令的执行环境根本不同，是两个完全不同的容器。这就是对 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 构建分层存储的概念不了解所导致的错误。"
				}
			]
		},
		{
			"ID": "20210708010146-wcv8vq3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-wcv8vq3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之前说过每一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": " 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN cd /app"
				},
				{
					"Type": "NodeText",
					"Data": " 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。"
				}
			]
		},
		{
			"ID": "20210708010146-ih0n40b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-ih0n40b"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此如果需要改变以后各层的工作目录的位置，那么应该使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "WORKDIR"
				},
				{
					"Type": "NodeText",
					"Data": " 指令。"
				}
			]
		},
		{
			"ID": "20210708010146-7z224ru",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-7z224ru"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "构建镜像"
				}
			]
		},
		{
			"ID": "20210708010146-ovo0w16",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-ovo0w16"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 文件所在目录执行："
				}
			]
		},
		{
			"ID": "20210708010146-m87c7y9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-m87c7y9"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "docker build [选项] \u003c上下文路径/URL/-\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-fdd3b6d",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-fdd3b6d"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "root@VM-0-3-ubuntu:/home/ubuntu/Documents/mynginx# docker build -t mynginx:v1 .\nSending build context to Docker daemon  2.048kB\nStep 1/2 : FROM nginx:latest\n ---\u003e 231d40e811cd\nStep 2/2 : RUN echo '\u003ch1\u003eHello, Docker!\u003c/h1\u003e' \u003e /usr/share/nginx/html/index.html\n ---\u003e Using cache\n ---\u003e 7a882127e80e\nSuccessfully built 7a882127e80e\nSuccessfully tagged mynginx:v1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-ce7obfj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-ce7obfj"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时我们构建了一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "mynginx"
				},
				{
					"Type": "NodeText",
					"Data": " 版本为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "v1"
				},
				{
					"Type": "NodeText",
					"Data": "的镜像"
				}
			]
		},
		{
			"ID": "20210708010146-ysgmv5o",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708010146-ysgmv5o"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "镜像构建上下文"
				}
			]
		},
		{
			"ID": "20210708010146-6vaend2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-6vaend2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果注意，会看到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker build"
				},
				{
					"Type": "NodeText",
					"Data": " 命令最后有一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "."
				},
				{
					"Type": "NodeText",
					"Data": "，表示当前目录，而 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 就在当前目录，因此不少初学者以为这个路径是在指定 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "上下文路径"
				},
				{
					"Type": "NodeText",
					"Data": "。那么什么是上下文呢？"
				}
			]
		},
		{
			"ID": "20210708010146-fqolv6z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-fqolv6z"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先我们要理解 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker build"
				},
				{
					"Type": "NodeText",
					"Data": " 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Docker Remote API"
				},
				{
					"Type": "NodeText",
					"Data": "，而如 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker"
				},
				{
					"Type": "NodeText",
					"Data": " 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker"
				},
				{
					"Type": "NodeText",
					"Data": " 功能，但实际上一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。"
				}
			]
		},
		{
			"ID": "20210708010146-eondmh5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-eondmh5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当我们进行镜像构建的时候，并非所有定制都会通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RUN"
				},
				{
					"Type": "NodeText",
					"Data": " 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "COPY"
				},
				{
					"Type": "NodeText",
					"Data": " 指令、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ADD"
				},
				{
					"Type": "NodeText",
					"Data": " 指令等。而 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker build"
				},
				{
					"Type": "NodeText",
					"Data": " 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker build"
				},
				{
					"Type": "NodeText",
					"Data": " 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。"
				}
			]
		},
		{
			"ID": "20210708010146-fy6aj78",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-fy6aj78"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 中这么写："
				}
			]
		},
		{
			"ID": "20210708010146-x1n0cc6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "ZG9ja2VyZmlsZQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-x1n0cc6"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "ZG9ja2VyZmlsZQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "COPY ./package.json /app/\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-utheei9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-utheei9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这并不是要复制执行 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker build"
				},
				{
					"Type": "NodeText",
					"Data": " 命令所在的目录下的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "package.json"
				},
				{
					"Type": "NodeText",
					"Data": "，也不是复制 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 所在目录下的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "package.json"
				},
				{
					"Type": "NodeText",
					"Data": "，而是复制 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "上下文（context）"
				},
				{
					"Type": "NodeText",
					"Data": " 目录下的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "package.json"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210708010146-2vk76fx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-2vk76fx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "COPY"
				},
				{
					"Type": "NodeText",
					"Data": " 这类指令中的源文件的路径都是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em",
					"TextMarkTextContent": "相对路径"
				},
				{
					"Type": "NodeText",
					"Data": "。这也是初学者经常会问的为什么 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "COPY ../package.json /app"
				},
				{
					"Type": "NodeText",
					"Data": " 或者 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "COPY /opt/xxxx /app"
				},
				{
					"Type": "NodeText",
					"Data": " 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。"
				}
			]
		},
		{
			"ID": "20210708010146-5aryw79",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-5aryw79"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在就可以理解刚才的命令 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker build -t mynginx:v1 ."
				},
				{
					"Type": "NodeText",
					"Data": " 中的这个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "."
				},
				{
					"Type": "NodeText",
					"Data": "，实际上是在指定上下文的目录，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker build"
				},
				{
					"Type": "NodeText",
					"Data": " 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。"
				}
			]
		},
		{
			"ID": "20210708010146-lt6we5z",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20210708010146-lt6we5z"
			}
		},
		{
			"ID": "20210708010146-ww2aujc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-ww2aujc"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果观察 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker build"
				},
				{
					"Type": "NodeText",
					"Data": " 输出，我们其实已经看到了这个发送上下文的过程："
				}
			]
		},
		{
			"ID": "20210708010146-bb2xhal",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708010146-bb2xhal"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Sending build context to Docker daemon  2.048kB\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708010146-gvqp00w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-gvqp00w"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "COPY /opt/xxxx /app"
				},
				{
					"Type": "NodeText",
					"Data": " 不工作后，于是干脆将 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 放到了硬盘根目录去构建，结果发现 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker build"
				},
				{
					"Type": "NodeText",
					"Data": " 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "docker build"
				},
				{
					"Type": "NodeText",
					"Data": " 打包整个硬盘，这显然是使用错误。"
				}
			]
		},
		{
			"ID": "20210708010146-006x9xb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-006x9xb"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一般来说，应该会将 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ".gitignore"
				},
				{
					"Type": "NodeText",
					"Data": " 一样的语法写一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ".dockerignore"
				},
				{
					"Type": "NodeText",
					"Data": "，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。"
				}
			]
		},
		{
			"ID": "20210708010146-tfvwnd6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-tfvwnd6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那么为什么会有人误以为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "."
				},
				{
					"Type": "NodeText",
					"Data": " 是指定 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 所在目录呢？这是因为在默认情况下，如果不额外指定 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 的话，会将上下文目录下的名为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 的文件作为 Dockerfile。"
				}
			]
		},
		{
			"ID": "20210708010146-ou2ku6g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-ou2ku6g"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这只是默认行为，实际上 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": " 的文件名并不要求必须为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": "，而且并不要求必须位于上下文目录中，比如可以用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-f ../Dockerfile.php"
				},
				{
					"Type": "NodeText",
					"Data": " 参数指定某个文件作为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210708010146-520najg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708010146-520najg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当然，一般大家习惯性的会使用默认的文件名 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Dockerfile"
				},
				{
					"Type": "NodeText",
					"Data": "，以及会将其置于镜像构建上下文目录中。"
				}
			]
		}
	]
}