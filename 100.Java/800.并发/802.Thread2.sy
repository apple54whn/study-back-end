{
	"ID": "20210707224540-7k2zfq6",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20210707224540-7k2zfq6",
		"type": "doc"
	},
	"Children": [
		{
			"ID": "20210707224540-exkfhhk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224540-exkfhhk"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "1 引入"
				}
			]
		},
		{
			"ID": "20210707224540-02p8unm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-02p8unm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "并发与并行"
				}
			]
		},
		{
			"ID": "20210707224540-vq20k9g",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-vq20k9g"
			},
			"Children": [
				{
					"ID": "20210707224540-cp80t4v",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-cp80t4v"
					},
					"Children": [
						{
							"ID": "20210707224540-qwh1ssw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-qwh1ssw"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "并发"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：指两个或多个事件在"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "同一个时间段内"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "发生，"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "逻辑上"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "同时发生"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-wribg22",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-wribg22"
					},
					"Children": [
						{
							"ID": "20210707224540-0uow20l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-0uow20l"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "并行"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：指两个或多个事件在"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "同一时刻"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "发生（同时发生），"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "物理上"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "同时发生"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-upeyafa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-upeyafa"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "进程与线程"
				}
			]
		},
		{
			"ID": "20210707224540-pxiqwa4",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-pxiqwa4"
			},
			"Children": [
				{
					"ID": "20210707224540-d22rt9l",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-d22rt9l"
					},
					"Children": [
						{
							"ID": "20210707224540-u047up2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-u047up2"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "进程"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：是"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "程序的一次执行过程"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，是系统进行"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "资源分配"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "和"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "处理机调度的基本单位"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "每个进程都有一个独立的内存空间"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，一个应用程序多次运行对应多个进程；系统运行一个程序即是一个进程从创建、运行到消亡的过程。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-6quw8g3",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-6quw8g3"
					},
					"Children": [
						{
							"ID": "20210707224540-ers7n1y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-ers7n1y"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "线程"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "线程是进程中的一个执行路径/单元"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，负责当前进程中程序的执行，一个进程中至少有一个线程。"
								}
							]
						},
						{
							"ID": "20210707224540-znjqv70",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-znjqv70"
							},
							"Children": [
								{
									"ID": "20210707224540-wnn5512",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-wnn5512"
									},
									"Children": [
										{
											"ID": "20210707224540-w2n7bow",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-w2n7bow"
											},
											"Children": [
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "多线程"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "："
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "一个进程中有多个线程"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "。"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "提高程序运行效率、CPU 使用率"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "；线程太多效率降低。"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-erfirtj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-erfirtj"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程调度模型"
				}
			]
		},
		{
			"ID": "20210707224540-a6llq5y",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Tight": true,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 3,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210707224540-a6llq5y"
			},
			"Children": [
				{
					"ID": "20210707224540-9cnpt4v",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210707224540-9cnpt4v"
					},
					"Children": [
						{
							"ID": "20210707224540-8znnosj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-8znnosj"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "分时调度模型"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间片"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-mpdju5j",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210707224540-mpdju5j"
					},
					"Children": [
						{
							"ID": "20210707224540-tbjjmz0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-tbjjmz0"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "抢占式调度模型"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的 CPU 时间片相对多一些（Java 使用）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-ffzrzez",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224540-ffzrzez"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "2 多线程原理及实现"
				}
			]
		},
		{
			"ID": "20210707224540-kvcd1f5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-kvcd1f5"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "2.1 多线程原理"
				}
			]
		},
		{
			"ID": "20210707224540-pau5yih",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-pau5yih"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java 程序运行原理：Java 命令启动 JVM（相当于启动了一个进程），由该进程创建启动多个线程，至少两个线程可以分析出来。"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "执行 main()函数的主线程"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "负责垃圾回收的线程"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。"
				},
				{
					"Type": "NodeMark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker",
							"Data": "=="
						},
						{
							"Type": "NodeText",
							"Data": "多线程执行时，其实"
						},
						{
							"Type": "NodeStrong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "每一个执行线程"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "都有一片自己"
						},
						{
							"Type": "NodeStrong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "所属的栈内存"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "空间。进行"
						},
						{
							"Type": "NodeStrong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "方法的压栈和弹栈"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker",
							"Data": "=="
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-08mpcgl",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-08mpcgl"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "2.2 Thread（java.lang）"
				}
			]
		},
		{
			"ID": "20210707224540-773s3pi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-773s3pi"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker",
							"Data": "=="
						},
						{
							"Type": "NodeStrong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "构造方法"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker",
							"Data": "=="
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-tuzaom2",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-tuzaom2"
			},
			"Children": [
				{
					"ID": "20210707224540-os375jd",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-os375jd"
					},
					"Children": [
						{
							"ID": "20210707224540-gte69mm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-gte69mm"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeCodeSpan",
											"CodeMarkerLen": 1,
											"Children": [
												{
													"Type": "NodeCodeSpanOpenMarker",
													"Data": "`"
												},
												{
													"Type": "NodeCodeSpanContent",
													"Data": "Thread()"
												},
												{
													"Type": "NodeCodeSpanCloseMarker",
													"Data": "`"
												}
											]
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：分配一个新的线程对象。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-63zq6ou",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-63zq6ou"
					},
					"Children": [
						{
							"ID": "20210707224540-5zdce0o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-5zdce0o"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeCodeSpan",
											"CodeMarkerLen": 1,
											"Children": [
												{
													"Type": "NodeCodeSpanOpenMarker",
													"Data": "`"
												},
												{
													"Type": "NodeCodeSpanContent",
													"Data": "Thread(String name)"
												},
												{
													"Type": "NodeCodeSpanCloseMarker",
													"Data": "`"
												}
											]
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：分配一个指定名字的新的线程对象"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-l1t9uod",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-l1t9uod"
					},
					"Children": [
						{
							"ID": "20210707224540-wwvb0bt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-wwvb0bt"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeCodeSpan",
											"CodeMarkerLen": 1,
											"Children": [
												{
													"Type": "NodeCodeSpanOpenMarker",
													"Data": "`"
												},
												{
													"Type": "NodeCodeSpanContent",
													"Data": "Thread(Runnable target)"
												},
												{
													"Type": "NodeCodeSpanCloseMarker",
													"Data": "`"
												}
											]
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：分配一个带有指定目标新的线程对象。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-o60p1uj",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-o60p1uj"
					},
					"Children": [
						{
							"ID": "20210707224540-nt4n4tf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-nt4n4tf"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeCodeSpan",
											"CodeMarkerLen": 1,
											"Children": [
												{
													"Type": "NodeCodeSpanOpenMarker",
													"Data": "`"
												},
												{
													"Type": "NodeCodeSpanContent",
													"Data": "Thread(Runnable target,String name)"
												},
												{
													"Type": "NodeCodeSpanCloseMarker",
													"Data": "`"
												}
											]
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：分配一个带有指定目标新的线程对象并指定名字（常用）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-zhoommh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-zhoommh"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "常用方法"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-1fh0dbl",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-1fh0dbl"
			},
			"Children": [
				{
					"ID": "20210707224540-bib0dk0",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-bib0dk0"
					},
					"Children": [
						{
							"ID": "20210707224540-6z6mwki",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-6z6mwki"
							},
							"Children": [
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "void run()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "此线程要执行的任务在此处定义代码"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-ycm0gpn",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-ycm0gpn"
					},
					"Children": [
						{
							"ID": "20210707224540-8424gfn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-8424gfn"
							},
							"Children": [
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "void start()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "此线程开始执行"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "；Java 虚拟机调用此线程的 run 方法"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-it6du8j",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-it6du8j"
					},
					"Children": [
						{
							"ID": "20210707224540-obv58ly",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-obv58ly"
							},
							"Children": [
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "static Thread currentThread()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：返回对当前"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "正在执行的线程对象的引用"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-7714xgg",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-7714xgg"
					},
					"Children": [
						{
							"ID": "20210707224540-oiqpy85",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-oiqpy85"
							},
							"Children": [
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "String getName()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "获取当前线程名称"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-ap5lbo8",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-ap5lbo8"
					},
					"Children": [
						{
							"ID": "20210707224540-s4rw6tt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-s4rw6tt"
							},
							"Children": [
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "void setName()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "设置当前线程名称"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，或通过线程"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "类的有参构造设置"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-tgnv7jk",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-tgnv7jk"
					},
					"Children": [
						{
							"ID": "20210707224540-wi5my94",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-wi5my94"
							},
							"Children": [
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "static void sleep(long millis)"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：使"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "当前正在执行的线程"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "以指定的毫秒数"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "暂停"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-mc2n32j",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-mc2n32j"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "2.3 多线程的实现方式"
				}
			]
		},
		{
			"ID": "20210707224540-7h6qluy",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-7h6qluy"
			},
			"Children": [
				{
					"ID": "20210707224540-pg3bwcr",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-pg3bwcr"
					},
					"Children": [
						{
							"ID": "20210707224540-nfkhy6j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-nfkhy6j"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "继承 Thread 类"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20210707224540-d6q5zxg",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1,
								"Tight": true,
								"Start": 1,
								"Delimiter": 46,
								"Padding": 3,
								"Marker": "MQ==",
								"Num": 1
							},
							"Properties": {
								"id": "20210707224540-d6q5zxg"
							},
							"Children": [
								{
									"ID": "20210707224540-1oi62z4",
									"Type": "NodeListItem",
									"Data": "1",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 1,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "MQ==",
										"Num": 1
									},
									"Properties": {
										"id": "20210707224540-1oi62z4"
									},
									"Children": [
										{
											"ID": "20210707224540-cvcx2hp",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-cvcx2hp"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "继承 Thread 类。可以写无参和带参构造以便直接定义线程名称。"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-kudmljj",
									"Type": "NodeListItem",
									"Data": "2",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 2,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "Mg==",
										"Num": 2
									},
									"Properties": {
										"id": "20210707224540-kudmljj"
									},
									"Children": [
										{
											"ID": "20210707224540-r80655p",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-r80655p"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "@Override 重写 Thread 类的"
												},
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "run()"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "方法，将线程的任务代码封装到"
												},
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "run()"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "方法中"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-5vrfno7",
									"Type": "NodeListItem",
									"Data": "3",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 3,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "Mw==",
										"Num": 3
									},
									"Properties": {
										"id": "20210707224540-5vrfno7"
									},
									"Children": [
										{
											"ID": "20210707224540-9j4ah3h",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-9j4ah3h"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "创建 Thread 类的子类对象"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-wbr1iek",
									"Type": "NodeListItem",
									"Data": "4",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 4,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "NA==",
										"Num": 4
									},
									"Properties": {
										"id": "20210707224540-wbr1iek"
									},
									"Children": [
										{
											"ID": "20210707224540-tx04xcm",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-tx04xcm"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "调用"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeCodeSpan",
															"CodeMarkerLen": 1,
															"Children": [
																{
																	"Type": "NodeCodeSpanOpenMarker",
																	"Data": "`"
																},
																{
																	"Type": "NodeCodeSpanContent",
																	"Data": "start()"
																},
																{
																	"Type": "NodeCodeSpanCloseMarker",
																	"Data": "`"
																}
															]
														},
														{
															"Type": "NodeText",
															"Data": "开启线程"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "，JVM 调用该线程的"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeCodeSpan",
															"CodeMarkerLen": 1,
															"Children": [
																{
																	"Type": "NodeCodeSpanOpenMarker",
																	"Data": "`"
																},
																{
																	"Type": "NodeCodeSpanContent",
																	"Data": "run()"
																},
																{
																	"Type": "NodeCodeSpanCloseMarker",
																	"Data": "`"
																}
															]
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "方法执行（多次启动一个线程非法，即使执行完毕）"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-f25qk2c",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-f25qk2c"
					},
					"Children": [
						{
							"ID": "20210707224540-fdx7fux",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-fdx7fux"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "实现 Runnable 接口（常用）"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20210707224540-4vxyy99",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1,
								"Tight": true,
								"Start": 1,
								"Delimiter": 46,
								"Padding": 3,
								"Marker": "MQ==",
								"Num": 1
							},
							"Properties": {
								"id": "20210707224540-4vxyy99"
							},
							"Children": [
								{
									"ID": "20210707224540-egv30g0",
									"Type": "NodeListItem",
									"Data": "1",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 1,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "MQ==",
										"Num": 1
									},
									"Properties": {
										"id": "20210707224540-egv30g0"
									},
									"Children": [
										{
											"ID": "20210707224540-otsbfe1",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-otsbfe1"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "定义类实现 Runnable 接口"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-7jardi8",
									"Type": "NodeListItem",
									"Data": "2",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 2,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "Mg==",
										"Num": 2
									},
									"Properties": {
										"id": "20210707224540-7jardi8"
									},
									"Children": [
										{
											"ID": "20210707224540-r89v7ub",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-r89v7ub"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "@Override 重写接口中的"
												},
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "run()"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "方法，将线程的任务代码封装到"
												},
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "run()"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "方法中"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-0nsjguw",
									"Type": "NodeListItem",
									"Data": "3",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 3,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "Mw==",
										"Num": 3
									},
									"Properties": {
										"id": "20210707224540-0nsjguw"
									},
									"Children": [
										{
											"ID": "20210707224540-oketod0",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-oketod0"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "通过 Thread 类创建线程对象，并将 Runnable 接口的子类对象作为 Thread 类的构造函数的参数进行传递。"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "线程的任务都封装在 Runnable 接口实现类对象的 run 方法中，所以要在线程对象创建时就必须明确要运行的任务"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-4jw4hk5",
									"Type": "NodeListItem",
									"Data": "4",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 4,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "NA==",
										"Num": 4
									},
									"Properties": {
										"id": "20210707224540-4jw4hk5"
									},
									"Children": [
										{
											"ID": "20210707224540-426blqr",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-426blqr"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "调用"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeCodeSpan",
															"CodeMarkerLen": 1,
															"Children": [
																{
																	"Type": "NodeCodeSpanOpenMarker",
																	"Data": "`"
																},
																{
																	"Type": "NodeCodeSpanContent",
																	"Data": "start()"
																},
																{
																	"Type": "NodeCodeSpanCloseMarker",
																	"Data": "`"
																}
															]
														},
														{
															"Type": "NodeText",
															"Data": "开启线程"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "，JVM 调用该线程的"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeCodeSpan",
															"CodeMarkerLen": 1,
															"Children": [
																{
																	"Type": "NodeCodeSpanOpenMarker",
																	"Data": "`"
																},
																{
																	"Type": "NodeCodeSpanContent",
																	"Data": "run()"
																},
																{
																	"Type": "NodeCodeSpanCloseMarker",
																	"Data": "`"
																}
															]
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "方法执行（多次启动一个线程非法，即使执行完毕）"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-7afnxcl",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-7afnxcl"
					},
					"Children": [
						{
							"ID": "20210707224540-0gbjk28",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-0gbjk28"
							},
							"Children": [
								{
									"Type": "NodeMark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker",
											"Data": "=="
										},
										{
											"Type": "NodeStrong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "区别（实现 Runnable 接口的好处）"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeMark2CloseMarker",
											"Data": "=="
										}
									]
								}
							]
						},
						{
							"ID": "20210707224540-99l1pkn",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1,
								"Tight": true,
								"Start": 1,
								"Delimiter": 46,
								"Padding": 3,
								"Marker": "MQ==",
								"Num": 1
							},
							"Properties": {
								"id": "20210707224540-99l1pkn"
							},
							"Children": [
								{
									"ID": "20210707224540-q6th9d1",
									"Type": "NodeListItem",
									"Data": "1",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 1,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "MQ==",
										"Num": 1
									},
									"Properties": {
										"id": "20210707224540-q6th9d1"
									},
									"Children": [
										{
											"ID": "20210707224540-jwwb3q4",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-jwwb3q4"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "避免了 java"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "单继承的局限性"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-tvxvznt",
									"Type": "NodeListItem",
									"Data": "2",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 2,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "Mg==",
										"Num": 2
									},
									"Properties": {
										"id": "20210707224540-tvxvznt"
									},
									"Children": [
										{
											"ID": "20210707224540-e6q2dno",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-e6q2dno"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "适合多个相同程序的代码去"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "处理同一个资源"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-t7me2ce",
									"Type": "NodeListItem",
									"Data": "3",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 3,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "Mw==",
										"Num": 3
									},
									"Properties": {
										"id": "20210707224540-t7me2ce"
									},
									"Children": [
										{
											"ID": "20210707224540-bi5krqv",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-bi5krqv"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "增加程序的健壮性，实现"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "解耦"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "操作，代码可以被多个线程共享，"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "代码和线程独立"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-753j53s",
									"Type": "NodeListItem",
									"Data": "4",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 4,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "NA==",
										"Num": 4
									},
									"Properties": {
										"id": "20210707224540-753j53s"
									},
									"Children": [
										{
											"ID": "20210707224540-pa4soia",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-pa4soia"
											},
											"Children": [
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "线程池"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "只能放入实现 Runable 或 Callable 类线程，不能直接放入继承 Thread 的类"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-h8sryp0",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-h8sryp0"
					},
					"Children": [
						{
							"ID": "20210707224540-wb255f0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-wb255f0"
							},
							"Children": [
								{
									"Type": "NodeMark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker",
											"Data": "=="
										},
										{
											"Type": "NodeStrong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "run()和 start()的区别"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeMark2CloseMarker",
											"Data": "=="
										}
									]
								}
							]
						},
						{
							"ID": "20210707224540-0s7cr99",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-0s7cr99"
							},
							"Children": [
								{
									"ID": "20210707224540-xvlm8k9",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-xvlm8k9"
									},
									"Children": [
										{
											"ID": "20210707224540-zr12vg9",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-zr12vg9"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "run()：仅仅是封装被线程执行的代码，直接调用是普通方法。"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-9q6rl1y",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-9q6rl1y"
									},
									"Children": [
										{
											"ID": "20210707224540-3vx5eai",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-3vx5eai"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "start()：首先启动了线程，然后再由 jvm 去调用该线程的 run()方法。"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-jpbin6o",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-jpbin6o"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "2.4 匿名内部类实现多线程"
				}
			]
		},
		{
			"ID": "20210707224540-mqx3t4a",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-mqx3t4a"
			},
			"Children": [
				{
					"ID": "20210707224540-c5zehiq",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-c5zehiq"
					},
					"Children": [
						{
							"ID": "20210707224540-dd0zfzw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-dd0zfzw"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "继承 Thread 类"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20210707224540-kpqd8sl",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707224540-kpqd8sl"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "new Thread() {\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i \u003c 100; i++) {\n\t\t\tSystem.out.println(getName() + \"---\" + i);\n\t\t}\n\t}\n}.start();\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-cyle7gl",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-cyle7gl"
					},
					"Children": [
						{
							"ID": "20210707224540-rrx7qnb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-rrx7qnb"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "实现 Runnable 接口"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20210707224540-dha2pzw",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707224540-dha2pzw"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "//lambda表达式实现\nnew Thread(() -\u003e {\n    for (int i = 0; i \u003c 100; i++) {\n        System.out.println(Thread.currentThread().getName() + \"---\" + i);\n    }\n}).start();\n//普通实现\nnew Thread(new Runnable() {\n\t@Override\n\tpublic void run() {\n\t\tfor (int i = 0; i \u003c 100; i++) {\n\t\t\tSystem.out.println(Thread.currentThread().getName() + \"---\" + i);\n\t\t}\n\t}\n}).start();\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-ybvb9cm",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224540-ybvb9cm"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "3 线程状态\u0026调度"
				}
			]
		},
		{
			"ID": "20210707224540-frrcpw3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-frrcpw3"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "3.1 线程状态概述"
				}
			]
		},
		{
			"ID": "20210707224540-e6jgri6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-e6jgri6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中， 有几种状态呢？在 API 中 "
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeCodeSpan",
							"CodeMarkerLen": 1,
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker",
									"Data": "`"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "java.lang.Thread.State"
								},
								{
									"Type": "NodeCodeSpanCloseMarker",
									"Data": "`"
								}
							]
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "这个枚举中给出了六种线程状态"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "："
				}
			]
		},
		{
			"ID": "20210707224540-51zo68a",
			"Type": "NodeTable",
			"Data": "| 线程状态                    |                                                                                    导致状态发生条件                                                                                    |\n| --------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n| **NEW**(新建)               |                                                                   线程刚被创建，但是并未启动。还没调用 start 方法。                                                                    |\n| **Runnable**(可运行)        |                                             线程可以在 java 虚拟机中运行的状态，可能正在运行自己代码，也可能没有，这取决于操作系统处理器。                                             |\n| **Blocked**(锁阻塞)         |                          当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入 Blocked 状 态；当该线程持有锁时，该线程将变成 Runnable 状态。                          |\n| **Waiting**(无限等待)       |        一个线程在等待另一个线程执行一个（唤醒）动作时，该线程进入 Waiting 状态。进入这个 状态后是不能自动唤醒的，必须等待另一个线程调用 notify 或者 notifyAll 方法才能够唤醒。         |\n| **Timed Waiting**(计时等待) | 同 waiting 状态，有几个方法有超时参数，调用他们将进入 Timed Waiting 状态。这一状态将一直保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有 Thread.sleep(1000) 、 Object.wait。 |\n| **Terminated**(被终止)      |                                                       因为 run 方法正常退出而死亡，或者因为没有捕获的异常终止了 run 方法而死亡。                                                       |",
			"TableAligns": [
				0,
				2
			],
			"Properties": {
				"id": "20210707224540-51zo68a"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "线程状态"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "导致状态发生条件"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						2
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "NEW"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "(新建)"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "线程刚被创建，但是并未启动。还没调用 start 方法。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						2
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "Runnable"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "(可运行)"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "线程可以在 java 虚拟机中运行的状态，可能正在运行自己代码，也可能没有，这取决于操作系统处理器。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						2
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "Blocked"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "(锁阻塞)"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入 Blocked 状 态；当该线程持有锁时，该线程将变成 Runnable 状态。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						2
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "Waiting"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "(无限等待)"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一个线程在等待另一个线程执行一个（唤醒）动作时，该线程进入 Waiting 状态。进入这个 状态后是不能自动唤醒的，必须等待另一个线程调用 notify 或者 notifyAll 方法才能够唤醒。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						2
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "Timed Waiting"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "(计时等待)"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "同 waiting 状态，有几个方法有超时参数，调用他们将进入 Timed Waiting 状态。这一状态将一直保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有 Thread.sleep(1000) 、 Object.wait。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						2
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "Terminated"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "(被终止)"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "因为 run 方法正常退出而死亡，或者因为没有捕获的异常终止了 run 方法而死亡。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-sazh23q",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-sazh23q"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "3.2 线程调度"
				}
			]
		},
		{
			"ID": "20210707224540-01eywfb",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-01eywfb"
			},
			"Children": [
				{
					"ID": "20210707224540-3jxyjz9",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-3jxyjz9"
					},
					"Children": [
						{
							"ID": "20210707224540-fbs7kws",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-fbs7kws"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "线程"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "优先级"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：通过"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "getPriority()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "获取，通过"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "setPriority()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "设置。"
								}
							]
						},
						{
							"ID": "20210707224540-rswvv9l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-rswvv9l"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java 线程默认优先级是 5(1-10 低到高,Thread 的"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "静态"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "常量 NORM_PRIORITY(MIN/MAX))。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-2ft9khw",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-2ft9khw"
					},
					"Children": [
						{
							"ID": "20210707224540-mpsuha4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-mpsuha4"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "线程"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "让步"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：通过静态方法"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "Thread.yield()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "设置"
								}
							]
						},
						{
							"ID": "20210707224540-44zzil6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-44zzil6"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "暂停"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "当前正在执行的线程对象（系统指定的毫秒数），并执行其他线程。"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "转为就绪状态"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，该线程不会失去任何监视器的所有权（"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "不释放锁"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "），不会阻塞该线程。不确保真正让出，很少用。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-xtxsb2k",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-xtxsb2k"
					},
					"Children": [
						{
							"ID": "20210707224540-imxx3bu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-imxx3bu"
							},
							"Children": [
								{
									"Type": "NodeMark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker",
											"Data": "=="
										},
										{
											"Type": "NodeText",
											"Data": "线程"
										},
										{
											"Type": "NodeStrong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "休眠"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeMark2CloseMarker",
											"Data": "=="
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：通过静态方法"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "Thread.sleep(long millis)"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "设置"
								}
							]
						},
						{
							"ID": "20210707224540-1tpa79i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-1tpa79i"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "让当前正在执行的线程"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "休眠"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "（"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "暂停"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "执行）系统指定的毫秒数，该线程不丢失任何监视器的所属权（"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "不释放锁"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "），休眠结束回到"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "就绪状态"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-ziduyom",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-ziduyom"
					},
					"Children": [
						{
							"ID": "20210707224540-oyyxjjt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-oyyxjjt"
							},
							"Children": [
								{
									"Type": "NodeMark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker",
											"Data": "=="
										},
										{
											"Type": "NodeText",
											"Data": "线程"
										},
										{
											"Type": "NodeStrong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "插队"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeMark2CloseMarker",
											"Data": "=="
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：线程调用方法"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "th.join()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，即 join 到当前线程，插队！必须等这个线程终止后当前线程猜可以抢占资源"
								}
							]
						},
						{
							"ID": "20210707224540-lc1mgw3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-lc1mgw3"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "等待该线程终止"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，其他线程才可以抢占资源。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-xoml355",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-xoml355"
					},
					"Children": [
						{
							"ID": "20210707224540-li1fmjg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-li1fmjg"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "后台线程（守护线程，如坦克大战）"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：通过"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "th.setDaemon(true)"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "设置"
								}
							]
						},
						{
							"ID": "20210707224540-i9a6exq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-i9a6exq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当前正在运行的线程都是后台线程时，JVM 退出，该方法必须"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "在启动线程前调用"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-qyohblv",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-qyohblv"
					},
					"Children": [
						{
							"ID": "20210707224540-9fxvdis",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-9fxvdis"
							},
							"Children": [
								{
									"Type": "NodeMark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker",
											"Data": "=="
										},
										{
											"Type": "NodeStrong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "中断"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "线程"
										},
										{
											"Type": "NodeMark2CloseMarker",
											"Data": "=="
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：通过"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "th.interrupt()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "设置"
								}
							]
						},
						{
							"ID": "20210707224540-3bo6aga",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-3bo6aga"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "请求终止线程"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，仅设置了一个标志位，中断一个不在活动状态（阻塞）的线程没意义并会抛异常"
								}
							]
						},
						{
							"ID": "20210707224540-1gvczs5",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-1gvczs5"
							},
							"Children": [
								{
									"ID": "20210707224540-0lk0j38",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-0lk0j38"
									},
									"Children": [
										{
											"ID": "20210707224540-l6ef7im",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-l6ef7im"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "静态方法 interrupted()--\u003e"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "会清除中断标志位"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-mx0i4gd",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-mx0i4gd"
									},
									"Children": [
										{
											"ID": "20210707224540-alih8c7",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-alih8c7"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "普通方法 isInterrupted()--\u003e"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "不会清除中断标志位"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-7j495ob",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-7j495ob"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "3.3 线程间通信"
				}
			]
		},
		{
			"ID": "20210707224540-z16criw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-z16criw"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "多个线程在处理"
						},
						{
							"Type": "NodeMark",
							"Children": [
								{
									"Type": "NodeMark2OpenMarker",
									"Data": "=="
								},
								{
									"Type": "NodeText",
									"Data": "同一个资源"
								},
								{
									"Type": "NodeMark2CloseMarker",
									"Data": "=="
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "，但是处理的动作（线程的任务）却不相同"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210707224540-bt1wk6v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-bt1wk6v"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多个线程在处理同一个资源，并且任务不同时，需要线程通信来帮助解决线程之间对同一个变量的使用或操作。 就 是多个线程在操作同一份数据时， 避免对同一共享变量的争夺。也就是我们需要通过一定的手段使各个线程能有效 的利用资源。而这种手段即—— 等待唤醒机制。"
				}
			]
		},
		{
			"ID": "20210707224540-0eso0av",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210707224540-0eso0av"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "1 等待唤醒机制"
				}
			]
		},
		{
			"ID": "20210707224540-yvg5wsl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-yvg5wsl"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "就是在一个线程进行了规定操作后，就进入等待状态（wait()）， 等待其他线程执行完他们的指定代码过后 再将 其唤醒（notify()）；在有多个线程进行等待时， 如果需要，可以使用 notifyAll()来唤醒所有的等待线程。 wait/notify 就是线程间的一种协作机制。Effective Java 让"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "尽量使用 notifyAll"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "！！！"
				}
			]
		},
		{
			"ID": "20210707224540-nw0hz3r",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-nw0hz3r"
			},
			"Children": [
				{
					"ID": "20210707224540-o6qhfmq",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-o6qhfmq"
					},
					"Children": [
						{
							"ID": "20210707224540-ja42egw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-ja42egw"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "Object 类"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "（任意锁对象）中提供了三个方法：（这些方法必须通过"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "同一个锁对象在同步中调用"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "）"
								}
							]
						},
						{
							"ID": "20210707224540-4dwjzj6",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-4dwjzj6"
							},
							"Children": [
								{
									"ID": "20210707224540-tu3kh9f",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-tu3kh9f"
									},
									"Children": [
										{
											"ID": "20210707224540-ggjr6vn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-ggjr6vn"
											},
											"Children": [
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "wait([long timeout])"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "："
												},
												{
													"Type": "NodeMark",
													"Children": [
														{
															"Type": "NodeMark2OpenMarker",
															"Data": "=="
														},
														{
															"Type": "NodeStrong",
															"Children": [
																{
																	"Type": "NodeStrongA6kOpenMarker",
																	"Data": "**"
																},
																{
																	"Type": "NodeText",
																	"Data": "等待"
																},
																{
																	"Type": "NodeStrongA6kCloseMarker",
																	"Data": "**"
																}
															]
														},
														{
															"Type": "NodeText",
															"Data": "并立即"
														},
														{
															"Type": "NodeStrong",
															"Children": [
																{
																	"Type": "NodeStrongA6kOpenMarker",
																	"Data": "**"
																},
																{
																	"Type": "NodeText",
																	"Data": "释放锁"
																},
																{
																	"Type": "NodeStrongA6kCloseMarker",
																	"Data": "**"
																}
															]
														},
														{
															"Type": "NodeText",
															"Data": "，线程被阻塞。"
														},
														{
															"Type": "NodeStrong",
															"Children": [
																{
																	"Type": "NodeStrongA6kOpenMarker",
																	"Data": "**"
																},
																{
																	"Type": "NodeText",
																	"Data": "被唤醒后若获得锁那么从这里执行后续代码"
																},
																{
																	"Type": "NodeStrongA6kCloseMarker",
																	"Data": "**"
																}
															]
														},
														{
															"Type": "NodeMark2CloseMarker",
															"Data": "=="
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-j58o7wv",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-j58o7wv"
									},
									"Children": [
										{
											"ID": "20210707224540-8oad2ug",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-8oad2ug"
											},
											"Children": [
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "notifyAll()"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "：唤醒该锁上的所有线程，被通知线程不能立即恢复执行线程，"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "重新请求同步锁"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "。但是"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "notifyAll 不会释放锁"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-ur16gwe",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-ur16gwe"
									},
									"Children": [
										{
											"ID": "20210707224540-aoly4lq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-aoly4lq"
											},
											"Children": [
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "notify()"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "：随机唤醒该锁上的单个线程，被通知线程不能立即恢复执行线程，"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "重新请求同步锁"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "。但是"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "notify 不会释放锁"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-lsrw2gw",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20210707224540-lsrw2gw"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e "
				},
				{
					"ID": "20210707224540-9mcftsx",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210707224540-9mcftsx"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "哪怕只通知了一个等待的线程，被通知线程也不能立即恢复执行，因为它当初中断的地方是在同步块内，而 此刻它已经不持有锁，所以她需要再次尝试去获取锁（很可能面临其它线程的竞争），成功后才能在当初调 用 wait 方法之后的地方恢复执行。"
						},
						{
							"Type": "NodeSoftBreak",
							"Data": "\n"
						},
						{
							"Type": "NodeText",
							"Data": "总结如下："
						},
						{
							"Type": "NodeSoftBreak",
							"Data": "\n"
						},
						{
							"Type": "NodeText",
							"Data": "如果能获取锁，线程就从 WAITING 状态变成 RUNNABLE 状态； 否则，从 wait set 出来，又进入 entry set，线程就从 WAITING 状态又变成 BLOCKED 状态"
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-f3exfor",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224540-f3exfor"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "4 线程安全"
				}
			]
		},
		{
			"ID": "20210707224540-ilxj509",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-ilxj509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程安全问题："
				}
			]
		},
		{
			"ID": "20210707224540-b0mox7q",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-b0mox7q"
			},
			"Children": [
				{
					"ID": "20210707224540-nkhpv67",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-nkhpv67"
					},
					"Children": [
						{
							"ID": "20210707224540-kks6znc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-kks6znc"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "买票问题"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20210707224540-3qmrg42",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-3qmrg42"
							},
							"Children": [
								{
									"ID": "20210707224540-m8u6cgb",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-m8u6cgb"
									},
									"Children": [
										{
											"ID": "20210707224540-n8lvz28",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-n8lvz28"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "相同的票出现多次：CPU 的一次操作必须是原子性的"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-bocdh8r",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-bocdh8r"
									},
									"Children": [
										{
											"ID": "20210707224540-yuii1bj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-yuii1bj"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "出现负数的票：随机性和延迟导致"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-b9f90yg",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-b9f90yg"
					},
					"Children": [
						{
							"ID": "20210707224540-z284z84",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-z284z84"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "线程安全问题产生原因"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20210707224540-xhhuh57",
							"Type": "NodeList",
							"ListData": {
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-xhhuh57"
							},
							"Children": [
								{
									"ID": "20210707224540-i8kebn8",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-i8kebn8"
									},
									"Children": [
										{
											"ID": "20210707224540-298xr2a",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-298xr2a"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "多个线程在操作共享数据"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-jfc4x6n",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-jfc4x6n"
									},
									"Children": [
										{
											"ID": "20210707224540-p2tap1b",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-p2tap1b"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "操作共享数据的代码有多条"
												}
											]
										},
										{
											"ID": "20210707224540-jnr0xrh",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-jnr0xrh"
											},
											"Children": [
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "当一个线程在执行操作共享数据的多条代码过程中，其他线程参与了运算，就会导致"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-avg1qcn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-avg1qcn"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "4.1 线程同步"
				}
			]
		},
		{
			"ID": "20210707224540-oriv1n3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-oriv1n3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要解决上述多线程并发访问一个资源的安全性问题：也就是解决重复票与不存在票问题，Java 中提供了"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "同步机制 (synchronized)"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "来解决。有三种方式完成同步操作："
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "同步代码块"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "同步方法"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "锁机制"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210707224540-eiaj3au",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-eiaj3au"
			},
			"Children": [
				{
					"ID": "20210707224540-ius21lt",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-ius21lt"
					},
					"Children": [
						{
							"ID": "20210707224540-x0pab2z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-x0pab2z"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "同步的优缺点："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20210707224540-908bzmo",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-908bzmo"
							},
							"Children": [
								{
									"ID": "20210707224540-fctnat0",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-fctnat0"
									},
									"Children": [
										{
											"ID": "20210707224540-ka177h3",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-ka177h3"
											},
											"Children": [
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "好处"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "：解决线程的安全问题"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-qa7ulel",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-qa7ulel"
									},
									"Children": [
										{
											"ID": "20210707224540-u7879q5",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-u7879q5"
											},
											"Children": [
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "弊端"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "：相对"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "降低效率"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "，因为同步外的线程都会判断同步锁；若有同步嵌套容易产生"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "死锁"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-6dzrayp",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210707224540-6dzrayp"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "4.2.1 synchronized 关键字"
				}
			]
		},
		{
			"ID": "20210707224540-z4e4qg0",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-z4e4qg0"
			},
			"Children": [
				{
					"ID": "20210707224540-1i66lsq",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-1i66lsq"
					},
					"Children": [
						{
							"ID": "20210707224540-6itewkh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-6itewkh"
							},
							"Children": [
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "synchronized"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "关键字可以用于"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "方法中的某个区块中"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，表示只对这个区块的"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "资源实行互斥访问"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20210707224540-eodm4tt",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-eodm4tt"
							},
							"Children": [
								{
									"ID": "20210707224540-vk4ybhr",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-vk4ybhr"
									},
									"Children": [
										{
											"ID": "20210707224540-ttp4o6d",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-ttp4o6d"
											},
											"Children": [
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "同步锁"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "：也称"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "对象锁"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "或对象"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "监视器"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										},
										{
											"ID": "20210707224540-h2pgbb8",
											"Type": "NodeList",
											"ListData": {
												"Tight": true,
												"BulletChar": 45,
												"Padding": 2,
												"Marker": "LQ==",
												"Num": -1
											},
											"Properties": {
												"id": "20210707224540-h2pgbb8"
											},
											"Children": [
												{
													"ID": "20210707224540-ouw7hpr",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707224540-ouw7hpr"
													},
													"Children": [
														{
															"ID": "20210707224540-087uiwj",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707224540-087uiwj"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "锁对象可以是"
																},
																{
																	"Type": "NodeStrong",
																	"Children": [
																		{
																			"Type": "NodeStrongA6kOpenMarker",
																			"Data": "**"
																		},
																		{
																			"Type": "NodeText",
																			"Data": "任意类型"
																		},
																		{
																			"Type": "NodeStrongA6kCloseMarker",
																			"Data": "**"
																		}
																	]
																}
															]
														}
													]
												},
												{
													"ID": "20210707224540-tfey7kk",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707224540-tfey7kk"
													},
													"Children": [
														{
															"ID": "20210707224540-of9cc6d",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707224540-of9cc6d"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "多个线程对象要使用"
																},
																{
																	"Type": "NodeStrong",
																	"Children": [
																		{
																			"Type": "NodeStrongA6kOpenMarker",
																			"Data": "**"
																		},
																		{
																			"Type": "NodeText",
																			"Data": "同一把锁"
																		},
																		{
																			"Type": "NodeStrongA6kCloseMarker",
																			"Data": "**"
																		}
																	]
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-e55y8o1",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-e55y8o1"
					},
					"Children": [
						{
							"ID": "20210707224540-h4ej6fb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-h4ej6fb"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "synchronized"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "修饰的方法就叫做同步方法，保证 A 线程执行该方法的时候其他线程只能在方法外等着。"
								}
							]
						},
						{
							"ID": "20210707224540-2pcsgml",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-2pcsgml"
							},
							"Children": [
								{
									"ID": "20210707224540-07d3e24",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-07d3e24"
									},
									"Children": [
										{
											"ID": "20210707224540-vvfioaj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-vvfioaj"
											},
											"Children": [
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "同步锁是谁"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "?"
												}
											]
										},
										{
											"ID": "20210707224540-55kn8xo",
											"Type": "NodeList",
											"ListData": {
												"Tight": true,
												"BulletChar": 45,
												"Padding": 2,
												"Marker": "LQ==",
												"Num": -1
											},
											"Properties": {
												"id": "20210707224540-55kn8xo"
											},
											"Children": [
												{
													"ID": "20210707224540-dr9yhyo",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707224540-dr9yhyo"
													},
													"Children": [
														{
															"ID": "20210707224540-qa6i3ec",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707224540-qa6i3ec"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "对于"
																},
																{
																	"Type": "NodeStrong",
																	"Children": [
																		{
																			"Type": "NodeStrongA6kOpenMarker",
																			"Data": "**"
																		},
																		{
																			"Type": "NodeText",
																			"Data": "非 static 方法"
																		},
																		{
																			"Type": "NodeStrongA6kCloseMarker",
																			"Data": "**"
																		}
																	]
																},
																{
																	"Type": "NodeText",
																	"Data": "，同步锁就是"
																},
																{
																	"Type": "NodeStrong",
																	"Children": [
																		{
																			"Type": "NodeStrongA6kOpenMarker",
																			"Data": "**"
																		},
																		{
																			"Type": "NodeText",
																			"Data": "this"
																		},
																		{
																			"Type": "NodeStrongA6kCloseMarker",
																			"Data": "**"
																		}
																	]
																}
															]
														}
													]
												},
												{
													"ID": "20210707224540-5wfqpc5",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707224540-5wfqpc5"
													},
													"Children": [
														{
															"ID": "20210707224540-mft1tvf",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707224540-mft1tvf"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "对于"
																},
																{
																	"Type": "NodeStrong",
																	"Children": [
																		{
																			"Type": "NodeStrongA6kOpenMarker",
																			"Data": "**"
																		},
																		{
																			"Type": "NodeText",
																			"Data": "static 方法"
																		},
																		{
																			"Type": "NodeStrongA6kCloseMarker",
																			"Data": "**"
																		}
																	]
																},
																{
																	"Type": "NodeText",
																	"Data": "，我们使用当前方法所在类的字节码对象("
																},
																{
																	"Type": "NodeStrong",
																	"Children": [
																		{
																			"Type": "NodeStrongA6kOpenMarker",
																			"Data": "**"
																		},
																		{
																			"Type": "NodeText",
																			"Data": "类名.class"
																		},
																		{
																			"Type": "NodeStrongA6kCloseMarker",
																			"Data": "**"
																		}
																	]
																},
																{
																	"Type": "NodeText",
																	"Data": ")"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-3uh4r1k",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-3uh4r1k"
			},
			"Children": [
				{
					"ID": "20210707224540-t5zzvia",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-t5zzvia"
					},
					"Children": [
						{
							"ID": "20210707224540-f1gbnqx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-f1gbnqx"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "对某个对象加锁"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20210707224540-t7ox8po",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707224540-t7ox8po"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class T {\n\n    private int count = 10;\n    private final Object lock = new Object();\n\n    public void m() {\n        synchronized (lock) { // 任何线程要执行下面的代码，都必须先拿到lock锁，锁信息记录在堆内存对象中的，不是在栈引用中\n            // 如果lock已经被锁定，其他线程再进入时，就会阻塞等待\n            // 所以 synchronized 是互斥锁\n            count--;\n            System.out.println(Thread.currentThread().getName() + \" count = \" + count);\n        }\n        // 当代码块执行完毕后，锁就会被释放，然后被其他线程获取\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-5shsh6u",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-5shsh6u"
					},
					"Children": [
						{
							"ID": "20210707224540-n5cflrc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-n5cflrc"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "对 this 加锁"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20210707224540-mhho1fw",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707224540-mhho1fw"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class T {\n\n    private int count = 10;\n\n    public void m() {\n        synchronized (this) { // 任何线程要执行下面的代码，必须先拿到this锁\n            // synchronized 锁定的不是代码块，而是 this 对象\n            count--;\n            System.out.println(Thread.currentThread().getName() + \" count = \" + count);\n        }\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-yz2g1un",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-yz2g1un"
					},
					"Children": [
						{
							"ID": "20210707224540-kdsq72j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-kdsq72j"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "synchronized 方法对 this 加锁"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20210707224540-h58uq93",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707224540-h58uq93"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class T {\n\n    private int count = 10;\n\n    public synchronized void m() { // 等同于 synchronized (this) {\n        count--;\n        System.out.println(Thread.currentThread().getName() + \" count = \" + count);\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-y75o2in",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-y75o2in"
					},
					"Children": [
						{
							"ID": "20210707224540-zugck1i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-zugck1i"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "synchronized 静态方法的同步锁"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20210707224540-na35ynr",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707224540-na35ynr"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class T {\n\n    private static int count = 10;\n\n    public static synchronized void m() { // 等同于 synchronized (c_004.T.class) {\n        count--;\n        System.out.println(Thread.currentThread().getName() + \" count = \" + count);\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-uj6vgpu",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20210707224540-uj6vgpu"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "##### "
				},
				{
					"Type": "NodeText",
					"Data": "1 线程重入的问题"
				}
			]
		},
		{
			"ID": "20210707224540-w2yx6a0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-w2yx6a0"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程重入的问题（线程执行过程中，被其他线程打断）"
				}
			]
		},
		{
			"ID": "20210707224540-1b2vf85",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-1b2vf85"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为 count-- 、Sout 都不是原子操作，为保证操作的原子性，加上 synchronized"
				}
			]
		},
		{
			"ID": "20210707224540-p3k5154",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-p3k5154"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T implements Runnable{\n\n    private int count = 10;\n\n    @Override\n    public /*synchronized*/ void run() {\n        count--; // count--不是原子操作！！！\n        System.out.println(Thread.currentThread().getName() + \" count = \" + count);\n    }\n\n    public static void main(String[] args) {\n        T t = new T();\n        for (int i = 0; i \u003c 5; i++) {\n            new Thread(t).start();\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-3xc5ox0",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20210707224540-3xc5ox0"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "##### "
				},
				{
					"Type": "NodeText",
					"Data": "2 同步方法和非同步方法是否可以同时调用？"
				}
			]
		},
		{
			"ID": "20210707224540-y5brch3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-y5brch3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以。非同步方法不需要申请锁对象，直接就可以执行"
				}
			]
		},
		{
			"ID": "20210707224540-p2s7rmu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-p2s7rmu"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T {\n\n    private int count = 10;\n\n    public synchronized void m1() {\n        System.out.println(Thread.currentThread().getName() + \" m1 start\");\n        try {\n            TimeUnit.SECONDS.sleep(10);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(Thread.currentThread().getName() + \" m1 end\");\n    }\n\n    public void m2() {\n        try {\n            TimeUnit.SECONDS.sleep(5);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        T t = new T();\n        new Thread(t::m1); // 方法引用\n        new Thread(t::m2);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-wrefsrq",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20210707224540-wrefsrq"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "##### "
				},
				{
					"Type": "NodeText",
					"Data": "3 对业务写方法加锁，而对读方法不加锁？"
				}
			]
		},
		{
			"ID": "20210707224540-z6qjo8f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-z6qjo8f"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "容易出现"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "脏读"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "问题。在执行写的过程中，因为读操作没有加锁，所以读会读取到未改完的脏数据。"
				}
			]
		},
		{
			"ID": "20210707224540-e8wvrgu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-e8wvrgu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以对读也加锁，synchronized。但还是要根据业务，是否可以脏读。"
				}
			]
		},
		{
			"ID": "20210707224540-ojx04rk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-ojx04rk"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Account {\n\n    String name; // 银行账户名称\n    double balance; // 银行账余额\n\n    public synchronized void set(String name, double balance) {\n        this.name = name;\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        this.balance = balance;\n    }\n\n    public /*synchronized*/ double getBalance() {\n        return this.balance;\n    }\n\n    public static void main(String[] args) {\n        Account a = new Account();\n        new Thread(() -\u003e a.set(\"张三\", 100.0)).start();\n        System.out.println(a.getBalance()); // 0.0\n        try {\n            TimeUnit.SECONDS.sleep(3);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(a.getBalance()); // 100.0\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-0z91fvb",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20210707224540-0z91fvb"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "##### "
				},
				{
					"Type": "NodeText",
					"Data": "4 一个同步方法是否可以调用另外一个同步方法"
				}
			]
		},
		{
			"ID": "20210707224540-e35wk7w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-e35wk7w"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "synchronized 是"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "可重入锁"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，同一线程中，一个同步方法可以调用另外一个同步方法，一个线程已经拥有某个对象的锁，再次申请时仍然会得到该对象的锁"
				}
			]
		},
		{
			"ID": "20210707224540-im6jvxg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-im6jvxg"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T {\n\n    synchronized void m1() {\n        System.out.println(\"m1 start \");\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        m2();\n    }\n\n    synchronized void m2() {\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\" m2\"); // 这句话会打印，调用m2时，不会发生死锁\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-a5x57gk",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20210707224540-a5x57gk"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "##### "
				},
				{
					"Type": "NodeText",
					"Data": "5 同 4，但是是在父子类方法中"
				}
			]
		},
		{
			"ID": "20210707224540-zuggphc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-zuggphc"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "synchronized 是"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "可重入锁"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，锁对象是 new 的那个对象（哪个调用方法，哪个就是 this）。父子类中重写方法、非重写方法都可以"
				}
			]
		},
		{
			"ID": "20210707224540-ahmcs36",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-ahmcs36"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T {\n\n    synchronized void n() {\n        System.out.println(\"n start \");\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"n end \");\n    }\n\n    public static void main(String[] args) {\n        TT tt = new TT();\n        tt.m();\n    }\n}\n\nclass TT extends T {\n    //@Override\n    synchronized void m() {\n        System.out.println(\" child m start \");\n        super.n();\n        System.out.println(\" child m end \");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-xipr8dj",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20210707224540-xipr8dj"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "##### "
				},
				{
					"Type": "NodeText",
					"Data": "6 synchronized 代码块中，若发生异常锁会被释放"
				}
			]
		},
		{
			"ID": "20210707224540-tjvundc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-tjvundc"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在并发处理过程中，有异常要多加小心，不然可能发生数据不一致的情况。比如，在一个 web app 处理过程中，多个 servlet 线程共同访问同一资源，这时如果异常处理不合适，第一个线程抛出异常，其他线程就会进入同步代码区，有可能访问到异常产生的数据。因此要非常小心处理同步业务员逻辑中的异常。"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "需要 try...catch 并回滚"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "！！！"
				}
			]
		},
		{
			"ID": "20210707224540-xo1mf3n",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-xo1mf3n"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T {\n\n    int count = 0;\n\n    synchronized void m() {\n        System.out.println(Thread.currentThread().getName() + \" start\");\n        while (true) { //这里改为具体数值会更好，代表操作的步骤\n            count++;\n            System.out.println(Thread.currentThread().getName() + \" count=\" + count);\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            if (count == 5) {  // 当count == 5 时，synchronized代码块会抛出异常\n                int i = 1 / 0;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        T t = new T();\n        new Thread(t::m, \"t1\").start(); // 执行到第5秒时，抛出 ArithmeticException\n        // 如果抛出异常后，t2 会继续执行，就代表t2拿到了锁，即t1在抛出异常后释放了锁\n        try {\n            TimeUnit.SECONDS.sleep(3);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        new Thread(t::m, \"t2\").start();\n    }\n}\n/* 可能输出如下\nt1 start\nt1 count=1\nt1 count=2\nt1 count=3\nt1 count=4\nt1 count=5\nt2 start\nt2 count=6\nException in thread \"t1\" java.lang.ArithmeticException: / by zero\n\tat com.conanan.thread.T.m(T.java:29)\n\tat java.lang.Thread.run(Thread.java:748)\nt2 count=7\nt2 count=8\n*/\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-zydvle5",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20210707224540-zydvle5"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "##### "
				},
				{
					"Type": "NodeText",
					"Data": "7 synchronized 代码块中的语句越少越好"
				}
			]
		},
		{
			"ID": "20210707224540-kqzhc2s",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-kqzhc2s"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T {\n\n    int count = 0;\n\n    synchronized void m1() {\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // 业务逻辑中，只有下面这句代码需要 sync， 这时不应该给整个方法上锁\n        count++;\n\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    void m2() {\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // 业务逻辑中，只有下面这句需要 sync，这时不应该给整个方法上锁\n        // 采用细粒度的锁，可以使线程争用时间变短，从而提高效率\n        synchronized (this) {\n            count++;\n        }\n\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-f9ku7ao",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20210707224540-f9ku7ao"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "##### "
				},
				{
					"Type": "NodeText",
					"Data": "8 锁对象的改变"
				}
			]
		},
		{
			"ID": "20210707224540-s2j1byv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-s2j1byv"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "锁定某个对象 o，如果 o 属性发生变化，不影响锁的使用。但是如果 o 变成另一个对象，即锁定的对象发生变化，所以锁对象通常要设置为 final 类型，保证引用不可以变。"
				}
			]
		},
		{
			"ID": "20210707224540-9gk50qj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-9gk50qj"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T {\n\n    Object o = new Object();\n\n    void m() {\n        synchronized (o) {\n            while (true) {\n                System.out.println(Thread.currentThread().getName());\n                try {\n                    TimeUnit.SECONDS.sleep(1);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        T t = new T();\n        new Thread(t::m, \"线程1\").start();\n\n        try {\n            TimeUnit.SECONDS.sleep(3);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        Thread thread2 = new Thread(t::m, \"线程2\");\n        t.o = new Object(); // 改变锁引用, 线程2也有机会运行，否则一直都是线程1 运行\n        thread2.start();\n    }\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-tv5hmv1",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20210707224540-tv5hmv1"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "##### "
				},
				{
					"Type": "NodeText",
					"Data": "9 不要以字符串常量作为锁定对象"
				}
			]
		},
		{
			"ID": "20210707224540-bs06kp4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-bs06kp4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不要以字符串常量作为锁定对象。在下面的例子中， m1 和 m2 其实是锁定的同一对象，这种情况下，还会可能与其他类库发生死锁，比如某类库中也锁定了字符串 \"Hello\"，但是无法确认源码的具体位置，所以两个 \"Hello\" 将会造成死锁，因为你的程序和你用的类库无意间使用了同一把锁"
				}
			]
		},
		{
			"ID": "20210707224540-tq3c775",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-tq3c775"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T {\n\n    String s1 = \"Hello\";\n    String s2 = \"Hello\";\n\n    void m1() {\n        synchronized (s1) {\n\n        }\n    }\n\n    void m2() {\n        synchronized (s2) {\n\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-5m6p46y",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210707224540-5m6p46y"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "4.2.2 wait/notifyAll"
				}
			]
		},
		{
			"ID": "20210707224540-8hy05ms",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-8hy05ms"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在一个线程进行了规定操作后，就进入等待状态（wait()）， 等待其他线程执行完他们的指定代码过后 再将 其唤醒（notify()）；在有多个线程进行等待时， 如果需要，可以使用 notifyAll()来唤醒所有的等待线程。 wait/notify 就是线程间的一种协作机制。Effective Java 让"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "尽量使用 notifyAll"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "！！！"
				}
			]
		},
		{
			"ID": "20210707224540-nfvskhw",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-nfvskhw"
			},
			"Children": [
				{
					"ID": "20210707224540-23t773j",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-23t773j"
					},
					"Children": [
						{
							"ID": "20210707224540-oove1on",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-oove1on"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "Object 类"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "（任意锁对象）中提供了三个方法：（这些方法必须通过"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "同一个锁对象在同步中调用"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "）"
								}
							]
						},
						{
							"ID": "20210707224540-on0bqev",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-on0bqev"
							},
							"Children": [
								{
									"ID": "20210707224540-9brx3p8",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-9brx3p8"
									},
									"Children": [
										{
											"ID": "20210707224540-z8u3otc",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-z8u3otc"
											},
											"Children": [
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "wait([long timeout])"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "："
												},
												{
													"Type": "NodeMark",
													"Children": [
														{
															"Type": "NodeMark2OpenMarker",
															"Data": "=="
														},
														{
															"Type": "NodeStrong",
															"Children": [
																{
																	"Type": "NodeStrongA6kOpenMarker",
																	"Data": "**"
																},
																{
																	"Type": "NodeText",
																	"Data": "等待"
																},
																{
																	"Type": "NodeStrongA6kCloseMarker",
																	"Data": "**"
																}
															]
														},
														{
															"Type": "NodeText",
															"Data": "并立即"
														},
														{
															"Type": "NodeStrong",
															"Children": [
																{
																	"Type": "NodeStrongA6kOpenMarker",
																	"Data": "**"
																},
																{
																	"Type": "NodeText",
																	"Data": "释放锁"
																},
																{
																	"Type": "NodeStrongA6kCloseMarker",
																	"Data": "**"
																}
															]
														},
														{
															"Type": "NodeText",
															"Data": "，线程被阻塞。"
														},
														{
															"Type": "NodeStrong",
															"Children": [
																{
																	"Type": "NodeStrongA6kOpenMarker",
																	"Data": "**"
																},
																{
																	"Type": "NodeText",
																	"Data": "被唤醒后若获得锁那么从这里执行后续代码"
																},
																{
																	"Type": "NodeStrongA6kCloseMarker",
																	"Data": "**"
																}
															]
														},
														{
															"Type": "NodeMark2CloseMarker",
															"Data": "=="
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-6u14w4f",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-6u14w4f"
									},
									"Children": [
										{
											"ID": "20210707224540-u4r135g",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-u4r135g"
											},
											"Children": [
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "notifyAll()"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "：唤醒该锁上的所有线程，被通知线程不能立即恢复执行线程，"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "重新请求同步锁"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "。但是"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "notifyAll 不会释放锁"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-s2fohdd",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-s2fohdd"
									},
									"Children": [
										{
											"ID": "20210707224540-2sy6s6k",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-2sy6s6k"
											},
											"Children": [
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "notify()"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "：随机唤醒该锁上的单个线程，被通知线程不能立即恢复执行线程，"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "重新请求同步锁"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "。但是"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "notify 不会释放锁"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-4guch36",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20210707224540-4guch36"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e "
				},
				{
					"ID": "20210707224540-526mhqi",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210707224540-526mhqi"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "哪怕只通知了一个等待的线程，被通知线程也不能立即恢复执行，因为它当初中断的地方是在同步块内，而 此刻它已经不持有锁，所以她需要再次尝试去获取锁（很可能面临其它线程的竞争），成功后才能在当初调 用 wait 方法之后的地方恢复执行。"
						},
						{
							"Type": "NodeSoftBreak",
							"Data": "\n"
						},
						{
							"Type": "NodeText",
							"Data": "总结如下："
						},
						{
							"Type": "NodeSoftBreak",
							"Data": "\n"
						},
						{
							"Type": "NodeText",
							"Data": "如果能获取锁，线程就从 WAITING 状态变成 RUNNABLE 状态； 否则，从 wait set 出来，又进入 entry set，线程就从 WAITING 状态又变成 BLOCKED 状态"
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-hjnslyb",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210707224540-hjnslyb"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "4.2.3 volatile 关键字"
				}
			]
		},
		{
			"ID": "20210707224540-h9wlsw0",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20210707224540-h9wlsw0"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e "
				},
				{
					"ID": "20210707224540-ljuyzpf",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210707224540-ljuyzpf"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "/ˈvɑː.lə.t̬əl/ 易变的；无定性的；无常性的；可能急剧波动的"
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-2vbwl8j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-2vbwl8j"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "volatile 关键字，使"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "一个变量在多个线程间可见"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。volatile 并不能保证多个线程共同修改 running 变量所带来的不一致的问题，也就是说 volatile 不能替代 synchronized。即 "
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "volatile 只能保证可见性，不能保证原子性"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，synchronized 都可以保证，但性能比 volatile 低"
				}
			]
		},
		{
			"ID": "20210707224540-g7exxw3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-g7exxw3"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "JMM"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "(Java Memory Model)：在 JMM 中，所有对象以及信息都存放在"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "主内存"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "中（包含堆、栈），而"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "每个线程都有自己的独立空间"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "存储"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "了需要用到的"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "变量的副本"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，线程"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "对共享变量的操作"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，都会在自己的"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "工作内存"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "中进行，然后"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "同步给主内存"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-0zlrawc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-0zlrawc"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面的代码中，running 是位于堆内存中的 t 对象的。当线程 t1 开始运行的时候，会把 running 值从内存中读到 t1 线程的工作区，在运行过程中直接使用这个 copy，并不会每次都会去读取堆内存，这样，当主线程修改 running 的值之后，t1 线程感知不到，所以不会停止运行。使用 volatile，将会在修改后强制所有线程都去堆内存中读取 running 的值"
				}
			]
		},
		{
			"ID": "20210707224540-1buqz3x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-1buqz3x"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T {\n\n    /*volatile*/ boolean running = true;   // 对比有无volatile的情况下，整个程序运行结果的区别\n\n    void m() {\n        System.out.println(\" m start \");\n        while (running) { // 直到主线程将running设置为false，T线程才会退出\n        /* 在while中加入一些语句，可见性问题可能就会消失，这是因为加入语句后，CPU可能就会出现空闲，\n        然后就会同步主内存中的内容到工作内存。所以，可见性问题可能会消失 */\n            /*try {\n                TimeUnit.MILLISECONDS.sleep(10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }*/\n        }\n        System.out.println(\" m end \");\n    }\n\n    public static void main(String[] args) {\n        T t = new T();\n        new Thread(t::m, \"t1\").start();\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        t.running = false;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-a5d2pv6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-a5d2pv6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "volatile 只能保证可见性，不能保证原子性。如下（count++问题引起，非原子操作）："
				}
			]
		},
		{
			"ID": "20210707224540-jga6rsh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-jga6rsh"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T {\n\n    volatile int count = 0;\n    /*AtomicInteger count = new AtomicInteger(0);*/\n\n    /*synchronized*/ void m() {\n        for (int i = 0; i \u003c 10000; i++) {\n            count++;\n            /*count.incrementAndGet();*/\n        }\n    }\n    public static void main(String[] args) {\n        // 创建一个10个线程的list，执行任务皆是 m方法\n        T t = new T();\n        List\u003cThread\u003e threads = new ArrayList\u003c\u003e();\n        for (int i = 0; i \u003c 10; i++) {\n            threads.add(new Thread(t::m, \"t-\" + i));\n        }\n\n        // 启动这10个线程\n        threads.forEach(Thread::start);\n        // join 到主线程，防止主线程先行结束\n        threads.forEach(thread -\u003e {\n            try {\n                thread.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        // 10个线程，每个线程执行10000次，结果应为 100000\n        System.out.println(t.count);  // 所得结果并不为 100000，说明volatile 不保证原子性\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-bluh5z6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-bluh5z6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "解决方案："
				}
			]
		},
		{
			"ID": "20210707224540-w52ou9b",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 3,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210707224540-w52ou9b"
			},
			"Children": [
				{
					"ID": "20210707224540-xbjz3lm",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210707224540-xbjz3lm"
					},
					"Children": [
						{
							"ID": "20210707224540-hhkaw5j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-hhkaw5j"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在方法上加上 synchronized 即可，synchronized 既保证可见性，又保证原子性"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-chla6lp",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210707224540-chla6lp"
					},
					"Children": [
						{
							"ID": "20210707224540-bleatkc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-bleatkc"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "或使用 AtomicInteger 代替 int（AtomicXXX 代表此类中的所有方法都是原子操作，并且可以保证可见性），但 AtomicXXX 类多个方法组合不构成原子性"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-2rdetd5",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210707224540-2rdetd5"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "4.2.4 CountDownLatch 门闩"
				}
			]
		},
		{
			"ID": "20210707224540-whbh6ln",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-whbh6ln"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 Latch 替代 wait notify 来进行通信，好处是，通信简单，同时也可以指定等待时间。"
				}
			]
		},
		{
			"ID": "20210707224540-y6lhl8j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-y6lhl8j"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 await 和 countDown 方法替代 wait 和 notify。"
				}
			]
		},
		{
			"ID": "20210707224540-xyxp6d4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-xyxp6d4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CountDownLatch 不涉及锁定，当 count 值为 0 时，当前线程继续运行"
				}
			]
		},
		{
			"ID": "20210707224540-9yhkut0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-9yhkut0"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当不涉及同步，只涉及线程通信的时候，用 synchronized + wait + notify 就显得太重了，这时应该使用 CountDownLatch、cyclicbarrier、semaphore（信号量）"
				}
			]
		},
		{
			"ID": "20210707224540-u9cowtk",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20210707224540-u9cowtk"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e "
				},
				{
					"ID": "20210707224540-0abw17u",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210707224540-0abw17u"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "具体查看面试题第 2 个"
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-59sfo8b",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210707224540-59sfo8b"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "4.2.5 ReentrantLock 锁"
				}
			]
		},
		{
			"ID": "20210707224540-z86vlhc",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-z86vlhc"
			},
			"Children": [
				{
					"ID": "20210707224540-lz0n44d",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-lz0n44d"
					},
					"Children": [
						{
							"ID": "20210707224540-06gqh1y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-06gqh1y"
							},
							"Children": [
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "java.util.concurrent.locks.Lock"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "接口"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "机制提供了比 synchronized 代码块和 synchronized 方法更广泛的锁定操作，同步代码块/同步方法具有的功能 Lock 都有，除此之外更强大，更体现面向对象。 但是"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "抛出异常后不会自动释放锁"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-na2tnb6",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-na2tnb6"
					},
					"Children": [
						{
							"ID": "20210707224540-eqa6ll4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-eqa6ll4"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "Lock 接口的实现类"
										},
										{
											"Type": "NodeCodeSpan",
											"CodeMarkerLen": 1,
											"Children": [
												{
													"Type": "NodeCodeSpanOpenMarker",
													"Data": "`"
												},
												{
													"Type": "NodeCodeSpanContent",
													"Data": "ReentrantLock"
												},
												{
													"Type": "NodeCodeSpanCloseMarker",
													"Data": "`"
												}
											]
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-hkgatkw",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-hkgatkw"
					},
					"Children": [
						{
							"ID": "20210707224540-0ghplis",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-0ghplis"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "Lock 锁也称同步锁"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，加锁与释放锁方法化了，如下："
								}
							]
						},
						{
							"ID": "20210707224540-oe0mbn3",
							"Type": "NodeList",
							"ListData": {
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-oe0mbn3"
							},
							"Children": [
								{
									"ID": "20210707224540-de2fnd7",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-de2fnd7"
									},
									"Children": [
										{
											"ID": "20210707224540-isl5h0b",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-isl5h0b"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "public void "
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "lock"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "()："
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "加同步锁"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-40hce49",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-40hce49"
									},
									"Children": [
										{
											"ID": "20210707224540-g3gsbmc",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-g3gsbmc"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "public void "
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "unlock"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "()："
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "释放同步锁"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										},
										{
											"ID": "20210707224540-saqneck",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"CodeBlockFenceChar": 96,
											"CodeBlockFenceLen": 3,
											"CodeBlockOpenFence": "YGBg",
											"CodeBlockInfo": "amF2YQ==",
											"CodeBlockCloseFence": "YGBg",
											"Properties": {
												"id": "20210707224540-saqneck"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "amF2YQ=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "public class ReentrantLock2 {\n\n    ReentrantLock lock = new ReentrantLock();\n\n    void m1() {\n        lock.lock(); // 相当于 synchronized(this)\n        try {\n            for (int i = 0; i \u003c 10; i++) {\n                try {\n                    TimeUnit.SECONDS.sleep(1);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(i);\n            }\n        } finally {\n            lock.unlock(); // 使用完毕后，必须手动释放锁\n            // 不同于synchronized，抛出异常后，不会自动释放锁，需要我们在finally中释放此锁\n        }\n    }\n\n    void m2() {\n        lock.lock(); // 相当于 synchronized(this)\n        try {\n            System.out.println(\"m2...\");\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public static void main(String[] args) {\n        ReentrantLock2 r1 = new ReentrantLock2();\n        new Thread(r1::m1, \"t1\").start(); // m1 已经执行，被t1占有锁this\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        new Thread(r1::m2, \"t2\").start(); // 锁已经被其他线程占用，m1执行完毕后，才会执行\n    }\n\n}\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-oyhp35h",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20210707224540-oyhp35h"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "##### "
				},
				{
					"Type": "NodeText",
					"Data": "1 尝试锁 tryLock"
				}
			]
		},
		{
			"ID": "20210707224540-nrccoak",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-nrccoak"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ReentrantLock 可以进行尝试锁定 tryLock， 这样无法获得锁、或者在指定时间内无法获得锁，线程可以决定是否继续等待"
				}
			]
		},
		{
			"ID": "20210707224540-21cty8v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-21cty8v"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ReentrantLock3 {\n\n    ReentrantLock lock = new ReentrantLock();\n\n    void m1() {\n        lock.lock(); // 相当于 synchronized\n        try {\n            for (int i = 0; i \u003c 10; i++) {\n                try {\n                    TimeUnit.SECONDS.sleep(1);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(i);\n            }\n        } finally {\n            lock.unlock(); // 使用完毕后，必须手动释放锁\n            // 不同于synchronized，抛出异常后，不会自动释放锁，需要我们在finally中释放此锁\n        }\n    }\n\n    void m2() {\n        // 尝试获取锁，返回true拿到了\n        boolean flag = false;\n        try {\n            //boolean flag = lock.tryLock(); //不带参的不需要catch异常\n            flag = this.lock.tryLock(5, TimeUnit.SECONDS);\n            //根据是否获取到锁来决定后续业务逻辑\n            if (flag){\n                System.out.println(\"m2...\");\n            } else {\n                System.out.println(\"m2 false!\");\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            if (flag){\n                lock.unlock();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        ReentrantLock3 r1 = new ReentrantLock3();\n        new Thread(r1::m1, \"t1\").start(); // m1 已经执行，被t1占有锁this\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        new Thread(r1::m2, \"t2\").start(); // 锁已经被其他线程占用，m1执行完毕后，m2不会执行（因为只等5秒）\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-19j1ait",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20210707224540-19j1ait"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "##### "
				},
				{
					"Type": "NodeText",
					"Data": "2 lockInterruptibly"
				}
			]
		},
		{
			"ID": "20210707224540-np2o92q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-np2o92q"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ReentrantLock 可以调用 lockInterruptibly 方法，使线程等待锁的过程中，可以通过对线程做 interrupt 操作来终端等待锁过程"
				}
			]
		},
		{
			"ID": "20210707224540-4h6pp18",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-4h6pp18"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ReentrantLock4 {\n\n    public static void main(String[] args) {\n        ReentrantLock lock = new ReentrantLock();\n        new Thread(() -\u003e {\n            lock.lock();\n            try {\n                System.out.println(\"t1 start\");\n                TimeUnit.SECONDS.sleep(Integer.MAX_VALUE);  // 线程一直占用锁\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n            }\n\n        }, \"t1\").start();\n\n        Thread t2 = new Thread(() -\u003e {\n\n            try {\n                lock.lockInterruptibly(); // t2 尝试获取锁\n\n                System.out.println(\"t2 start\");\n            } catch (InterruptedException e) {\n                System.out.println(\"t2 等待中被打断\");\n            } finally {\n                lock.unlock(); // 没有锁定进行unlock就会抛出 IllegalMonitorStateException\n            }\n        }, \"t2\");\n        t2.start();\n\n        try {\n            TimeUnit.SECONDS.sleep(4);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        // 打断线程2的等待\n        t2.interrupt();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-c2xue62",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20210707224540-c2xue62"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "##### "
				},
				{
					"Type": "NodeText",
					"Data": "3 公平锁"
				}
			]
		},
		{
			"ID": "20210707224540-8gs6i2g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-8gs6i2g"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ReentrantLock 可以指定为公平锁，synchronized 是不公平锁"
				}
			]
		},
		{
			"ID": "20210707224540-eu8gwj6",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-eu8gwj6"
			},
			"Children": [
				{
					"ID": "20210707224540-yiki419",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-yiki419"
					},
					"Children": [
						{
							"ID": "20210707224540-2bg6zjo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-2bg6zjo"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "公平锁，先获取锁的人，在锁被释放时，优先获得锁。相对公平"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-iw40vt8",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-iw40vt8"
					},
					"Children": [
						{
							"ID": "20210707224540-hqnd6rb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-hqnd6rb"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不公平锁，无论先后，线程调度器将会随机给某个线程锁，不用计算线程时序，效率较高"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-53us3h7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-53us3h7"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ReentrantLock5 extends Thread {\n\n    private static ReentrantLock lock = new ReentrantLock(true);// 指定锁为公平锁\n\n    @Override\n    public void run() {\n        for (int i = 0; i \u003c 100; i++) {\n            lock.lock();\n            try {\n                System.out.println(Thread.currentThread().getName() + \"获取锁\" + i);\n            } finally {\n                lock.unlock();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        ReentrantLock5 t1 = new ReentrantLock5();\n        ReentrantLock5 t2 = new ReentrantLock5();\n        t1.start();\n        t2.start();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-7loe38t",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20210707224540-7loe38t"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "##### "
				},
				{
					"Type": "NodeText",
					"Data": "4 Condition/await/signalAll"
				}
			]
		},
		{
			"ID": "20210707224540-wi9rfmv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-wi9rfmv"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 Lock 和 Condition 实现，可以精确唤醒某些线程。查看面试题 3 中的代码"
				}
			]
		},
		{
			"ID": "20210707224540-jc6eg9a",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-jc6eg9a"
			},
			"Children": [
				{
					"ID": "20210707224540-sxmr94q",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-sxmr94q"
					},
					"Children": [
						{
							"ID": "20210707224540-7ucxw7w",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-7ucxw7w"
							},
							"Children": [
								{
									"ID": "20210707224540-z78ypa8",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-z78ypa8"
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-8pu2j0r",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224540-8pu2j0r"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "5 ThreadLocal"
				}
			]
		},
		{
			"ID": "20210707224540-6y0ez5x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-6y0ez5x"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ThreadLocal：使用空间换时间，效率更高。但可能会导致内存泄漏。（Spring 等框架使用了很多）"
				}
			]
		},
		{
			"ID": "20210707224540-lwzb3kw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-lwzb3kw"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程同步：使用时间换空间，加锁"
				}
			]
		},
		{
			"ID": "20210707224540-t684ec3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-t684ec3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "前情"
				}
			]
		},
		{
			"ID": "20210707224540-l4wa3dk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-l4wa3dk"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ThreadLocal1 {\n\n    /*volatile*/ static Person p = new Person();\n\n    public static void main(String[] args) {\n        new Thread(() -\u003e {\n            try {\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(p.name);//在加与不加volatile的情况下，这句话打印的值分别是？ 答：不写volatile有可能发生可见性问题\n        }).start();\n\n        new Thread(() -\u003e {\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            p.name = \"lisi\";\n        }).start();\n    }\n\n    static class Person {\n        String name = \"zhangsan\";\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-knj8ofl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-knj8ofl"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果想要"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "共享变量不可见"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "呢？ 就需要使用"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "ThreadLocal"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "线程局部变量"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-t2494ms",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-t2494ms"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ThreadLocal2 {\n\n    static ThreadLocal\u003cPerson\u003e p = new ThreadLocal\u003c\u003e();\n\n    public static void main(String[] args) {\n        new Thread(() -\u003e {\n            try {\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(p.get()); // 2. 虽然threadLocal时共享变量，但是取不到其他线程放入的值，所以此处为null\n        }).start();\n\n        new Thread(() -\u003e {\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            p.set(new Person()); // 1. 往线程局部变量放入一个person\n        }).start();\n    }\n\n    static class Person {\n        String name = \"zhangsan\";\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-ftplwqz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224540-ftplwqz"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "6 JUC"
				}
			]
		},
		{
			"ID": "20210707224540-z445f3r",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-z445f3r"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "6.1 卖票问题引入"
				}
			]
		},
		{
			"ID": "20210707224540-wwv1rf1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-wwv1rf1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用同步锁，效率不高"
				}
			]
		},
		{
			"ID": "20210707224540-ej01ayc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-ej01ayc"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class TicketSeller3 {\n\n    static List\u003cString\u003e tickets = new ArrayList\u003c\u003e();\n\n    static {\n        for (int i = 0; i \u003c 1000; i++) {\n            tickets.add(\"票号：\" + i);\n        }\n    }\n\n    public static void main(String[] args) {\n        //10个窗口买票线程\n        for (int i = 0; i \u003c 10; i++) {\n            new Thread(() -\u003e {\n                //每个窗口得循环执行\n                while (true) {\n                    synchronized (tickets) {\n                        if (tickets.size() \u003e 0) {\n                            System.out.println(Thread.currentThread().getName() + \"销售了 \" + tickets.remove(0));\n\n                        }\n                    }\n                }\n            }, \"window\" + i).start();\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-ryqniej",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-ryqniej"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以使用并发容器 ConcurrentLinkedQueue。先对容器修改，再做判断，不会有问题"
				}
			]
		},
		{
			"ID": "20210707224540-mwti12k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-mwti12k"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class TicketSeller4 {\n\n    static ConcurrentLinkedQueue\u003cString\u003e queue = new ConcurrentLinkedQueue\u003c\u003e();\n\n    static {\n        for (int i = 0; i \u003c 1000; i++) {\n            queue.add(\"票号：\" + i);\n        }\n    }\n\n    public static void main(String[] args) {\n        for (int i = 0; i \u003c 10; i++) {\n            new Thread(() -\u003e {\n                while (true) {\n                    String t = queue.poll(); // 取出头，拿不到就是空值\n                    if (t == null) {\n                        break;\n                    }\n                    System.out.println(Thread.currentThread().getName()+\"销售了\" + t);\n                }\n            }).start();\n        }\n    }\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-90mwze1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-90mwze1"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "6.2 ConcurrentMap/ConcurrentSkipListMap"
				}
			]
		},
		{
			"ID": "20210707224540-ffbh325",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-ffbh325"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// skipMap: https://blog.csdn.net/sunxianghuang/article/details/52221913\npublic class T01_ConcurrentMap {\n\n    public static void main(String[] args) {\n\n        //Map\u003cString, String\u003e map = new Hashtable\u003c\u003e(); // 4106左右  全表锁\n        //Map\u003cString, String\u003e map = Collections.synchronizedMap(new HashMap\u003c\u003e()); //4437左右\n        Map\u003cString, String\u003e map = new ConcurrentHashMap\u003c\u003e(); // 2304左右，加的是分段所，将容器分为16段，每段都有一个锁 segment; 1.8以后 使用 Node + synchronized+CAS\n        //Map\u003cString, String\u003e map = new ConcurrentSkipListMap\u003c\u003e(); //5583左右  并发且排序，插入效率较低，但是读取很快\n\n        Random r = new Random();\n        Thread[] ths = new Thread[100];\n        CountDownLatch latch = new CountDownLatch(ths.length); // 启动了一个门闩，每有一个线程退出，门闩就减1，直到所有线程结束，门闩打开，主线程结束\n\n        long start = System.currentTimeMillis();\n        // 创建100个线程，每个线程添加100000个元素到map，并启动这些线程\n        for (int i = 0; i \u003c ths.length; i++) {\n            ths[i] = new Thread(() -\u003e {\n                for (int j = 0; j \u003c 100000; j++) {\n                    map.put(\"a\" + r.nextInt(100000), \"a\" + r.nextInt(1000000));\n                }\n                latch.countDown();\n            }, \"t\" + i);\n        }\n        Arrays.asList(ths).forEach(Thread::start);\n\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        long end = System.currentTimeMillis();\n        System.out.println(end - start);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-b9q34qb",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-b9q34qb"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "6.3 CopyOnWriteList"
				}
			]
		},
		{
			"ID": "20210707224540-qzbur10",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-qzbur10"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "监听器队列用的多，读多！"
				}
			]
		},
		{
			"ID": "20210707224540-4svvv7t",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-4svvv7t"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T02_CopyOnWriteList {\n\n    public static void main(String[] args) {\n\n        List\u003cString\u003e list =\n        //new ArrayList\u003c\u003e(); // 添加为非原子操作：Items[Size] 的位置存放此元素；增大 Size 的值。\n        //Collections.synchronizedList(new ArrayList\u003c\u003e());\n        //new Vector\u003c\u003e();\n        new CopyOnWriteArrayList\u003c\u003e();  // 写时复制：写速极慢，每写一次需要全部复制，读取快\n\n        Random r = new Random();\n        Thread[] ths = new Thread[100];\n\n        for (int i = 0; i \u003c ths.length; i++) {\n            ths[i] = new Thread(() -\u003e {\n                for (int j = 0; j \u003c 1000; j++) {\n                    list.add(j+\"\" + r.nextInt(100));\n                }\n            });\n        }\n        runAndComputeTime(ths);\n        System.out.println(list.size());\n\n    }\n\n    static void runAndComputeTime(Thread[] ths) {\n        long start = System.currentTimeMillis();\n        Arrays.asList(ths).forEach(Thread::start);\n        Arrays.asList(ths).forEach(t -\u003e {\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        long end = System.currentTimeMillis();\n        System.out.println(end - start);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-ulgae4r",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-ulgae4r"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "6.4 ConcurrentLinkedQueue"
				}
			]
		},
		{
			"ID": "20210707224540-ba4fenk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-ba4fenk"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T04_ConcurrentQueue {\n\n\n    public static void main(String[] args) {\n        Queue\u003cString\u003e queue = new ConcurrentLinkedQueue\u003c\u003e(); // LinkedQueue，无界单向队列\n\n        for (int i = 0; i \u003c 10; i++) {\n            queue.offer(\"a\" + i); // 有返回值，返回false代表没有加入成功，true 代表成功，并且此方法不会阻塞\n        }\n\n        System.out.println(queue);\n        System.out.println(queue.size());\n\n        System.out.println(queue.poll()); // 取出队头\n        System.out.println(queue.size());\n\n        System.out.println(queue.peek()); // 取出队头，但是不删除队头\n        System.out.println(queue.size());\n\n        // 双端队列 Deque 发音： dai ke\n        //Deque\u003cString\u003e deque = new ConcurrentLinkedDeque\u003c\u003e();\n        //deque.addFirst();\n        //deque.addLast();\n        //deque.pollFirst();\n        //deque.pollLast();\n        //deque.peekFirst();\n        //deque.peekLast();\n    }\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-v0vb151",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-v0vb151"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "6.5 LinkedBlockingQueue"
				}
			]
		},
		{
			"ID": "20210707224540-uuk6gze",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-uuk6gze"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用阻塞同步队列 LinkedBlockingQueue 完成"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "生产者消费者"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "模式，使用场景较多。"
				}
			]
		},
		{
			"ID": "20210707224540-fa2iwv6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-fa2iwv6"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T05_LinkedBlockingQueue {\n\n    public static void main(String[] args) {\n\n        BlockingQueue\u003cString\u003e queue = new LinkedBlockingQueue\u003c\u003e(); // LinkedQueue，无界单向队列\n\n        // 启动生产者线程生产\n        new Thread(() -\u003e {\n            for (int i = 0; i \u003c 100; i++) {\n                try {\n                    // put 方法，给容器添加元素，如果容器已经满了，则会阻塞等待\n                    queue.put(\"a\" + i);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }, \"producer\").start();\n\n        // 启用消费者线程消费\n        for (int i = 0; i \u003c 5; i++) {\n            new Thread(() -\u003e {\n                while (true) {\n                    try {\n                        // 从队列中拿数据，如果空了，则会阻塞等待\n                        System.out.println(Thread.currentThread().getName() + \":\" + queue.take());\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }, \"consumer\" + i).start();\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-6d3x0kh",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-6d3x0kh"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "6.6 ArrayBlockingQueue"
				}
			]
		},
		{
			"ID": "20210707224540-79emwua",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-79emwua"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T06_ArrayBlockingQueue {\n\n\n    public static void main(String[] args) throws InterruptedException {\n\n        BlockingQueue queue = new ArrayBlockingQueue\u003c\u003e(10); // 有界队列\n\n        for (int i = 0; i \u003c 10; i++) {\n            queue.put(\"a\" + i);\n        }\n\n        //queue.put(\"a11\"); // 满了会一直阻塞\n        //queue.add(\"a11\"); // 满了会抛出异常\n        //System.out.println(queue.offer(\"a11\")); // 满了会返回false\n        System.out.println(queue.offer(\"a11\", 1, TimeUnit.SECONDS)); // 会等待1s,满了返回false, 如果1s内有空闲,则添加成功后返回true\n\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-s9hh4hl",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-s9hh4hl"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "6.7 LinkedTransferQueue"
				}
			]
		},
		{
			"ID": "20210707224540-dhjcu2x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-dhjcu2x"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "拥有 transfer 方法，传输，当 transfer 一个元素时，如果有 take 方法阻塞等待获取元素，则不向队列中保存，直接给等待的 take 方法；如果没有消费者线程，transfer 线程将会阻塞"
				}
			]
		},
		{
			"ID": "20210707224540-vtxly09",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-vtxly09"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "情景：如果将元素放入队列，再拿给消费者线程，太慢了，如果需要的效率更高，可以使用 TransferQueue 来解决更高的并发"
				}
			]
		},
		{
			"ID": "20210707224540-79qf6o0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-79qf6o0"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T08_TransferQueue {\n\n    public static void main(String[] args) {\n\n        TransferQueue mq = new LinkedTransferQueue(); // 队列有容量\n\n        // 先让消费者线程等待\n        new Thread(() -\u003e {\n            try {\n                System.out.println(mq.take());\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n        // 再让生产者线程生产\n        try {\n            // put add offer 都不会阻塞，会添加到队列中，只有transfer才可以不放入队列等待消费者直接获取，所以transfer是有容量的\n            mq.transfer(\"aaa\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        //若先让生产者生成，再启动消费者，则transfer会阻塞，后续代码将无法执行\n        /*new Thread(() -\u003e {\n            try {\n                System.out.println(mq.take());\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }).start();*/\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-fs3ms1c",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-fs3ms1c"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "6.8 SynchronousQueue"
				}
			]
		},
		{
			"ID": "20210707224540-8w5d8vz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-8w5d8vz"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T09_SynchronousQueue {\n\n    public static void main(String[] args) throws InterruptedException {\n\n        BlockingQueue queue = new SynchronousQueue();\n\n        new Thread(() -\u003e {\n            try {\n                System.out.println(queue.take()); // 取不到就阻塞\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n        //queue.add(\"aaa\"); // IllegalStateException: Queue full  抛出异常，因为没有容量\n        //boolean b = queue.offer(\"aaa\"); // offer会返回false，因为没有容量添加失败\n        queue.put(\"aaa\");  // 会阻塞等待消费者线程获取,内部是transfer。\n\n        System.out.println(queue.size()); // 长度为0\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-frq2oib",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-frq2oib"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "6.9 DelayQueue"
				}
			]
		},
		{
			"ID": "20210707224540-5xy644x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-5xy644x"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "出队有个时间限制, 每个元素有一个等待时间, 可以按照等待时间排序元素"
				}
			]
		},
		{
			"ID": "20210707224540-61406c2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-61406c2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "DelayQueue 元素必须为 "
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "Delayed 接口"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "的实现类类型的，即必须"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "设置元素的等待时间"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "！"
				}
			]
		},
		{
			"ID": "20210707224540-t6f8h26",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-t6f8h26"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T07_DelayQueue {\n\n    public static void main(String[] args) throws InterruptedException {\n        long timestamp = System.currentTimeMillis();\n        MyTask myTask1 = new MyTask(timestamp + 1000); // 1s后执行\n        MyTask myTask2 = new MyTask(timestamp + 2000);\n        MyTask myTask3 = new MyTask(timestamp + 1500);\n        MyTask myTask4 = new MyTask(timestamp + 2500);\n        MyTask myTask5 = new MyTask(timestamp + 500);\n\n        DelayQueue\u003cMyTask\u003e tasks = new DelayQueue\u003c\u003e(); // 无界队列\n        tasks.put(myTask1);\n        tasks.put(myTask2);\n        tasks.put(myTask3);\n        tasks.put(myTask4);\n        tasks.put(myTask5);\n\n        System.out.println(tasks);  // 确实按照我们拍的顺序执行的\n\n        for (int i = 0; i \u003c tasks.size(); i++) {\n            System.out.println(tasks.take());\n        }\n    }\n\n    static class MyTask implements Delayed {\n        private long runningTime;\n\n        public MyTask(long runTime) {\n            this.runningTime = runTime;\n        }\n\n        // 这是每个元素的等待时间, 越是后加入的元素,时间等待的越长\n        @Override\n        public long getDelay(TimeUnit unit) {\n            return unit.convert(runningTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);\n        }\n\n        // 这是排序规律,可以自己指定。此处按照执行等待时间降序！加入时间升序。等的越久先执行\n        @Override\n        public int compareTo(Delayed o) {\n            return (int) (this.getDelay(TimeUnit.MILLISECONDS) - o.getDelay(TimeUnit.MILLISECONDS));\n        }\n\n        @Override\n        public String toString() {\n            return runningTime + \"\";\n        }\n    }\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-n0qc1bt",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-n0qc1bt"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "6.10 总结"
				}
			]
		},
		{
			"ID": "20210707224540-jmkxj9k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-jmkxj9k"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Map/Set:"
				}
			]
		},
		{
			"ID": "20210707224540-5ll83fu",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-5ll83fu"
			},
			"Children": [
				{
					"ID": "20210707224540-ozn5acj",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-ozn5acj"
					},
					"Children": [
						{
							"ID": "20210707224540-33rv0lf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-33rv0lf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "无并发"
								}
							]
						},
						{
							"ID": "20210707224540-872wwwz",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-872wwwz"
							},
							"Children": [
								{
									"ID": "20210707224540-qt8chv7",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-qt8chv7"
									},
									"Children": [
										{
											"ID": "20210707224540-3a7bodm",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-3a7bodm"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "HashMap"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-dgb8xzc",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-dgb8xzc"
									},
									"Children": [
										{
											"ID": "20210707224540-feqz47v",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-feqz47v"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "TreeMap"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-s8ebvy9",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-s8ebvy9"
									},
									"Children": [
										{
											"ID": "20210707224540-whr6k4t",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-whr6k4t"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "LinkedHashMap"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-r63umko",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-r63umko"
					},
					"Children": [
						{
							"ID": "20210707224540-68mpo55",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-68mpo55"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "低并发（也别用这些）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-khba75p",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-khba75p"
					},
					"Children": [
						{
							"ID": "20210707224540-l9b7emj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-l9b7emj"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "HashTable（更不应该用）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-1f1jhyn",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-1f1jhyn"
					},
					"Children": [
						{
							"ID": "20210707224540-xp8vxci",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-xp8vxci"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Collections.synchronizedMap()"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-fi04ptf",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-fi04ptf"
					},
					"Children": [
						{
							"ID": "20210707224540-qbq8fh0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-qbq8fh0"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "高并发"
								}
							]
						},
						{
							"ID": "20210707224540-kkuyi3n",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-kkuyi3n"
							},
							"Children": [
								{
									"ID": "20210707224540-2dqb087",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-2dqb087"
									},
									"Children": [
										{
											"ID": "20210707224540-zprno57",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-zprno57"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "ConcurrentHashMap - 并发高"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-aa0y5i5",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-aa0y5i5"
									},
									"Children": [
										{
											"ID": "20210707224540-vwikx0n",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-vwikx0n"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "ConcurrentSkipListMap - 并发高 且 需要排序"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-bm2cv1u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-bm2cv1u"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "队列"
				}
			]
		},
		{
			"ID": "20210707224540-fqtyi9r",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-fqtyi9r"
			},
			"Children": [
				{
					"ID": "20210707224540-f6blbza",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-f6blbza"
					},
					"Children": [
						{
							"ID": "20210707224540-z0ps8ft",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-z0ps8ft"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "无并发:"
								}
							]
						},
						{
							"ID": "20210707224540-zfb75v2",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-zfb75v2"
							},
							"Children": [
								{
									"ID": "20210707224540-8powd59",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-8powd59"
									},
									"Children": [
										{
											"ID": "20210707224540-fdq6zsj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-fdq6zsj"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "ArrayList"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-w63pl6d",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-w63pl6d"
									},
									"Children": [
										{
											"ID": "20210707224540-sn76lpx",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-sn76lpx"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "LinkedList"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-k1watvd",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-k1watvd"
					},
					"Children": [
						{
							"ID": "20210707224540-wzm9lbh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-wzm9lbh"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "低并发:"
								}
							]
						},
						{
							"ID": "20210707224540-y1duo3v",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-y1duo3v"
							},
							"Children": [
								{
									"ID": "20210707224540-ittg5g5",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-ittg5g5"
									},
									"Children": [
										{
											"ID": "20210707224540-ikoyk8z",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-ikoyk8z"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Vector"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-vaosq6g",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-vaosq6g"
									},
									"Children": [
										{
											"ID": "20210707224540-efibbv2",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-efibbv2"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Collections.synchronizedList()"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-atvm2f2",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-atvm2f2"
					},
					"Children": [
						{
							"ID": "20210707224540-vhr4hbd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-vhr4hbd"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "写少读多:"
								}
							]
						},
						{
							"ID": "20210707224540-efhwy1k",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-efhwy1k"
							},
							"Children": [
								{
									"ID": "20210707224540-amy8x9n",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-amy8x9n"
									},
									"Children": [
										{
											"ID": "20210707224540-3ef52qu",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-3ef52qu"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "CopyOnWriteList（监听器队列等）"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-pk8pizo",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-pk8pizo"
					},
					"Children": [
						{
							"ID": "20210707224540-u5mulfr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-u5mulfr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "高并发"
								}
							]
						},
						{
							"ID": "20210707224540-8lstzn8",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-8lstzn8"
							},
							"Children": [
								{
									"ID": "20210707224540-mhxo3e2",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-mhxo3e2"
									},
									"Children": [
										{
											"ID": "20210707224540-0wu1tgh",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-0wu1tgh"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Queue："
												}
											]
										},
										{
											"ID": "20210707224540-l6ef8pr",
											"Type": "NodeList",
											"ListData": {
												"Tight": true,
												"BulletChar": 45,
												"Padding": 2,
												"Marker": "LQ==",
												"Num": -1
											},
											"Properties": {
												"id": "20210707224540-l6ef8pr"
											},
											"Children": [
												{
													"ID": "20210707224540-nard46q",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707224540-nard46q"
													},
													"Children": [
														{
															"ID": "20210707224540-zlyl7va",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707224540-zlyl7va"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "ConcurrentLinkedQueue 非阻塞同步（加锁）队列。为什么没有 ConcurrentArrayQueue"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-wiapluv",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-wiapluv"
									},
									"Children": [
										{
											"ID": "20210707224540-lblya0d",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-lblya0d"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "BlockQueue 阻塞队列"
												}
											]
										},
										{
											"ID": "20210707224540-5q9fypn",
											"Type": "NodeList",
											"ListData": {
												"Tight": true,
												"BulletChar": 45,
												"Padding": 2,
												"Marker": "LQ==",
												"Num": -1
											},
											"Properties": {
												"id": "20210707224540-5q9fypn"
											},
											"Children": [
												{
													"ID": "20210707224540-9b9x6c1",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707224540-9b9x6c1"
													},
													"Children": [
														{
															"ID": "20210707224540-26jewb9",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707224540-26jewb9"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "LinkedBlockingQueue（无界队列）"
																}
															]
														}
													]
												},
												{
													"ID": "20210707224540-w63wbd1",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707224540-w63wbd1"
													},
													"Children": [
														{
															"ID": "20210707224540-80t6vdp",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707224540-80t6vdp"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "ArrayBlockingQueue （有界队列）"
																}
															]
														}
													]
												},
												{
													"ID": "20210707224540-vzfitlr",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707224540-vzfitlr"
													},
													"Children": [
														{
															"ID": "20210707224540-91tf8j2",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707224540-91tf8j2"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "LinkedTransferQueue（阻塞等待消费者消费，有容量。游戏服务器转发消息等）"
																}
															]
														}
													]
												},
												{
													"ID": "20210707224540-vkkfbk4",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707224540-vkkfbk4"
													},
													"Children": [
														{
															"ID": "20210707224540-idvw0g2",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707224540-idvw0g2"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "SynchronousQueue（容量为 0 的 TransferQueue）"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-3ya6usb",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-3ya6usb"
									},
									"Children": [
										{
											"ID": "20210707224540-veq5h6h",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-veq5h6h"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "DelayQueue 执行定时任务"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-g1f5xcd",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224540-g1f5xcd"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "7 线程池"
				}
			]
		},
		{
			"ID": "20210707224540-t5q5cu0",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-t5q5cu0"
			},
			"Children": [
				{
					"ID": "20210707224540-uxnect9",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-uxnect9"
					},
					"Children": [
						{
							"ID": "20210707224540-mgf4npf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-mgf4npf"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "线程池"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "：其实就是一个"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "容纳多个线程的容器"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，其中的"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "线程可以反复使用"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，省去了频繁创建线程对象的操作， 无需反复创建线程而消耗过多资源。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-7e4l841",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-7e4l841"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "7.1 Executor"
				}
			]
		},
		{
			"ID": "20210707224540-p7dkj1j",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20210707224540-p7dkj1j"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e "
				},
				{
					"ID": "20210707224540-8yngm24",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210707224540-8yngm24"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "Executor /'eksə.kjutər/ n. 执行器；执行者；执行者号"
						}
					]
				},
				{
					"ID": "20210707224540-g01uy24",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210707224540-g01uy24"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "execute /ˈek.sə.kjuːt/ v. 执行；实施；实行；处死"
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-kcw478u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-kcw478u"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java 里面线程池的"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "顶级接口"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "是 "
				},
				{
					"Type": "NodeCodeSpan",
					"CodeMarkerLen": 1,
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker",
							"Data": "`"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "java.util.concurrent.Executor"
						},
						{
							"Type": "NodeCodeSpanCloseMarker",
							"Data": "`"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，但是严格意义上讲它只是一个"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "执行线程的工具"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210707224540-17hz0w2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-17hz0w2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "传入一个 Runnable 接口"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，传递给 Executor 后由 "
				},
				{
					"Type": "NodeCodeSpan",
					"CodeMarkerLen": 1,
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker",
							"Data": "`"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "execute(Runnable command)"
						},
						{
							"Type": "NodeCodeSpanCloseMarker",
							"Data": "`"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "方法定义如何执行任务。"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "需要自己写实现类"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210707224540-uufaya2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-uufaya2"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T01_MyExecutor implements Executor {\n\n\n    public static void main(String[] args) {\n        new T01_MyExecutor().execute(() -\u003e System.out.println(\"hello executor\"));\n    }\n\n    @Override\n    public void execute(Runnable command) {\n        //command.run(); //普通的方法调用\n         new Thread(command).start(); //由Thread.start方法开启，并由JVM来调用其run方法\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-8etl1ne",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-8etl1ne"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "7.2 ExecutorService"
				}
			]
		},
		{
			"ID": "20210707224540-i99fgii",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-i99fgii"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "真正的线程池"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "接口"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "是 "
				},
				{
					"Type": "NodeCodeSpan",
					"CodeMarkerLen": 1,
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker",
							"Data": "`"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "java.util.concurrent.ExecutorService"
						},
						{
							"Type": "NodeCodeSpanCloseMarker",
							"Data": "`"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，继承自 Executor 接口。"
				}
			]
		},
		{
			"ID": "20210707224540-0yhtl2w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-0yhtl2w"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个服务，在后台一直运行，等待任务抛入(submit)，并执行，抛入的任务又分为两个类型：传入"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "Callable"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "接口实现类（有返回值）；传入 Runnable 接口实现类（无返回值）"
				}
			]
		},
		{
			"ID": "20210707224540-l0og1rq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-l0og1rq"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T02_MyExecutorService implements ExecutorService {\n\n    @Override\n    public void shutdown() {\n\n    }\n\n    @Override\n    public List\u003cRunnable\u003e shutdownNow() {\n        return null;\n    }\n\n    @Override\n    public boolean isShutdown() {\n        return false;\n    }\n\n    @Override\n    public boolean isTerminated() {\n        return false;\n    }\n\n    @Override\n    public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException {\n        return false;\n    }\n\n    @Override\n    public \u003cT\u003e Future\u003cT\u003e submit(Callable\u003cT\u003e task) {\n        return null;\n    }\n\n    @Override\n    public \u003cT\u003e Future\u003cT\u003e submit(Runnable task, T result) {\n        return null;\n    }\n\n    @Override\n    public Future\u003c?\u003e submit(Runnable task) {\n        return null;\n    }\n\n    @Override\n    public \u003cT\u003e List\u003cFuture\u003cT\u003e\u003e invokeAll(Collection\u003c? extends Callable\u003cT\u003e\u003e tasks) throws InterruptedException {\n        return null;\n    }\n\n    @Override\n    public \u003cT\u003e List\u003cFuture\u003cT\u003e\u003e invokeAll(Collection\u003c? extends Callable\u003cT\u003e\u003e tasks, long timeout, TimeUnit unit) throws InterruptedException {\n        return null;\n    }\n\n    @Override\n    public \u003cT\u003e T invokeAny(Collection\u003c? extends Callable\u003cT\u003e\u003e tasks) throws InterruptedException, ExecutionException {\n        return null;\n    }\n\n    @Override\n    public \u003cT\u003e T invokeAny(Collection\u003c? extends Callable\u003cT\u003e\u003e tasks, long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n        return null;\n    }\n\n    @Override\n    public void execute(Runnable command) {\n\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-hnv3h1q",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-hnv3h1q"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "7.3 Executors"
				}
			]
		},
		{
			"ID": "20210707224540-u0x1s01",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-u0x1s01"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "就是工具类/工厂类"
				}
			]
		},
		{
			"ID": "20210707224540-mhibz5m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-mhibz5m"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "方建议"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "使用"
						},
						{
							"Type": "NodeCodeSpan",
							"CodeMarkerLen": 1,
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker",
									"Data": "`"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "java.util.concurrent.Executors"
								},
								{
									"Type": "NodeCodeSpanCloseMarker",
									"Data": "`"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "线程池工厂类"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "来创建线程池对象（如 7.5，还有很多其他功能）"
				}
			]
		},
		{
			"ID": "20210707224540-peqdxev",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-peqdxev"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "java.util.concurrent.Executors"
				}
			]
		},
		{
			"ID": "20210707224540-pdliyx2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-pdliyx2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Factory and utility methods for "
				},
				{
					"Type": "NodeLink",
					"Children": [
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "Executor"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "#"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": ", "
				},
				{
					"Type": "NodeLink",
					"Children": [
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "ExecutorService"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "#"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": ", "
				},
				{
					"Type": "NodeLink",
					"Children": [
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "ScheduledExecutorService"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "#"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": ", "
				},
				{
					"Type": "NodeLink",
					"Children": [
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "ThreadFactory"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "#"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": ", and "
				},
				{
					"Type": "NodeLink",
					"Children": [
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "Callable"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "#"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " classes defined in this package. This class supports the following kinds of methods:"
				}
			]
		},
		{
			"ID": "20210707224540-8yamav7",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-8yamav7"
			},
			"Children": [
				{
					"ID": "20210707224540-2bsrym5",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-2bsrym5"
					},
					"Children": [
						{
							"ID": "20210707224540-qa7j2x3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-qa7j2x3"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Methods that create and return an "
								},
								{
									"Type": "NodeLink",
									"Children": [
										{
											"Type": "NodeOpenBracket",
											"Data": "["
										},
										{
											"Type": "NodeLinkText",
											"Data": "ExecutorService"
										},
										{
											"Type": "NodeCloseBracket",
											"Data": "]"
										},
										{
											"Type": "NodeOpenParen",
											"Data": "("
										},
										{
											"Type": "NodeLinkDest",
											"Data": "#"
										},
										{
											"Type": "NodeCloseParen",
											"Data": ")"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " set up with commonly useful configuration settings."
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-0doc35k",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-0doc35k"
					},
					"Children": [
						{
							"ID": "20210707224540-kta0go5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-kta0go5"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Methods that create and return a "
								},
								{
									"Type": "NodeLink",
									"Children": [
										{
											"Type": "NodeOpenBracket",
											"Data": "["
										},
										{
											"Type": "NodeLinkText",
											"Data": "ScheduledExecutorService"
										},
										{
											"Type": "NodeCloseBracket",
											"Data": "]"
										},
										{
											"Type": "NodeOpenParen",
											"Data": "("
										},
										{
											"Type": "NodeLinkDest",
											"Data": "#"
										},
										{
											"Type": "NodeCloseParen",
											"Data": ")"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " set up with commonly useful configuration settings."
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-p1dtby1",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-p1dtby1"
					},
					"Children": [
						{
							"ID": "20210707224540-9c5mnq4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-9c5mnq4"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Methods that create and return a \"wrapped\" ExecutorService, that disables reconfiguration by making implementation-specific methods inaccessible."
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-noyp51t",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-noyp51t"
					},
					"Children": [
						{
							"ID": "20210707224540-a86g0o4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-a86g0o4"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Methods that create and return a "
								},
								{
									"Type": "NodeLink",
									"Children": [
										{
											"Type": "NodeOpenBracket",
											"Data": "["
										},
										{
											"Type": "NodeLinkText",
											"Data": "ThreadFactory"
										},
										{
											"Type": "NodeCloseBracket",
											"Data": "]"
										},
										{
											"Type": "NodeOpenParen",
											"Data": "("
										},
										{
											"Type": "NodeLinkDest",
											"Data": "#"
										},
										{
											"Type": "NodeCloseParen",
											"Data": ")"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " that sets newly created threads to a known state."
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-fsv2u46",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-fsv2u46"
					},
					"Children": [
						{
							"ID": "20210707224540-v5jw7qj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-v5jw7qj"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Methods that create and return a "
								},
								{
									"Type": "NodeLink",
									"Children": [
										{
											"Type": "NodeOpenBracket",
											"Data": "["
										},
										{
											"Type": "NodeLinkText",
											"Data": "Callable"
										},
										{
											"Type": "NodeCloseBracket",
											"Data": "]"
										},
										{
											"Type": "NodeOpenParen",
											"Data": "("
										},
										{
											"Type": "NodeLinkDest",
											"Data": "#"
										},
										{
											"Type": "NodeCloseParen",
											"Data": ")"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " out of other closure-like forms, so they can be used in execution methods requiring "
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "Callable"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-r2m06mq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-r2m06mq"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "7.4 ThreadPool"
				}
			]
		},
		{
			"ID": "20210707224540-l28xe8t",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-l28xe8t"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T05_ThreadPool {\n\n    public static void main(String[] args) throws InterruptedException {\n\n        ExecutorService service = Executors.newFixedThreadPool(5); // 固定长度的线程池\n        for (int i = 0; i \u003c 6; i++) { // 执行六个任务,  在只有五个固定容量的线程池中\n            service.execute(() -\u003e {\n                try {\n                    TimeUnit.MILLISECONDS.sleep(500);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(Thread.currentThread().getName());\n            });\n        }\n        // [Running, pool size = 5, active threads = 5, queued tasks = 1, completed tasks = 0]\n        // 内部一般是BlockingQueue\n        // pool size =  5  线程池的容量\n        // active thread = 5 激活的线程队列长度\n        // queued tasks = 1 等待处理任务长度\n        // completed task = 0 完成执行的任务数量\n        System.out.println(service);\n\n        // 关闭线程池\n        service.shutdown(); // 所有任务未执行完毕，不会关闭，会Shutting down\n        System.out.println(service.isTerminated()); // false 是否结束\n        System.out.println(service.isShutdown()); // true 状态是否关闭\n        //java.util.concurrent.ThreadPoolExecutor@3b9a45b3[Shutting down, pool size = 5, active threads = 5, queued tasks = 1, completed tasks = 0]\n        System.out.println(service);\n\n        TimeUnit.SECONDS.sleep(5); // 5s 后肯定执行完成了\n        System.out.println(service.isTerminated()); // true\n        System.out.println(service.isShutdown()); // true\n        // java.util.concurrent.ThreadPoolExecutor@3b9a45b3[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 6]\n        System.out.println(service);\n\n        // 线程池中维护了两个任务队列\n        // 1. 未执行的任务队列\n        // 2. 已执行的任务队列\n    }\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-ryxqnww",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-ryxqnww"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "7.5 Callable/Future"
				}
			]
		},
		{
			"ID": "20210707224540-9mq05hq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-9mq05hq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "The "
				},
				{
					"Type": "NodeCodeSpan",
					"CodeMarkerLen": 1,
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker",
							"Data": "`"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "Callable"
						},
						{
							"Type": "NodeCodeSpanCloseMarker",
							"Data": "`"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " interface is similar to "
				},
				{
					"Type": "NodeLink",
					"Children": [
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "java.lang.Runnable"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "#"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": ", in that both are designed for classes whose instances are potentially executed by another thread. A "
				},
				{
					"Type": "NodeCodeSpan",
					"CodeMarkerLen": 1,
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker",
							"Data": "`"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "Runnable"
						},
						{
							"Type": "NodeCodeSpanCloseMarker",
							"Data": "`"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": ", however, "
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "does not return a result"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " and "
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "cannot throw a checked exception"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "."
				}
			]
		},
		{
			"ID": "20210707224540-2xgecht",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-2xgecht"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T03_Callable implements Callable {\n    /**\n     * Computes a result, or throws an exception if unable to do so.\n     *\n     * @return computed result\n     * @throws Exception if unable to compute a result\n     */\n    @Override\n    public Object call() throws Exception {\n        return null;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-r6z9pq8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-r6z9pq8"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"CodeMarkerLen": 1,
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker",
							"Data": "`"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "java.util.concurrent public interface Future\u003cV\u003e"
						},
						{
							"Type": "NodeCodeSpanCloseMarker",
							"Data": "`"
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-tq3zxw0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-tq3zxw0"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "A Future represents the result of an asynchronous computation. Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation. The result can only be retrieved using method get when the computation has completed, blocking if necessary until it is ready. Cancellation is performed by the cancel method. Additional methods are provided to determine if the task completed normally or was cancelled. Once a computation has completed, the computation cannot be cancelled. If you would like to use a Future for the sake of cancellability but not provide a usable result, you can declare types of the form Future\u003c?\u003e and return null as a result of the underlying task."
				},
				{
					"Type": "NodeSoftBreak",
					"Data": "\n"
				},
				{
					"Type": "NodeText",
					"Data": "Sample Usage (Note that the following classes are all made-up.)"
				}
			]
		},
		{
			"ID": "20210707224540-6tcu2ky",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-6tcu2ky"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T06_Future {\n\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n\n        // 未来任务, 既实现了Runnable 也实现了 Future。如下代码为Callable的实现类。不推荐！\n        FutureTask\u003cInteger\u003e task = new FutureTask\u003c\u003e(() -\u003e {\n            TimeUnit.MILLISECONDS.sleep(500);\n            return 100;\n        });\n        new Thread(task).start();\n\n        System.out.println(task.get()); // 阻塞等待任务执行完成, 获取到返回值\n\n        System.out.println(\"-------------------------------\");\n\n        //********************************\n        // 使用ExecutorService的submit替代FutureTask\n        ExecutorService service = Executors.newFixedThreadPool(5);\n        Future\u003cInteger\u003e result = service.submit(() -\u003e {\n            TimeUnit.MILLISECONDS.sleep(500);\n            return 1;\n        });\n        System.out.println(result.isDone()); // false 执行未完毕\n        System.out.println(result.get()); // 1 ，阻塞方法，执行完毕才可以获得结果\n        System.out.println(result.isDone()); // true  执行已完毕\n        System.out.println(result.get()); // 一直等待\n        System.out.println(service.shutdownNow()); // 立即关闭线程池\n\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-fmwk2vo",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-fmwk2vo"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "7.6 newFixedThreadPool"
				}
			]
		},
		{
			"ID": "20210707224540-vumz88s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-vumz88s"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "固定容量线程池"
				}
			]
		},
		{
			"ID": "20210707224540-injgjr4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-injgjr4"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//并行计算\npublic class T07_ParallelComputing {\n\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        long start = System.currentTimeMillis();\n        List\u003cInteger\u003e result = getPrime(1, 200000);\n        long end = System.currentTimeMillis();\n        System.out.println(end - start); // 使用单线程计算的时间\n\n        ExecutorService service = Executors.newFixedThreadPool(4);//4核CPU，可以使用4个线程，效率高。双核用俩任务也效率不明显\n        ComputeTask t1 = new ComputeTask(1, 80000);\n        ComputeTask t2 = new ComputeTask(80001, 130000);\n        ComputeTask t3 = new ComputeTask(130001, 170000);\n        ComputeTask t4 = new ComputeTask(170001, 200000);  // 这里为什么不均分? 因为数字越大, 质数的数量就越多\n        // 提交任务给ExecutorService执行\n        Future\u003cList\u003cInteger\u003e\u003e f1 = service.submit(t1);\n        Future\u003cList\u003cInteger\u003e\u003e f2 = service.submit(t2);\n        Future\u003cList\u003cInteger\u003e\u003e f3 = service.submit(t3);\n        Future\u003cList\u003cInteger\u003e\u003e f4 = service.submit(t4);\n        // 执行开始\n        start = System.currentTimeMillis();\n        f1.get();\n        f2.get();\n        f3.get();\n        f4.get();\n        end = System.currentTimeMillis();\n        System.out.println(end - start);\n        service.shutdown();\n    }\n\n    static class ComputeTask implements Callable\u003cList\u003cInteger\u003e\u003e {\n\n        private int start, end;\n\n        ComputeTask (int start, int end) {\n            this.start = start;\n            this.end = end;\n        }\n\n        @Override\n        public List\u003cInteger\u003e call() throws Exception {\n            return getPrime(start, end);\n        }\n    }\n\n\n    static boolean isPrime(int num) {\n        for (int i = 2; i \u003c num / 2; i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    /**\n     * 返回指定范围的质数列表\n     */\n    static List\u003cInteger\u003e getPrime(int start, int end) {\n        List\u003cInteger\u003e list = new ArrayList\u003c\u003e();\n        for (int i = 0; i \u003c end; i++) {\n            if (isPrime(i)) list.add(i);\n        }\n        return list;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-uew081h",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-uew081h"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "7.7 newCachedThreadPool"
				}
			]
		},
		{
			"ID": "20210707224540-qkqjs0p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-qkqjs0p"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可缓存的线程，任意长度"
				}
			]
		},
		{
			"ID": "20210707224540-4xbxkr0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-4xbxkr0"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当有个请求进入线程池内， 线程池将会启用一个线程，当再次有个请求进入线程池内，并且上个线程未结束，仍然会启用一个线程，当有线程执行完毕后，这个线程不会被清除，而是被缓存，当有请求进入时, 直接使用缓存线程调用。"
				}
			]
		},
		{
			"ID": "20210707224540-ktkvwpt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-ktkvwpt"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "跟 fixedThreadPool 类似, 只不过没有上限(最多 Integer 最大值), 是一种弹性操作。当线程一直不被使用, 缓存最多持续 1 分钟("
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "AliveTime"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "默认值),就会被线程池销毁。内部是 "
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "DelayedWorkQueue"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-aq202zj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-aq202zj"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T08_CachedThreadPool {\n\n    public static void main(String[] args) {\n        ExecutorService service = Executors.newCachedThreadPool();\n        // pool size 为0\n        System.out.println(service); // java.util.concurrent.ThreadPoolExecutor@7f31245a[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]cu'\n\n        for (int i = 0; i \u003c 2; i++) {\n            service.execute(() -\u003e {\n                try {\n                    TimeUnit.MILLISECONDS.sleep(500);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(Thread.currentThread().getName());\n            });\n        }\n        // pool size 变为2\n        System.out.println(service); // java.util.concurrent.ThreadPoolExecutor@7f31245a[Running, pool size = 2, active threads = 2, queued tasks = 0, completed tasks = 0]\n\n\n        try {\n            TimeUnit.SECONDS.sleep(80); // 最多持续1分钟,这里sleep80s\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // pool size 变为0\n        System.out.println(service); // java.util.concurrent.ThreadPoolExecutor@7f31245a[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 2]\n\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-gsxb642",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-gsxb642"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "7.8 newSingleThreadExecutor"
				}
			]
		},
		{
			"ID": "20210707224540-3h26yqy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-3h26yqy"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程池中只有一个线程，保证线程执行的时序性"
				}
			]
		},
		{
			"ID": "20210707224540-6fr80w7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-6fr80w7"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T09_SingleThreadPool {\n\n    public static void main(String[] args) {\n        ExecutorService service = Executors.newSingleThreadExecutor();\n        for (int i = 0; i \u003c 5; i++) {\n            final int j = i;\n            service.execute(() -\u003e {\n                System.out.println(j + \" \" + Thread.currentThread().getName());\n            });\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-cuyrpzw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-cuyrpzw"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "7.9 newScheduledThreadPool"
				}
			]
		},
		{
			"ID": "20210707224540-q6ywr1g",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20210707224540-q6ywr1g"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e "
				},
				{
					"ID": "20210707224540-6q3x4lk",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210707224540-6q3x4lk"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "Scheduled: 计划中的,定时的"
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-h9o106e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-h9o106e"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "执行定时的任务，类似 Delay，可以替代 Timer"
				}
			]
		},
		{
			"ID": "20210707224540-kioqpmt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-kioqpmt"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T10_ScheduledPool {\n\n    public static void main(String[] args) {\n        ScheduledExecutorService service = Executors.newScheduledThreadPool(4);\n        // 使用固定的频率执行某个任务\n        // 四个参数\n        // command: 执行的任务\n        // initialDelay: 第一次执行延时多久执行\n        // period: 每隔多久执行一次这个任务\n        // unit: 时间单位\n        service.scheduleAtFixedRate(() -\u003e {\n            try {\n                TimeUnit.MILLISECONDS.sleep(new Random().nextInt(1000));\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(Thread.currentThread().getName());\n        }, 0, 500, TimeUnit.MILLISECONDS);  // 每隔500ms打印一下线程名称\n        // 线程执行1000ms,而每sleep 500 就要新启动一个线程\n        // 上个线程未执行完毕,会启用新的线程执行\n        // 如果线程池已满,只有延时\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-jd3rlgo",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-jd3rlgo"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "7.10 newWorkStealingPool"
				}
			]
		},
		{
			"ID": "20210707224540-fagq1hg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-fagq1hg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "工作窃取线程池"
				}
			]
		},
		{
			"ID": "20210707224540-803gabd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-803gabd"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设共有三个线程 A, B, C 同时执行，每个线程都维护自己的任务队列。当 A，B 线程池尚未处理任务结束，而 C 已经处理完毕，则 C 线程会从 A 或者 B 中窃取任务执行，这就叫工作窃取"
				}
			]
		},
		{
			"ID": "20210707224540-zh30ecu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-zh30ecu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "WorkStealingPool 背后是使用 ForkJoinPool 实现的"
				}
			]
		},
		{
			"ID": "20210707224540-xdq02ny",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-xdq02ny"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T11_WorkStealingPool {\n\n    public static void main(String[] args) throws IOException {\n        // CPU 核数（其实是线程数，我的电脑是2核4线程）\n        System.out.println(Runtime.getRuntime().availableProcessors());\n\n        // workStealingPool 会自动启动cpu核数个线程去执行任务\n        ExecutorService service = Executors.newWorkStealingPool();\n        service.execute(new R(1000));  // 我的cpu核数为4 启动5个线程,其中第一个是1s执行完毕,其余都是2s执行完毕,\n                                                // 有一个任务会进行等待,当第一个执行完毕后,会再次偷取第5个任务执行\n        for (int i = 0; i \u003c Runtime.getRuntime().availableProcessors(); i++) {\n            service.execute(new R(2000));\n        }\n\n        // 因为work stealing 是deamon线程,即后台线程,精灵线程,守护线程\n        // 所以当main方法结束时, 此方法虽然还在后台运行,但是无输出\n        // 可以通过对主线程阻塞解决\n        System.in.read();\n    }\n\n    static class R implements Runnable {\n\n        int time;\n\n        R(int time) {\n            this.time = time;\n        }\n\n        @Override\n        public void run() {\n            try {\n                TimeUnit.MILLISECONDS.sleep(time);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(Thread.currentThread().getName() + \"  \" + time);\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-bxobbxz",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-bxobbxz"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "7.11 ForkJoinPool"
				}
			]
		},
		{
			"ID": "20210707224540-fdd6bg1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-fdd6bg1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "分而治之：Fork：分叉；Join：合并；"
				}
			]
		},
		{
			"ID": "20210707224540-rrbq6ib",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-rrbq6ib"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "将一个任务拆分多个任务执行(可以无限切分)，然后将结果合并。1.7 加的 ForkJoinPool"
				}
			]
		},
		{
			"ID": "20210707224540-neo17tk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-neo17tk"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如大量的并行计算, 如下: 求 1000000 个数字之和, 使用多线程"
				}
			]
		},
		{
			"ID": "20210707224540-4xgahli",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-4xgahli"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T12_ForkJoinPool {\n\n    static int[] nums = new int[100_0000];\n    static final int MAX_NUM = 5_0000; // 每个线程最多可以运行5万个数字相加\n    static Random random = new Random();\n\n    // 初始化这100_000个数字, 每个数字范围在100之内\n    static {\n\n        for (int i = 0; i \u003c nums.length; i++) {\n            nums[i] = random.nextInt(100);\n        }\n        // 所有数字和, 事先计算:\n        //System.out.println(Arrays.stream(nums).sum()); // 使用单线程stream api 进行求和\n    }\n\n    /**\n     * RecursiveAction: 递归操作 没有返回值\n     * RecursiveTask: 递归操作,有返回值\n     */\n    /*\n    static class AddTask extends RecursiveAction {\n\n        int start, end;\n\n        AddTask(int start, int end) {\n            this.start = start;\n            this.end = end;\n        }\n\n        @Override\n        protected void compute() {\n\n            // 进行计算\n            // 如果计算的数的和的范围 小于 MAX_NUM, 进行计算,否则进行 fork\n            if (end - start \u003c= MAX_NUM) {\n                long sum = 0;\n                for (int i = start; i \u003c end; i++) {\n                    sum += nums[i];\n                }\n                System.out.println(\"sum = \" + sum);\n            } else {\n                int middle = (end - start) / 2;\n                AddTask subTask1 = new AddTask(start, middle);\n                AddTask subTask2 = new AddTask(middle, end);\n                subTask1.fork();\n                subTask2.fork();\n            }\n        }\n    }\n    */\n\n    static class AddTask2 extends RecursiveTask\u003cLong\u003e {\n\n        int start, end;\n\n        AddTask2(int start, int end) {\n            this.start = start;\n            this.end = end;\n        }\n\n        @Override\n        protected Long compute() {\n            // 进行计算\n            // 如果计算的数的和的范围 小于 MAX_NUM, 进行计算,否则进行 fork\n            if (end - start \u003c= MAX_NUM) {\n                long sum = 0;\n                for (int i = start; i \u003c end; i++) {\n                    sum += nums[i];\n                }\n                return sum;\n            } else {\n                int middle = start + (end - start) / 2; // 注意这里，如果有问题，会抛出java.lang.NoClassDefFoundError: Could not initialize class java.util.concurrent.locks.AbstractQueuedSynchronizer$Node 异常\n                AddTask2 subTask1 = new AddTask2(start, middle);\n                AddTask2 subTask2 = new AddTask2(middle, end);\n                subTask1.fork();\n                subTask2.fork();\n                return subTask1.join() + subTask2.join();\n            }\n        }\n    }\n\n    // 运行\n    public static void main(String[] args) throws IOException {\n        ForkJoinPool fjp = new ForkJoinPool();\n        AddTask2 task = new AddTask2(0, nums.length);\n        fjp.execute(task);\n        System.out.println(task.join());\n\n        //System.in.read();\n    }\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-azgtw3z",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-azgtw3z"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "7.12 ThreadPoolExecutor"
				}
			]
		},
		{
			"ID": "20210707224540-imowuar",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-imowuar"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程池的实现原理，除了 ForkJoinPool 与 WorkStealingPool 线程池，其他线程池大部分线程池背后都是 ThreadPoolExecutor"
				}
			]
		},
		{
			"ID": "20210707224540-yntth8g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-yntth8g"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以自定义线程"
				}
			]
		},
		{
			"ID": "20210707224540-3rr8ltl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-3rr8ltl"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T13_ThreadPoolExecutor {\n\n    /*\n    构造 ThreadPoolExecutor:\n    corePoolSize            线程池核心线程数，最小线程数\n    maximumPoolSize         最大线程数\n    keepAlive               线程空闲后存活时间， 0代表永远不会消失\n    timeUnit                单位\n    BlockingQueue workQueue 任务容器\n\n    具体查看每个线程池\n     */\n    public static void main(String[] args) {\n\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-eusb4gq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-eusb4gq"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "7.13 ParallelStreamAPI"
				}
			]
		},
		{
			"ID": "20210707224540-m1k65cw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-m1k65cw"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class T14_ParallelStreamAPI {\n\n    public static void main(String[] args) {\n\n        List\u003cInteger\u003e nums = new ArrayList\u003c\u003e();\n        Random random = new Random();\n        for (int i = 0; i \u003c 1_0000; i++) {\n            nums.add(100_0000 + random.nextInt(100_0000));\n        }\n\n        long start, end;\n\n        start = System.currentTimeMillis();\n        nums.stream().forEach(v -\u003e isPrime(v));\n        end =System.currentTimeMillis();\n\n        System.out.println(end - start);\n\n\n        // 使用parallel stream api\n\n        start = System.currentTimeMillis();\n        nums.parallelStream().forEach(v -\u003e isPrime(v));\n        end =System.currentTimeMillis();\n\n        System.out.println(end - start);\n    }\n\n    static boolean isPrime(int num) {\n        for (int i = 2; i \u003c num / 2; i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-2zky6tx",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224540-2zky6tx"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "8 面试题"
				}
			]
		},
		{
			"ID": "20210707224540-8b39wea",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-8b39wea"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "1 死锁问题(哲学家就餐)"
				}
			]
		},
		{
			"ID": "20210707224540-ni1w93f",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-ni1w93f"
			},
			"Children": [
				{
					"ID": "20210707224540-xgrv90j",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-xgrv90j"
					},
					"Children": [
						{
							"ID": "20210707224540-ed7gj60",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-ed7gj60"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "指两个或两个以上的线程在执行的过程中，因"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "争夺资源"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "产生的一种"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "互相等待"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "现象"
								}
							]
						},
						{
							"ID": "20210707224540-ardjazj",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707224540-ardjazj"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class DieLockDemo {\n    public static Object lock1 = new Object(); // 锁必须不一样，对应不同资源的操作\n    public static Object lock2 = new Object(); // 锁必须不一样，对应不同资源的操作\n\n    public static void main(String[] args) {\n        new Thread(() -\u003e {\n            synchronized (lock1) {\n                System.out.println(\"t1 get lock1\");\n                //Thread.sleep(1000); // 可以让t1 sleep一会，让t2线程可以有机会执行，提高死锁概率\n                synchronized (lock2) {\n                    System.out.println(\"t1 get lock2\");\n                }\n            }\n        }, \"t1\").start();\n\n        new Thread(() -\u003e {\n            synchronized (lock2) {\n                System.out.println(\"t2 get lock2\");\n                synchronized (lock1) {\n                    System.out.println(\"t2 get lock1\");\n                }\n            }\n        }, \"t2\").start();\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-oeed3g5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-oeed3g5"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "2 监控容器的元素数目"
				}
			]
		},
		{
			"ID": "20210707224540-uuuvbml",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-uuuvbml"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现一个容器，提供两个方法，add，size。写两个线程，线程 1 添加 10 个元素到容器中，线程 2 实现监控元素的个数，当个数到达 5 时，线程 2 给出提示并（线程 2）结束"
				}
			]
		},
		{
			"ID": "20210707224540-xh316gt",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 3,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210707224540-xh316gt"
			},
			"Children": [
				{
					"ID": "20210707224540-n702vsg",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210707224540-n702vsg"
					},
					"Children": [
						{
							"ID": "20210707224540-ihr6zhx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-ihr6zhx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "实现监控，需要用到"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "volitile"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "关键字，使 list 发生变化时，主动通知其他线程来更新工作空间"
								}
							]
						},
						{
							"ID": "20210707224540-nicx3b0",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707224540-nicx3b0"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class MyContainer2 {\n\n    private volatile List\u003cObject\u003e list = new ArrayList\u003c\u003e();\n\n    public void add(Object ele) {\n        list.add(ele);\n    }\n\n    public int size() {\n        return list.size();\n    }\n\n    public static void main(String[] args) {\n\n        MyContainer2 container = new MyContainer2();\n\n        new Thread(() -\u003e {\n            for (int i = 0; i \u003c 10; i++) {\n                container.add(new Object());\n                System.out.println(\"add \" + i);\n                try {\n                    TimeUnit.SECONDS.sleep(1);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n\n            }\n        }, \"t1\").start();\n\n        new Thread(() -\u003e {\n            while (true) {\n                if (container.size() == 5) {\n                    break;\n                }\n            }\n            System.out.println(\"监测到容器长度为5，线程2立即退出\");\n        }, \"t2\").start();\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210707224540-6e755zt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-6e755zt"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "上述代码，共有以下几个问题："
								}
							]
						},
						{
							"ID": "20210707224540-ojfw6qs",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1,
								"Start": 1,
								"Delimiter": 46,
								"Padding": 3,
								"Marker": "MQ==",
								"Num": 1
							},
							"Properties": {
								"id": "20210707224540-ojfw6qs"
							},
							"Children": [
								{
									"ID": "20210707224540-xc5ckhz",
									"Type": "NodeListItem",
									"Data": "1",
									"ListData": {
										"Typ": 1,
										"Start": 1,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "MQ==",
										"Num": 1
									},
									"Properties": {
										"id": "20210707224540-xc5ckhz"
									},
									"Children": [
										{
											"ID": "20210707224540-pouks2w",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-pouks2w"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "不够精确，当 container.size == 5 还未执行 break 时，有可能被其他线程抢占；或者 container.add() 之后，还未打印，就被 t2 判断 size 为 5 直接推出了"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-s1q3whd",
									"Type": "NodeListItem",
									"Data": "2",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 2,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "Mg==",
										"Num": 2
									},
									"Properties": {
										"id": "20210707224540-s1q3whd"
									},
									"Children": [
										{
											"ID": "20210707224540-pyjatf4",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-pyjatf4"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "损耗性能，t2 线程，一直在走 while 循环，很浪费性能"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-ig8ie8z",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210707224540-ig8ie8z"
					},
					"Children": [
						{
							"ID": "20210707224540-e2glir1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-e2glir1"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "采用等待唤醒机制（必须在同步代码中）"
								}
							]
						},
						{
							"ID": "20210707224540-7xy29zy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-7xy29zy"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用 wait 和 notify："
								}
							]
						},
						{
							"ID": "20210707224540-22qmbiu",
							"Type": "NodeList",
							"ListData": {
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-22qmbiu"
							},
							"Children": [
								{
									"ID": "20210707224540-jvnlvpn",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-jvnlvpn"
									},
									"Children": [
										{
											"ID": "20210707224540-vkta0bx",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-vkta0bx"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "wait()与 notify() 方法的调用必须"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "在同步代码块中"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-0u8w2cj",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-0u8w2cj"
									},
									"Children": [
										{
											"ID": "20210707224540-wrku4e3",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-wrku4e3"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "wait 会释放锁，notify 不会释放锁"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-h2tgqnv",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-h2tgqnv"
									},
									"Children": [
										{
											"ID": "20210707224540-psc6zaj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-psc6zaj"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "锁定对象 a，调用 a.wait() 方法，当前线程就会进入等待状态，然后释放锁。"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-idmjt2y",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-idmjt2y"
									},
									"Children": [
										{
											"ID": "20210707224540-scakc65",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-scakc65"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "当某线程调用 a.notify() / a.notifyAll()， 叫醒在 a 对象等待的所有线程"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20210707224540-e4vd7sl",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707224540-e4vd7sl"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class MyContainer3 {\n\n    private List\u003cObject\u003e list = new ArrayList\u003c\u003e();\n\n    public void add(Object ele) {\n        list.add(ele);\n    }\n\n    public int size() {\n        return list.size();\n    }\n\n    public static void main(String[] args) {\n\n        MyContainer3 container = new MyContainer3();\n\n        final Object lock = new Object();\n\n        new Thread(() -\u003e {\n            synchronized (lock) {\n                System.out.println(\"t2 启动\");\n                if (container.size() != 5) {\n                    try {\n                        lock.wait();\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n                System.out.println(\"监测到容器长度为5，线程2立即退出\");\n                lock.notify();\n            }\n        }, \"t2\").start();\n\n        // 先启动t2线程，让t2线程进入等待状态\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        new Thread(() -\u003e {\n            synchronized (lock) {\n                for (int i = 0; i \u003c 10; i++) {\n                    container.add(new Object());\n                    System.out.println(\"add \" + i);\n                    // 当长度为5时，通知 t2 进行退出\n                    if (container.size() == 5) {\n                        lock.notify(); // notify 不会释放锁，即便通知t2，t2也获取不到锁\n                        // 可以再wait一下，将锁释放，再让t2通知t1继续执行\n                        try {\n                            lock.wait();\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    try {\n                        TimeUnit.SECONDS.sleep(1);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }, \"t1\").start();\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-qtb8s55",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Start": 3,
				"Delimiter": 41,
				"Padding": 3,
				"Marker": "Mw==",
				"Num": 3
			},
			"Properties": {
				"id": "20210707224540-qtb8s55"
			},
			"Children": [
				{
					"ID": "20210707224540-q201ghd",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Start": 3,
						"Delimiter": 41,
						"Padding": 3,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20210707224540-q201ghd"
					},
					"Children": [
						{
							"ID": "20210707224540-gp5rc9u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-gp5rc9u"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用 CountDownLatch 实现（最简单的方式）。Latch：门闩"
								}
							]
						},
						{
							"ID": "20210707224540-k5am7ek",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-k5am7ek"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用 Latch 替代 wait notify 来进行通信，好处是，通信简单，同时也可以指定等待时间。"
								}
							]
						},
						{
							"ID": "20210707224540-ir2qhra",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-ir2qhra"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用 await 和 countDown 方法替代 wait 和 notify。"
								}
							]
						},
						{
							"ID": "20210707224540-3ssrorj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-3ssrorj"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CountDownLatch 不涉及锁定，当 count 值为 0 时，当前线程继续运行"
								}
							]
						},
						{
							"ID": "20210707224540-qjitd94",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-qjitd94"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当不涉及同步，只涉及线程通信的时候，用 synchronized + wait + notify 就显得太重了，这时应该使用 CountDownLatch、cyclicbarrier、semaphore（信号量）"
								}
							]
						},
						{
							"ID": "20210707224540-3hd3mni",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707224540-3hd3mni"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class MyContainer5 {\n\n    private volatile List\u003cObject\u003e list = new ArrayList\u003c\u003e();\n\n    public void add(Object ele) {\n        list.add(ele);\n    }\n\n    public int size() {\n        return list.size();\n    }\n\n    public static void main(String[] args) {\n\n        MyContainer5 container = new MyContainer5();\n\n        // Count down 往下数  Latch 门闩\n        // 门闩不能保证可见性，不是一种同步方式，只是一种线程通信方式，保证不了可见性\n        // 门闩的等待，不会持有任何锁\n        CountDownLatch latch = new CountDownLatch(1);\n\n        new Thread(() -\u003e {\n            System.out.println(\"t2 启动\");\n            if (container.size() != 5) {\n                try {\n                    latch.await();\n                    // 指定等待时间\n                    //latch.await(5000, TimeUnit.MILLISECONDS);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n            System.out.println(\"监测到容器长度为5，线程2立即退出\");\n        }, \"t2\").start();\n\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        new Thread(() -\u003e {\n            System.out.println(\"t1 启动\");\n            for (int i = 0; i \u003c 10; i++) {\n                container.add(new Object());\n                System.out.println(\"add \" + i);\n                // 当长度为5时，撤掉一个门闩，此时门闩为0，门会打开，即t2会执行\n                if (container.size() == 5) {\n                    latch.countDown();\n                }\n                try {\n                    TimeUnit.SECONDS.sleep(1);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }, \"t1\").start();\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-1nbkv7z",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-1nbkv7z"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "3 能被阻塞调用的固定容量容器（线程间通信）"
				}
			]
		},
		{
			"ID": "20210707224540-eghsziw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-eghsziw"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "写一个固定容量的容器，拥有 put 和 get 方法，以及 getCount 方法。能够支持 2 个生产者线程以及 10 个消费者线程的阻塞调用。"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "生产者消费者模式"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-svtifsp",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-svtifsp"
			},
			"Children": [
				{
					"ID": "20210707224540-u9rm76o",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-u9rm76o"
					},
					"Children": [
						{
							"ID": "20210707224540-oon3lth",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-oon3lth"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果调用 get 方法时，容器为空，get 方法就需要阻塞等待"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-sh5e0hs",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-sh5e0hs"
					},
					"Children": [
						{
							"ID": "20210707224540-qln1kt3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-qln1kt3"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果调用 put 方法时，容器满了，put 方法就需要阻塞等待"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-p5g4x2x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-p5g4x2x"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现方式："
				}
			]
		},
		{
			"ID": "20210707224540-c9krxvu",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-c9krxvu"
			},
			"Children": [
				{
					"ID": "20210707224540-vm3ajyn",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-vm3ajyn"
					},
					"Children": [
						{
							"ID": "20210707224540-okyf2uc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-okyf2uc"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "synchronized/wait/notify"
								}
							]
						},
						{
							"ID": "20210707224540-h1b2b9x",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707224540-h1b2b9x"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class MyContainer1\u003cT\u003e {\n\n    private final LinkedList\u003cT\u003e list = new LinkedList\u003c\u003e();\n    private final int MAX = 10;\n    private int count = 0;\n\n    public synchronized void put(T t) {\n        while (MAX == count) { // 如果容量最大，释放锁等待    ///【这里为什么使用while，而不是使用if？？？】\n            try {\n                this.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        // 否则 put\n        list.add(t);\n        ++count;\n        this.notifyAll(); // 通知消费者线程，可以消费了\n        // 【这里为什么调用 notifyAll 而不是 notify ？】\n    }\n\n    public synchronized T get() {\n        while (list.size() == 0) { // 如果容量为空，释放锁等待\n            try {\n                this.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        // 否则获取\n        T t = list.removeFirst();\n        count--;\n        this.notifyAll(); // 通知生产者线程生产\n        return t;\n    }\n\n    public static void main(String[] args) {\n        MyContainer1\u003cString\u003e c = new MyContainer1\u003c\u003e();//存放字符串容器\n        //启动消费者线程（每个线程消费5个）\n        for (int i = 0; i \u003c 10; i++) {\n            new Thread(() -\u003e {\n                for (int j = 0; j \u003c 5; j++) {\n                    System.out.println(c.get());\n                }\n            },\"consumer\"+i).start();\n        }\n\n        //只为了延缓时间\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        //启动生产者线程（每个线程生成25个）\n        for (int i = 0; i \u003c 2; i++) {\n            new Thread(() -\u003e {\n                for (int j = 0; j \u003c 25; j++) {\n                    c.put(Thread.currentThread().getName()+\" \"+j);\n                }\n            },\"producer\"+i).start();\n        }\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210707224540-b2q1xrg",
							"Type": "NodeList",
							"ListData": {
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224540-b2q1xrg"
							},
							"Children": [
								{
									"ID": "20210707224540-a678enj",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-a678enj"
									},
									"Children": [
										{
											"ID": "20210707224540-zj7i89g",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-zj7i89g"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "为什么使用 while 而不是使用 if ？（Effective Java 中提到 wait 一般和 while 使用）"
												}
											]
										},
										{
											"ID": "20210707224540-z0sc5df",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-z0sc5df"
											},
											"Children": [
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "wait 方法会释放锁"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "，若此时容器中元素被消费者消费了一部分，就是调用 notifyAll 唤醒所有线程（主要为了唤醒生成者）。"
												}
											]
										},
										{
											"ID": "20210707224540-4b2i6kg",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-4b2i6kg"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "此时若是 wait 的那个线程先得到锁对象，则继续从 wait 方法后继续执行，则没有什么问题。"
												}
											]
										},
										{
											"ID": "20210707224540-cm04twz",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-cm04twz"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "但是"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "若是其他线程先得到锁对象"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "并添加元素致使容器"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "容量变满"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "，此时"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "wait 的那个线程又得到锁对象"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "，"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "执行后续方法"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "。若是 if ，则不用判断继续添加元素（失败）；若是 while 则会再次判断容量，不满则添加。"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224540-c84mi2e",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224540-c84mi2e"
									},
									"Children": [
										{
											"ID": "20210707224540-bx0elel",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-bx0elel"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "为什么调用 notifyAll 而不是 notify ？"
												}
											]
										},
										{
											"ID": "20210707224540-jr79xxk",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-jr79xxk"
											},
											"Children": [
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "因为 notify 有可能再次叫醒一个生产者线程"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "；生产者同理；详细解读："
												}
											]
										},
										{
											"ID": "20210707224540-r1la67x",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-r1la67x"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "容器中元素若为 0，且消费者都 wait，若生产者向容器中添加元素满容量后还是唤醒了生产者，则最终生产者也 wait。所有线程都 wait 了，也就执行不了了。"
												}
											]
										},
										{
											"ID": "20210707224540-nj1iwd2",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224540-nj1iwd2"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "反过来若容器中元素满了，且生产者都 wait，若消费者消费完容器中的元素后还是唤醒了消费者，则最终消费者也 wait。所有线程都 wait 了，也就执行不了了。"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-u83ig95",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-u83ig95"
			},
			"Children": [
				{
					"ID": "20210707224540-p8n3u2b",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-p8n3u2b"
					},
					"Children": [
						{
							"ID": "20210707224540-2mgc3sp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-2mgc3sp"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Lock/Condition/await/signalAll"
								}
							]
						},
						{
							"ID": "20210707224540-avk7sf5",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707224540-avk7sf5"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class MyContainer2\u003cT\u003e {\n\n    private final LinkedList\u003cT\u003e list = new LinkedList\u003c\u003e();\n    private final int MAX = 10;\n    private int count = 0;\n\n    private Lock lock = new ReentrantLock();\n    private Condition producer = lock.newCondition();\n    private Condition consumer = lock.newCondition();\n\n    public void put(T t) {\n        try {\n            lock.lock();\n            while (MAX == count) { // 如果容量最大，释放锁等待\n                producer.await();\n            }\n            // 否则 put\n            list.add(t);\n            ++count;\n            consumer.signalAll(); // 通知消费者线程，可以消费了\n\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public T get() {\n        T t = null;\n        try {\n            lock.lock();\n            while (list.size() == 0) { // 如果容量为空，释放锁等待\n                consumer.await();\n            }\n            // 否则获取\n            t = list.removeFirst();\n            count--;\n            producer.signalAll(); // 通知生产者线程生产\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n        return t;\n    }\n\n    public static void main(String[] args) {\n        MyContainer2\u003cString\u003e c = new MyContainer2\u003c\u003e();//存放字符串容器\n        //启动消费者线程（每个线程消费5个）\n        for (int i = 0; i \u003c 10; i++) {\n            new Thread(() -\u003e {\n                for (int j = 0; j \u003c 5; j++) {\n                    System.out.println(c.get());\n                }\n            }, \"consumer\" + i).start();\n        }\n\n        //只为了延缓时间\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        //启动生产者线程（每个线程生成25个）\n        for (int i = 0; i \u003c 2; i++) {\n            new Thread(() -\u003e {\n                for (int j = 0; j \u003c 25; j++) {\n                    c.put(Thread.currentThread().getName() + \" \" + j);\n                }\n            }, \"producer\" + i).start();\n        }\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				}
			]
		}
	]
}