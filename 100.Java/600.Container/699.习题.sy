{
	"ID": "20210707224346-uat1c7g",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20210707224346-uat1c7g",
		"type": "doc"
	},
	"Children": [
		{
			"ID": "20210707224346-r057e3o",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-r057e3o"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "统计字符串中字符个数"
				}
			]
		},
		{
			"ID": "20210707224346-wec3orz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224346-wec3orz"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private static void getStringNum(String s) {\n    TreeMap\u003cCharacter, Integer\u003e map = new TreeMap\u003c\u003e();\n    char[] chars = s.toCharArray();\n    for (char c : chars) {\n        if (!map.containsKey(c)) {\n            map.put(c, 1);\n        } else {\n            Integer integer = map.get(c);\n            map.put(c, ++integer);\n        }\n    }\n    System.out.println(map);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224346-pls5h46",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-pls5h46"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "斗地主洗牌发牌看牌"
				}
			]
		},
		{
			"ID": "20210707224346-4s8ljgc",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 4,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224346-4s8ljgc"
			},
			"Children": [
				{
					"ID": "20210707224346-oj7d4f0",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-oj7d4f0"
					},
					"Children": [
						{
							"ID": "20210707224346-705myd2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-705myd2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "HashMap按牌从大到小存储索引和牌面，并将索引存储到ArrayList中"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224346-7k2mdvq",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-7k2mdvq"
					},
					"Children": [
						{
							"ID": "20210707224346-pmlcnue",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-pmlcnue"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "洗牌洗的是ArrayList。发牌时将ArrayList的索引发给TreeSet，以便排序"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224346-axnitka",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-axnitka"
					},
					"Children": [
						{
							"ID": "20210707224346-h1moq4y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-h1moq4y"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "遍历TreeSet并在HashMap中取牌"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224346-5z1f081",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224346-5z1f081"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void getPuke() {\n    Map\u003cInteger, String\u003e map = new HashMap\u003c\u003e();\n    List\u003cInteger\u003e list = new ArrayList\u003c\u003e();\n    map.put(0, \"大王\");\n    map.put(1, \"小王\");\n    list.add(0);\n    list.add(1);\n    List\u003cString\u003e shuZi = List.of(\"2\", \"A\", \"K\", \"Q\", \"J\", \"10\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\");\n    List\u003cString\u003e huaSe = List.of(\"♠\", \"♥\", \"♣\", \"♦\");\n    int index = 2;\n    for (String s : shuZi) {\n        for (String h : huaSe) {\n            map.put(index, h + s);\n            list.add(index);\n            index++;\n        }\n    }\n    Collections.shuffle(list);\n\n    TreeSet\u003cInteger\u003e player1 = new TreeSet\u003c\u003e();\n    TreeSet\u003cInteger\u003e player2 = new TreeSet\u003c\u003e();\n    TreeSet\u003cInteger\u003e player3 = new TreeSet\u003c\u003e();\n    TreeSet\u003cInteger\u003e diPai = new TreeSet\u003c\u003e();\n\n    for (int i = 0; i \u003c list.size(); i++) {\n        if (i \u003e= 51) {\n            diPai.add(list.get(i));\n        } else if (i % 3 == 0) {\n            player1.add(list.get(i));\n        } else if (i % 3 == 1) {\n            player2.add(list.get(i));\n        } else if (i % 3 == 2) {\n            player3.add(list.get(i));\n        }\n    }\n\n    lookPuke(\"player1\", player1, map);\n    lookPuke(\"player2\", player2, map);\n    lookPuke(\"player3\", player3, map);\n    lookPuke(\"dipai\", diPai, map);\n}\n\nprivate static void lookPuke(String name, TreeSet\u003cInteger\u003e player, Map\u003cInteger, String\u003e map) {\n    System.out.print(name + \"的牌：\");\n    //遍历TreeSet的Lambda表达式\n    player.forEach(i -\u003e {\n        System.out.print(map.get(i) + \" \");\n    });\n    System.out.println();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224346-uhwh5iq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-uhwh5iq"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "Foreach问题"
				}
			]
		},
		{
			"ID": "20210707224346-mn53vig",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224346-mn53vig"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "String[] arr = new String[] { \"MM\", \"MM\", \"MM\" };\n\n// 方式一：普通for赋值\n//for (int i = 0; i \u003c arr.length; i++) {\n//    arr[i] = \"GG\";\n//}\n\n// 方式二：增强for循环\nfor (String s : arr) {\n    s = \"GG\";\n}\n\nfor (int i = 0; i \u003c arr.length; i++) {\n    System.out.println(arr[i]);// 不变，还是 MM，因为局部变量\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224346-ax6287p",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-ax6287p"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "List 面试题"
				}
			]
		},
		{
			"ID": "20210707224346-4d0y6gl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224346-4d0y6gl"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Test\npublic void testListRemove() {\n    List list = new ArrayList();\n    list.add(1);\n    list.add(2);\n    list.add(3);\n    updateList(list);\n    System.out.println(list);//1，2\n}\n\nprivate static void updateList(List list) {\n    list.remove(2);// 到底删除的是元素2还是 index 呢？是index！\n    //list.remove(new Integer(2));// 此时就删除对象2\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224346-aeczmk7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-aeczmk7"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "在 List 中去除重复值"
				}
			]
		},
		{
			"ID": "20210707224346-53ej4l8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224346-53ej4l8"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 Set，略"
				}
			]
		},
		{
			"ID": "20210707224346-3m9b2sv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-3m9b2sv"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "ArrayList、LinkedList、Vector 异同"
				}
			]
		},
		{
			"ID": "20210707224346-vsz1xmr",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 4,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224346-vsz1xmr"
			},
			"Children": [
				{
					"ID": "20210707224346-zozesi1",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-zozesi1"
					},
					"Children": [
						{
							"ID": "20210707224346-mhw6xfm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-mhw6xfm"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "相同：都实现了List接口；存储稳定、可重复的数据。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224346-m19vjt5",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-m19vjt5"
					},
					"Children": [
						{
							"ID": "20210707224346-f0uwvqf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-f0uwvqf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不同："
								}
							]
						},
						{
							"ID": "20210707224346-zbd8ap6",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 4,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707224346-zbd8ap6"
							},
							"Children": [
								{
									"ID": "20210707224346-48ykc4x",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 4,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224346-48ykc4x"
									},
									"Children": [
										{
											"ID": "20210707224346-r8v7hpf",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224346-r8v7hpf"
											},
											"Children": [
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "ArrayList"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "：底层是"
												},
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "Object[] elementData"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "，"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "支持快速随机访问，增删慢"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "（或涉及元素移动"
												},
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "Arrays.copyOf"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": " "
												},
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "System.arraycopy"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "），"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "线程不安全，效率高"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707224346-gkuevy9",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 4,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224346-gkuevy9"
									},
									"Children": [
										{
											"ID": "20210707224346-s3djkxe",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224346-s3djkxe"
											},
											"Children": [
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "LinkedList"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "：底层是"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "双向链表"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "，"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "查找慢，增删快"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "，"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "线程不安全"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "；长度没有限制，占用空间比"
												},
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "ArrayList"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "大（需要维护指针）"
												}
											]
										}
									]
								},
								{
									"ID": "20210707224346-4yltweb",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 4,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707224346-4yltweb"
									},
									"Children": [
										{
											"ID": "20210707224346-nji3hqv",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707224346-nji3hqv"
											},
											"Children": [
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "Vector"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "：底层是"
												},
												{
													"Type": "NodeCodeSpan",
													"CodeMarkerLen": 1,
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker",
															"Data": "`"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "Object[] elementData"
														},
														{
															"Type": "NodeCodeSpanCloseMarker",
															"Data": "`"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "，"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "线程安全，效率低"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "，即使为了线程安全也别用它"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224346-woetoa9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-woetoa9"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "以自定义的Customer类为例，何时需要重写equals()?"
				}
			]
		},
		{
			"ID": "20210707224346-zqix2so",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 4,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224346-zqix2so"
			},
			"Children": [
				{
					"ID": "20210707224346-jm9muog",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-jm9muog"
					},
					"Children": [
						{
							"ID": "20210707224346-r2qmftu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-r2qmftu"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当一个类有自己特有的“逻辑相等”概念,当改写"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "equals()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "的时候，总是要改写"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "hashCode()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，根据一个类的"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "equals"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "方法(改写后)，两个截然不同的实例有可能在逻辑上是相等的，但是，根据"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "Object.hashCode()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "方法，它们仅仅是两个对象。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224346-sbtj28k",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-sbtj28k"
					},
					"Children": [
						{
							"ID": "20210707224346-8r7a4lr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-8r7a4lr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "因此，违反了“相等的对象必须具有相等的散列码”。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224346-0qrs749",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-0qrs749"
					},
					"Children": [
						{
							"ID": "20210707224346-06nsca0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-06nsca0"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "结论:复写"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "equals"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "方法的时候一般都需要同时复写"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "hashCode"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "方法。通常参与计算"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "hashCode"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "的对象的属性也应该参与到"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "equals()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "中进行计算。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224346-h65irff",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-h65irff"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "为什么用Eclipse/IDEA复写hashCode方法，有31这个数字?"
				}
			]
		},
		{
			"ID": "20210707224346-wpcoc1u",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 4,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224346-wpcoc1u"
			},
			"Children": [
				{
					"ID": "20210707224346-hptsqbd",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-hptsqbd"
					},
					"Children": [
						{
							"ID": "20210707224346-gs9auch",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-gs9auch"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "选择系数的时候要选择尽量大的系数。因为如果计算出来的hash地址越大，所谓的 “冲突”就越少，查找起来效率也会提高。(减少冲突)"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224346-dyafja9",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-dyafja9"
					},
					"Children": [
						{
							"ID": "20210707224346-xgl2k81",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-xgl2k81"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "并且31只占用5bits,相乘造成数据溢出的概率较小。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224346-8vocffl",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-8vocffl"
					},
					"Children": [
						{
							"ID": "20210707224346-6d1cuvf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-6d1cuvf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "31可以 由i*31== (i\u003c\u003c5)-1来表示,现在很多虚拟机里面都有做相关优化。(提高算法效率)"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224346-uk9ljgl",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-uk9ljgl"
					},
					"Children": [
						{
							"ID": "20210707224346-vsuw4il",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-vsuw4il"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "31是一个素数，素数作用就是如果我用一个数字来乘以这个素数，那么最终出来的结果只能被素数本身和被乘数还有1来整除!(减少冲突)"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224346-sigf0vt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-sigf0vt"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "Set 重要习题"
				}
			]
		},
		{
			"ID": "20210707224346-w89jy5f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224346-w89jy5f"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"CodeMarkerLen": 1,
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker",
							"Data": "`"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "Person"
						},
						{
							"Type": "NodeCodeSpanCloseMarker",
							"Data": "`"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "已重写 "
				},
				{
					"Type": "NodeCodeSpan",
					"CodeMarkerLen": 1,
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker",
							"Data": "`"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "hashCode()"
						},
						{
							"Type": "NodeCodeSpanCloseMarker",
							"Data": "`"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 和"
				},
				{
					"Type": "NodeCodeSpan",
					"CodeMarkerLen": 1,
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker",
							"Data": "`"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "equals()"
						},
						{
							"Type": "NodeCodeSpanCloseMarker",
							"Data": "`"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。注意每次都先算当前 "
				},
				{
					"Type": "NodeCodeSpan",
					"CodeMarkerLen": 1,
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker",
							"Data": "`"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "hashCode"
						},
						{
							"Type": "NodeCodeSpanCloseMarker",
							"Data": "`"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "与"
				},
				{
					"Type": "NodeCodeSpan",
					"CodeMarkerLen": 1,
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker",
							"Data": "`"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "equals()"
						},
						{
							"Type": "NodeCodeSpanCloseMarker",
							"Data": "`"
						}
					]
				}
			]
		},
		{
			"ID": "20210707224346-fsjjogc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224346-fsjjogc"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "HashSet set = new HashSet();\nPerson p1 = new Person(1001,\"AA\");\nPerson p2 = new Person(1002,\"BB\");\n\nset.add(p1);\nset.add(p2);\nSystem.out.println(set);// 2个对象\n\np1.name = \"CC\";\nset.remove(p1);// 移除时由于p1的 hashCode 是根据 CC 重新计算的，与原先的 AA 的 hashCode 不同，所以删除失败\nSystem.out.println(set);// 2个对象\n\nset.add(new Person(1001,\"CC\"));// 此时添加的元素的 hashCode 与 AA 改 CC 的并不相同！\nSystem.out.println(set);// 3个对象\n\nset.add(new Person(1001,\"AA\")); // 当前位置元素为 CC，所以即使 hashCode 相同，equals 不同，可以添加\nSystem.out.println(set);// 4个对象\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224346-olx1t3c",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-olx1t3c"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "HashMap和Hashtable区别"
				}
			]
		},
		{
			"ID": "20210707224346-r74ojxs",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 4,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224346-r74ojxs"
			},
			"Children": [
				{
					"ID": "20210707224346-bxpvxp7",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-bxpvxp7"
					},
					"Children": [
						{
							"ID": "20210707224346-5i1e776",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-5i1e776"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "HashMap：线程不安全，效率高，允许null键和null值"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224346-9jn8q8p",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-9jn8q8p"
					},
					"Children": [
						{
							"ID": "20210707224346-yjykltj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-yjykltj"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Hashtable：线程安全，效率低，不允许null键和null值"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224346-24mn960",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-24mn960"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "HashMap 的底层实现原理"
				}
			]
		},
		{
			"ID": "20210707224346-jtcr57y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224346-jtcr57y"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "谈谈你对HashMap中put/get方法的认识?"
				}
			]
		},
		{
			"ID": "20210707224346-y2ewnpd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224346-y2ewnpd"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "谈谈 HashMap的扩容机制?默认大小是多少?"
				}
			]
		},
		{
			"ID": "20210707224346-4xjpvww",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224346-4xjpvww"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "什么是负载因子( 或填充比)?"
				}
			]
		},
		{
			"ID": "20210707224346-5svx3wc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224346-5svx3wc"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "什么是吞吐临界值(或阈值、threshold)?"
				}
			]
		},
		{
			"ID": "20210707224346-qp7p8j3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-qp7p8j3"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "负载因子值的大小，对HashMap有什么影响"
				}
			]
		},
		{
			"ID": "20210707224346-54avvn3",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 4,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224346-54avvn3"
			},
			"Children": [
				{
					"ID": "20210707224346-if9i5bc",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-if9i5bc"
					},
					"Children": [
						{
							"ID": "20210707224346-bld51nd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-bld51nd"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "负载因子的大小决定了HashMap的数据密度。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224346-zh82t4i",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-zh82t4i"
					},
					"Children": [
						{
							"ID": "20210707224346-q0lm4pc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-q0lm4pc"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "负载因子越大密度越大，发生碰撞的几率越高，数组中的链表越容易长，造成查询或插入时的比较次数增多，性能会下降。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224346-6szfetb",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-6szfetb"
					},
					"Children": [
						{
							"ID": "20210707224346-ivflqbn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-ivflqbn"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "负载因子越小，就越容易触发扩容，数据密度也越小，意味着发生碰撞的几率越小，数组中的链表也就越短，查询和插入时比较的次数也越小，性 能会更高。但是会浪费一定的内容空间。而且经常扩容也会影响性能，建议初始化预设大一点的空间。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224346-zt2gthg",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-zt2gthg"
					},
					"Children": [
						{
							"ID": "20210707224346-jsdd59f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-jsdd59f"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "按照其他语言的参考及研究经验，会考虑将负载因子设置为0.7~0.75，此 时平均检索长度接近于常数。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224346-p9j732j",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-p9j732j"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "关于Map的key是否可以修改?"
				}
			]
		},
		{
			"ID": "20210707224346-bczwfdq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224346-bczwfdq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不要修改"
				}
			]
		},
		{
			"ID": "20210707224346-tijadxf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224346-tijadxf"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "映射关系存储到HashMap中会存储key的hash值，这样就不用在每次查找时重新计算每一个Entry或Node(TreeNode)的hash值了，因此如果已经put到Map中的映射关 系，再修改key的属性，而这个属性又参与hashcode值的计算，那么会导致匹配不上。"
				}
			]
		},
		{
			"ID": "20210707224346-713hi0h",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-713hi0h"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "Hashtable 和 ConcurrentHashMap 的异同"
				}
			]
		},
		{
			"ID": "20210707224346-zlqrnsx",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-zlqrnsx"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "Collection和Collections的区别"
				}
			]
		},
		{
			"ID": "20210707224346-odyyr73",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 4,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224346-odyyr73"
			},
			"Children": [
				{
					"ID": "20210707224346-b6ypybt",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-b6ypybt"
					},
					"Children": [
						{
							"ID": "20210707224346-t0czqj4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-t0czqj4"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Collection 是单列集合的顶层接口，有两个子接口List和Set"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224346-3a0qo8c",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 4,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224346-3a0qo8c"
					},
					"Children": [
						{
							"ID": "20210707224346-gid1lvq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224346-gid1lvq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Collections 是针对集合包括Map进行操作的工具类，可以对集合进行排序和查找等"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224346-dnyn0s3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-dnyn0s3"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "姓氏统计"
				}
			]
		},
		{
			"ID": "20210707224346-f248jvp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224346-f248jvp"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个文本文件中存储着北京所有高校在校生的姓名，格式如下，每行一个名字，姓与名以空格分隔："
				}
			]
		},
		{
			"ID": "20210707224346-mtdiwnh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224346-mtdiwnh"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "张 三\n李 四\n王 小五\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224346-ershdhg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224346-ershdhg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在相统计所有姓氏在文件中出现的次数，如何解决？"
				}
			]
		},
		{
			"ID": "20210707224346-qvb0lrw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224346-qvb0lrw"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "对一个Java源文件中的关键字进行计数"
				}
			]
		},
		{
			"ID": "20210707224346-sgg9urn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224346-sgg9urn"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "提示:Java源文件中的每一个单词，需要确定该单词是否是一个关键字。为了高效处理这个问题，将所有的关键字保存在一个HashSet中。用contains() 来测试。"
				}
			]
		}
	]
}