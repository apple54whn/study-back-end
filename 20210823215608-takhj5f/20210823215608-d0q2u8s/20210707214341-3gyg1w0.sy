{
	"ID": "20210707214341-3gyg1w0",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20210707214341-3gyg1w0",
		"title": "201.面向对象-ObjectOrientation",
		"type": "doc"
	},
	"Children": [
		{
			"ID": "20210707214341-2ict7zb",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707214341-2ict7zb"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "面向对象"
				}
			]
		},
		{
			"ID": "20210707214341-f1goetf",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-f1goetf"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "面向过程"
				}
			]
		},
		{
			"ID": "20210707214341-im5hz4i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-im5hz4i"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "面向过程编程也是一种编程范式或编程风格。它以过程（可以为理解方法、函数、操作）作为组织代码的基本单元，以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "数据"
				},
				{
					"Type": "NodeText",
					"Data": "（可以理解为成员变量、属性）与"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "方法"
				},
				{
					"Type": "NodeText",
					"Data": "相分离为最主要的特点。面向过程风格是一种流程化的编程风格，通过拼接一组顺序执行的方法来操作数据完成一项功能。"
				}
			]
		},
		{
			"ID": "20210707214341-tl00u76",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-tl00u76"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "面向对象"
				}
			]
		},
		{
			"ID": "20210707214341-soiiryd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-soiiryd"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "面向对象编程"
				},
				{
					"Type": "NodeText",
					"Data": "是一种"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "编程范式或编程风格"
				},
				{
					"Type": "NodeText",
					"Data": "。它以类或对象作为组织代码的基本单元，并将封装、抽象、继承、多态四个特性，作为代码设计和实现的基石 。"
				}
			]
		},
		{
			"ID": "20210707214341-fdukd83",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-fdukd83"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java 利用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "万物皆对象"
				},
				{
					"Type": "NodeText",
					"Data": "的思想和单一一致的语法方式来简化问题。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "只要拥有对象的“引用”，就可以操纵该“对象”"
				},
				{
					"Type": "NodeText",
					"Data": "。换句话说，我们无需直接接触电视，就可通过遥控器（引用）自由地控制电视（对象）的频道和音量。此外，没有电视，遥控器也可以单独存在。就是说，你仅仅有一个“引用”并不意味着你必然有一个与之关联的“对象”（为 null）。"
				}
			]
		},
		{
			"ID": "20210707214341-mm3whhl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-mm3whhl"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Smalltalk 作为第一个成功的面向对象并影响了 Java 的程序设计语言 ，_Alan Kay_ 总结了其五大基本特征。通过这些特征，我们可理解“纯粹”的面向对象程序设计方法是什么样的："
				}
			]
		},
		{
			"ID": "20210707214341-uckv2ni",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Tight": true,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 4,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210707214341-uckv2ni"
			},
			"Children": [
				{
					"ID": "20210707214341-jcjeofm",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210707214341-jcjeofm"
					},
					"Children": [
						{
							"ID": "20210707214341-a8yeoa1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-a8yeoa1"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "万物皆对象"
								},
								{
									"Type": "NodeText",
									"Data": "。你可以将对象想象成一种特殊的变量。它存储数据，但可以在你对其“发出请求”时执行本身的操作。理论上讲，你总是可以从要解决的问题身上抽象出概念性的组件，然后在程序中将其表示为一个对象。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-tzi3pnx",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210707214341-tzi3pnx"
					},
					"Children": [
						{
							"ID": "20210707214341-2h8gxih",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-2h8gxih"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "程序是一组对象，通过消息传递来告知彼此该做什么"
								},
								{
									"Type": "NodeText",
									"Data": "。要请求调用一个对象的方法，你需要向该对象发送消息。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-kleztru",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20210707214341-kleztru"
					},
					"Children": [
						{
							"ID": "20210707214341-22r85bx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-22r85bx"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "每个对象都有自己的存储空间，可容纳其他对象"
								},
								{
									"Type": "NodeText",
									"Data": "。或者说，通过封装现有对象，可制作出新型对象。所以，尽管对象的概念非常简单，但在程序中却可达到任意高的复杂程度。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-zxgbrk2",
					"Type": "NodeListItem",
					"Data": "4",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 4,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "NA==",
						"Num": 4
					},
					"Properties": {
						"id": "20210707214341-zxgbrk2"
					},
					"Children": [
						{
							"ID": "20210707214341-at7jxjb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-at7jxjb"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "每个对象都有一种类型"
								},
								{
									"Type": "NodeText",
									"Data": "。根据语法，每个对象都是某个“类”的一个“实例”。其中，“类”（Class）是“类型”（Type）的同义词。一个类最重要的特征就是“能将什么消息发给它？”。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-iuc3bo7",
					"Type": "NodeListItem",
					"Data": "5",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 5,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "NQ==",
						"Num": 5
					},
					"Properties": {
						"id": "20210707214341-iuc3bo7"
					},
					"Children": [
						{
							"ID": "20210707214341-j4q5g25",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-j4q5g25"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "同一类所有对象都能接收相同的消息"
								},
								{
									"Type": "NodeText",
									"Data": "。这实际是别有含义的一种说法，大家不久便能理解。由于类型为“圆”（Circle）的一个对象也属于类型为“形状”（Shape）的一个对象，所以一个圆完全能接收发送给\"形状”的消息。这意味着可让程序代码统一指挥“形状”，令其自动控制所有符合“形状”描述的对象，其中自然包括“圆”。这一特性称为对象的“可替换性”，是 OOP 最重要的概念之一。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-wrcsawa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-wrcsawa"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "em",
					"TextMarkTextContent": "Grady Booch"
				},
				{
					"Type": "NodeText",
					"Data": " 提供了对对象更简洁的描述："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "一个对象具有自己的状态，行为和标识"
				},
				{
					"Type": "NodeText",
					"Data": "。这意味着对象有自己的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "内部数据"
				},
				{
					"Type": "NodeText",
					"Data": "(提供状态)、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "方法"
				},
				{
					"Type": "NodeText",
					"Data": " (产生行为)，并"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "彼此区分"
				},
				{
					"Type": "NodeText",
					"Data": "（每个对象在内存中都有唯一的地址）。"
				}
			]
		},
		{
			"ID": "20210707214341-28b61ks",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-28b61ks"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "区别"
				}
			]
		},
		{
			"ID": "20210707214341-u5utv7d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-u5utv7d"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "面向过程和面向对象最基本的区别就是，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "代码的组织方式不同"
				},
				{
					"Type": "NodeText",
					"Data": "。面向过程风格的代码被组织成了一组方法集合及其数据结构（struct User），方法和数据结构的定义是分开的。面向对象风格的代码被组织成一组类，方法和数据结构被绑定一起，定义在类中。"
				}
			]
		},
		{
			"ID": "20210707214341-c0hfjur",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "Yw==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-c0hfjur"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "struct User {\n  char name[64];\n  int age;\n  char gender[16];\n};\n\nstruct User parse_to_user(char* text) {\n  // 将text(“小王\u002628\u0026男”)解析成结构体struct User\n}\n\nchar* format_to_text(struct User user) {\n  // 将结构体struct User格式化成文本（\"小王\\t28\\t男\"）\n}\n\nvoid sort_users_by_age(struct User users[]) {\n  // 按照年龄从小到大排序users\n}\n\nvoid format_user_file(char* origin_file_path, char* new_file_path) {\n  // open files...\n  struct User users[1024]; // 假设最大1024个用户\n  int count = 0;\n  while(1) { // read until the file is empty\n    struct User user = parse_to_user(line);\n    users[count++] = user;\n  }\n\n  sort_users_by_age(users);\n\n  for (int i = 0; i \u003c count; ++i) {\n    char* formatted_user_text = format_to_text(users[i]);\n    // write to new file...\n  }\n  // close files...\n}\n\nint main(char** args, int argv) {\n  format_user_file(\"/home/zheng/user.txt\", \"/home/zheng/formatted_users.txt\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-4r0f54y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-4r0f54y"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " public class User {\n  private String name;\n  private int age;\n  private String gender;\n\n  public User(String name, int age, String gender) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n  }\n\n  public static User praseFrom(String userInfoText) {\n    // 将text(“小王\u002628\u0026男”)解析成类User\n  }\n\n  public String formatToText() {\n    // 将类User格式化成文本（\"小王\\t28\\t男\"）\n  }\n}\n\npublic class UserFileFormatter {\n  public void format(String userFile, String formattedUserFile) {\n    // Open files...\n    List users = new ArrayList\u003c\u003e();\n    while (1) { // read until file is empty\n      // read from file into userText...\n      User user = User.parseFrom(userText);\n      users.add(user);\n    }\n    // sort users by age...\n    for (int i = 0; i \u003c users.size(); ++i) {\n      String formattedUserText = user.formatToText();\n      // write to new file...\n    }\n    // close files...\n  }\n}\n\npublic class MainApplication {\n  public static void main(Sring[] args) {\n    UserFileFormatter userFileFormatter = new UserFileFormatter();\n    userFileFormatter.format(\"/home/zheng/users.txt\", \"/home/zheng/formatted_users.txt\");\n  }\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-58ujbp9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-58ujbp9"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "优劣"
				}
			]
		},
		{
			"ID": "20210707214341-4mt6t7u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-4mt6t7u"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "面向对象编程跟面向过程编程比起来，到底有哪些优势？"
				}
			]
		},
		{
			"ID": "20210707214341-98jsakv",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-98jsakv"
			},
			"Children": [
				{
					"ID": "20210707214341-7etwv2o",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-7etwv2o"
					},
					"Children": [
						{
							"ID": "20210707214341-oax0sjv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-oax0sjv"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。面向对象编程比起面向过程编程，更能应对这种复杂类型的程序开发。"
								}
							]
						},
						{
							"ID": "20210707214341-2vi8u2f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-2vi8u2f"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "像 C 语言这种面向过程的编程语言，我们也可以按照功能的不同，把函数和数据结构放到不同的文件里，以达到给函数和数据结构分类的目的，照样可以实现代码的模块化。只不过面向对象编程本身提供了类的概念，强制你做这件事情，而面向过程编程并不强求。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-56ev5aw",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-56ev5aw"
					},
					"Children": [
						{
							"ID": "20210707214341-xn4nhhh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-xn4nhhh"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "面向对象编程相比面向过程编程，具有更加丰富的特性（封装、抽象、继承、多态）。利用这些特性编写出来的代码，更加易扩展、易复用、易维护。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-ec5tzt7",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-ec5tzt7"
					},
					"Children": [
						{
							"ID": "20210707214341-7gr738k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-7gr738k"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从编程语言跟机器打交道的方式的演进规律中，我们可以总结出：面向对象编程语言比起面向过程编程语言，更加人性化、更加高级、更加智能。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-19n2q7a",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707214341-19n2q7a"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "抽象—Encapsulation"
				}
			]
		},
		{
			"ID": "20210707214341-3d8x0yi",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-3d8x0yi"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20210707214341-k3cc0v5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-k3cc0v5"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "所有编程语言都提供抽象机制"
				},
				{
					"Type": "NodeText",
					"Data": "。从某种程度上来说，问题的复杂度直接取决于抽象的类型和质量。这里的“类型”意思是：抽象的内容是什么？汇编语言是对底层机器的轻微抽象。接着出现的“命令式”语言（如 FORTRAN，BASIC 和 C）是对汇编语言的抽象。抽象这个概念是一个非常"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "通用的设计思想"
				},
				{
					"Type": "NodeText",
					"Data": "，并不单单用在面向对象编程中，也可以用来指导架构设计等。而且这个特性也并不需要编程语言提供特殊的语法机制来支持，只需要提供“函数”这一非常基础的语法机制，就可以实现抽象特性、所以，它没有很强的“特异性”，有时候并不被看作面向对象编程的特性之一。"
				}
			]
		},
		{
			"ID": "20210707214341-6fqqb2s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-6fqqb2s"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "抽象讲的是如何隐藏方法的具体实现，让调用者只需要关心方法提供了哪些功能，并不需要知道这些功能是如何实现的"
				},
				{
					"Type": "NodeText",
					"Data": "。在面向对象编程中，我们常借助编程语言提供的接口类（比如 Java 中的 interface 关键字语法）或者抽象类（比如 Java 中的 abstract 关键字语法）这两种语法机制，来实现抽象这一特性。优点如下："
				}
			]
		},
		{
			"ID": "20210707214341-ix4toi7",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-ix4toi7"
			},
			"Children": [
				{
					"ID": "20210707214341-3urr9jq",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-3urr9jq"
					},
					"Children": [
						{
							"ID": "20210707214341-fx0xagq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-fx0xagq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "抽象及封装都是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "处理复杂性的有效手段"
								},
								{
									"Type": "NodeText",
									"Data": "。忽略掉一些非关键性的实现细节，只关注功能点不关注实现的设计思路"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-b7c3z0j",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-b7c3z0j"
					},
					"Children": [
						{
							"ID": "20210707214341-adhop1d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-adhop1d"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "抽象作为一个非常宽泛的设计思想，在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "代码设计中，起到非常重要的指导作用"
								},
								{
									"Type": "NodeText",
									"Data": "。很多设计原则都体现了抽象这种设计思想，比如基于接口而非实现编程、开闭原则（对扩展开放、对修改关闭）、代码解耦（降低代码的耦合性）等。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-cr7yvqk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-cr7yvqk"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "示例"
				}
			]
		},
		{
			"ID": "20210707214341-a5snn8d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-a5snn8d"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于抽象这个特性，如下例子解释："
				}
			]
		},
		{
			"ID": "20210707214341-tumbfau",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-tumbfau"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface IPictureStorage {\n  void savePicture(Picture picture);\n  Image getPicture(String pictureId);\n  void deletePicture(String pictureId);\n  void modifyMetaInfo(String pictureId, PictureMetaInfo metaInfo);\n}\n\npublic class PictureStorage implements IPictureStorage {\n  // ...省略其他属性...\n  @Override\n  public void savePicture(Picture picture) { ... }\n  @Override\n  public Image getPicture(String pictureId) { ... }\n  @Override\n  public void deletePicture(String pictureId) { ... }\n  @Override\n  public void modifyMetaInfo(String pictureId, PictureMetaInfo metaInfo) { ... }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-ht9iri5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-ht9iri5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在上面的这段代码中，我们利用 Java 中的 interface 接口语法来实现抽象特性。调用者在使用图片存储功能的时候，只需要了解 IPictureStorage 这个接口类暴露了哪些方法就可以了，不需要去查看 PictureStorage 类里的具体实现逻辑。"
				}
			]
		},
		{
			"ID": "20210707214341-ezhjwap",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-ezhjwap"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实际上，抽象这个特性是非常容易实现的，并不需要非得依靠接口类或者抽象类这些特殊语法机制来支持。换句话说，并不是说一定要为实现类（PictureStorage）抽象出接口类（IPictureStorage），才叫作抽象。即便不编写 IPictureStorage 接口类，单纯的 PictureStorage 类本身就满足抽象特性。因为，类的方法是通过编程语言中的“函数”这一语法机制来实现的。通过函数包裹具体的实现逻辑，这本身就是一种抽象。调用者在使用函数的时候，并不需要去研究函数内部的实现逻辑，只需要通过函数的命名、注释或者文档，了解其提供了什么功能，就可以直接使用了。"
				}
			]
		},
		{
			"ID": "20210707214341-0vmvleg",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707214341-0vmvleg"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "封装—Encapsulation"
				}
			]
		},
		{
			"ID": "20210707214341-s1amq5c",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-s1amq5c"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20210707214341-81e7u7b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-81e7u7b"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "封装也叫作访问控制或信息隐藏或者数据访问保护"
				},
				{
					"Type": "NodeText",
					"Data": "。由于使用者对"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类内部定义的 Field、Method、Constructor 等成员"
				},
				{
					"Type": "NodeText",
					"Data": "的直接操作可能会导致错误或发生安全性问题。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类通过暴露有限的访问接口，授权外部仅能通过类提供的方式（或者叫方法）来访问内部信息或者数据"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210707214341-akvd5j8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-akvd5j8"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "优缺点"
				}
			]
		},
		{
			"ID": "20210707214341-z4l54m5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-z4l54m5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "优点"
				}
			]
		},
		{
			"ID": "20210707214341-1fwzlsq",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-1fwzlsq"
			},
			"Children": [
				{
					"ID": "20210707214341-eyxobdp",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-eyxobdp"
					},
					"Children": [
						{
							"ID": "20210707214341-fjpf1o0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-fjpf1o0"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "隐藏"
								},
								{
									"Type": "NodeText",
									"Data": "一个类中不需要对外提供的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "实现细节"
								},
								{
									"Type": "NodeText",
									"Data": "，不可以随意访问、修改类中的属性，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "加强可控性"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-ftby535",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-ftby535"
					},
					"Children": [
						{
							"ID": "20210707214341-zjztwup",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-zjztwup"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "便于修改，增强代码的可维护性"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-6q6mgvt",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-6q6mgvt"
					},
					"Children": [
						{
							"ID": "20210707214341-izg3dg1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-izg3dg1"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "提高类的易用性"
								},
								{
									"Type": "NodeText",
									"Data": "。只需了解暴露的方法即可，不用对每个属性都了解。使用者只能通过事先定制好的方法来访问数据，可以方便地"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "加入控制逻辑，限制对属性的不合理操作"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-sp7dxzo",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-sp7dxzo"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "示例"
				}
			]
		},
		{
			"ID": "20210707214341-c99yzxd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-c99yzxd"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "常见到的设计模式如"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "单例模式"
				},
				{
					"Type": "NodeText",
					"Data": "即使用了该思想"
				}
			]
		},
		{
			"ID": "20210707214341-yb8v44o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-yb8v44o"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面这段代码是金融系统中一个简化版的虚拟钱包的代码实现。在金融系统中，我们会给每个用户创建一个虚拟钱包，用来记录用户在我们的系统中的虚拟货币量。"
				}
			]
		},
		{
			"ID": "20210707214341-wzdx75o",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-wzdx75o"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Wallet {\n  private String id;\n  private long createTime;\n  private BigDecimal balance;\n  private long balanceLastModifiedTime;\n  // ...省略其他属性...\n\n  public Wallet() {\n     this.id = IdGenerator.getInstance().generate();\n     this.createTime = System.currentTimeMillis();\n     this.balance = BigDecimal.ZERO;\n     this.balanceLastModifiedTime = System.currentTimeMillis();\n  }\n\n  // 注意：下面对get方法做了代码折叠，是为了减少代码所占文章的篇幅\n  public String getId() { return this.id; }\n  public long getCreateTime() { return this.createTime; }\n  public BigDecimal getBalance() { return this.balance; }\n  public long getBalanceLastModifiedTime() { return this.balanceLastModifiedTime;  }\n\n  public void increaseBalance(BigDecimal increasedAmount) {\n    if (increasedAmount.compareTo(BigDecimal.ZERO) \u003c 0) {\n      throw new InvalidAmountException(\"...\");\n    }\n    this.balance.add(increasedAmount);\n    this.balanceLastModifiedTime = System.currentTimeMillis();\n  }\n\n  public void decreaseBalance(BigDecimal decreasedAmount) {\n    if (decreasedAmount.compareTo(BigDecimal.ZERO) \u003c 0) {\n      throw new InvalidAmountException(\"...\");\n    }\n    if (decreasedAmount.compareTo(this.balance) \u003e 0) {\n      throw new InsufficientAmountException(\"...\");\n    }\n    this.balance.subtract(decreasedAmount);\n    this.balanceLastModifiedTime = System.currentTimeMillis();\n  }\n}\n\n Copied!\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-39ozy94",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-39ozy94"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "参照封装特性，对钱包的这四个属性的访问方式进行了限制。调用者只允许通过上述这六个方法来访问或者修改钱包里的数据。这样设计，是因为从业务的角度来说，id、createTime 在创建钱包的时候就确定好了，之后不应该再被改动，所以，我们并没有在 Wallet 类中，暴露 id、createTime 这两个属性的任何修改方法，比如 set 方法。而且，这两个属性的初始化设置，对于 Wallet 类的调用者来说，也应该是透明的，所以，我们在 Wallet 类的构造函数内部将其初始化设置好，而不是通过构造函数的参数来外部赋值。"
				}
			]
		},
		{
			"ID": "20210707214341-bswxpgz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-bswxpgz"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于钱包余额 balance 这个属性，从业务的角度来说，只能增或者减，不会被重新设置。所以，我们在 Wallet 类中，只暴露了 increaseBalance() 和 decreaseBalance() 方法，并没有暴露 set 方法。对于 balanceLastModifiedTime 这个属性，它完全是跟 balance 这个属性的修改操作绑定在一起的。只有在 balance 修改的时候，这个属性才会被修改。所以，我们把 balanceLastModifiedTime 这个属性的修改操作完全封装在了 increaseBalance() 和 decreaseBalance() 两个方法中，不对外暴露任何修改这个属性的方法和业务细节。这样也可以保证 balance 和 balanceLastModifiedTime 两个数据的一致性。"
				}
			]
		},
		{
			"ID": "20210707214341-u8ea97x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-u8ea97x"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于封装这个特性，需要编程语言本身提供访问权限控制来支持。例子中的 private、public 等关键字就是 Java 语言中的访问权限控制语法。private 关键字修饰的属性只能类本身访问，可以保护其不被类之外的代码直接访问。如果 Java 语言没有提供访问权限控制语法，所有的属性默认都是 public 的，那任意外部代码都可以通过类似 wallet.id=123; 这样的方式直接访问、修改属性，也就没办法达到隐藏信息和保护数据的目的了，也就无法支持封装特性了。"
				}
			]
		},
		{
			"ID": "20210707214341-qhju94r",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707214341-qhju94r"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "继承—Inheritance"
				}
			]
		},
		{
			"ID": "20210707214341-ms4h8zs",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-ms4h8zs"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20210707214341-dfm8dyk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-dfm8dyk"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "继承是用来表示类之间的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "is-a"
				},
				{
					"Type": "NodeText",
					"Data": " 或"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "is-like-a"
				},
				{
					"Type": "NodeText",
					"Data": "关系，比如猫是一种哺乳动物。当多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中， 其他类无需再定义这些属性和行为，只要继承那个类即可。此处的其他类称为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "子类（派生类或 subclass）"
				},
				{
					"Type": "NodeText",
					"Data": "，单独的这个类称为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "父类（基类 或超类 或 superclass）"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "一般规则是所有字段为私有，所有方法为公共"
				}
			]
		},
		{
			"ID": "20210707214341-2tmfpre",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-2tmfpre"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意继承的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "规则"
				},
				{
					"Type": "NodeText",
					"Data": "："
				}
			]
		},
		{
			"ID": "20210707214341-jwj0o0s",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-jwj0o0s"
			},
			"Children": [
				{
					"ID": "20210707214341-dt28nxk",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-dt28nxk"
					},
					"Children": [
						{
							"ID": "20210707214341-jnbrqzo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-jnbrqzo"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "子类继承父类，就获取了父类（间接父类）所有的属性和方法"
								},
								{
									"Type": "NodeText",
									"Data": "。但是子类不能直接访问父类中 private 的成员变量和方法。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-ahpsuxv",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-ahpsuxv"
					},
					"Children": [
						{
							"ID": "20210707214341-aa6sg0t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-aa6sg0t"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java 只支持"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "单继承和多层继承"
								},
								{
									"Type": "NodeText",
									"Data": "，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "不允许多继承"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-835pjuh",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-835pjuh"
					},
					"Children": [
						{
							"ID": "20210707214341-ubgb91s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-ubgb91s"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "除"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "java.lang.Object"
								},
								{
									"Type": "NodeText",
									"Data": "类之外的所有 java 类都直接或间接的继承于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "java.lang.Object"
								},
								{
									"Type": "NodeText",
									"Data": "类"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-ofwd2tk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-ofwd2tk"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "is-a \u0026 is-like-a"
				}
			]
		},
		{
			"ID": "20210707214341-amp6qhb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-amp6qhb"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于继承可能会引发争论："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "继承应该只覆盖基类的方法(不应该添加基类中没有的方法)吗"
				},
				{
					"Type": "NodeText",
					"Data": "？如果这样的话，基类和派生类就是相同的类型了，因为它们具有相同的接口。这会造成，你可以用一个派生类对象完全替代基类对象，这叫作\""
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "纯粹替代"
				},
				{
					"Type": "NodeText",
					"Data": "\"，也经常被称作\"替代原则\"。在某种意义上，这是一种处理继承的理想方式。我们经常把这种基类和派生类的关系称为是一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "is-a"
				},
				{
					"Type": "NodeText",
					"Data": "关系，因为可以说\"圆是一个形状\"。判断是否继承，就看在你的类之间有无这种"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "is-a"
				},
				{
					"Type": "NodeText",
					"Data": "关系。"
				}
			]
		},
		{
			"ID": "20210707214341-jmihlay",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-jmihlay"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有时你在派生类添加了新的接口元素，从而扩展接口。虽然新类型仍然可以替代基类，但是这种替代不完美，原因在于基类无法访问新添加的方法。这种关系称为像是一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "is-like-a"
				},
				{
					"Type": "NodeText",
					"Data": "关系。新类型不但拥有旧类型的接口，而且包含其他方法，所以不能说新旧类型完全相同。"
				}
			]
		},
		{
			"ID": "20210707214341-z0tt3io",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-z0tt3io"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "1545764820176"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "../assets/1545764820176.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-x51ar29",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-x51ar29"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以空调为例，假设房间里已经安装好了制冷设备的控制器，即你有了控制制冷设备的接口。想象一下，现在空调坏了，你重新安装了一个既制冷又制热的热力泵。热力泵就像是一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "is-like-a"
				},
				{
					"Type": "NodeText",
					"Data": "空调，但它可以做更多。因为当初房间的控制系统被设计成只能控制制冷设备，所以它只能与新对象(热力泵)的制冷部分通信。新对象的接口已经扩展了，现有控制系统却只知道原来的接口，一旦看到这个设计，你就会发现，作为基类的制冷系统不够一般化，应该被重新命名为\"温度控制系统\"，也应该包含制热功能，这样的话，我们就可以使用替代原则了。上图反映了在现实世界中进行设计时可能会发生的事情。"
				}
			]
		},
		{
			"ID": "20210707214341-93x2by6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-93x2by6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当你看到替代原则时，很容易会认为纯粹替代是唯一可行的方式，并且使用纯粹替代的设计是很好的。但有些时候，你会发现必须得在派生(扩展)类中添加新方法(提供新的接口)。只要仔细审视，你可以很明显地区分两种设计方式的使用场合。"
				}
			]
		},
		{
			"ID": "20210707214341-we8s4a5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-we8s4a5"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "成员访问特点"
				}
			]
		},
		{
			"ID": "20210707214341-heegf01",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-heegf01"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "::: tip 重点"
				}
			]
		},
		{
			"ID": "20210707214341-gjligno",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-gjligno"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "继承 \u0026 多态中成员访问特点总结为："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "对象的多态性，只适用于成员方法"
				}
			]
		},
		{
			"ID": "20210707214341-lstxz1v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-lstxz1v"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": ":::"
				}
			]
		},
		{
			"ID": "20210707214341-yx5okzb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-yx5okzb"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "继承后"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "成员变量"
				},
				{
					"Type": "NodeText",
					"Data": "：若重名则"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "就近"
				},
				{
					"Type": "NodeText",
					"Data": "使用，使用 super 区分父类变量。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "编译看左边，运行看左边"
				}
			]
		},
		{
			"ID": "20210707214341-2bxjko7",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-2bxjko7"
			},
			"Children": [
				{
					"ID": "20210707214341-cdn1x4u",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-cdn1x4u"
					},
					"Children": [
						{
							"ID": "20210707214341-3wkhsln",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-3wkhsln"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "子父类中出现了"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "同名"
								},
								{
									"Type": "NodeText",
									"Data": "的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "成员变量"
								},
								{
									"Type": "NodeText",
									"Data": "，则创建子类对象时，访问有两种方式："
								}
							]
						},
						{
							"ID": "20210707214341-iclvu5l",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-iclvu5l"
							},
							"Children": [
								{
									"ID": "20210707214341-rhokqzi",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-rhokqzi"
									},
									"Children": [
										{
											"ID": "20210707214341-sf3hv82",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-sf3hv82"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "直接通过子类对象访问"
												},
												{
													"Type": "NodeText",
													"Data": "成员变量："
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "=左边对象是谁"
												},
												{
													"Type": "NodeText",
													"Data": "，就优先用谁，没有则向"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "上"
												},
												{
													"Type": "NodeText",
													"Data": "找"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-xxb7xg7",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-xxb7xg7"
									},
									"Children": [
										{
											"ID": "20210707214341-ft9w5t0",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-ft9w5t0"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "间接通过成员方法访问"
												},
												{
													"Type": "NodeText",
													"Data": "成员变量：该"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "方法属于谁"
												},
												{
													"Type": "NodeText",
													"Data": "，就优先用谁，没有则向"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "上"
												},
												{
													"Type": "NodeText",
													"Data": "找"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-ub85hei",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-ub85hei"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "继承后"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "构造方法"
				},
				{
					"Type": "NodeText",
					"Data": "：无影响，但是子类构造方法默认调用父类构造方法"
				}
			]
		},
		{
			"ID": "20210707214341-wom910w",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-wom910w"
			},
			"Children": [
				{
					"ID": "20210707214341-qm008lp",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-qm008lp"
					},
					"Children": [
						{
							"ID": "20210707214341-5oroooi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-5oroooi"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "子类构造必须先调用父类构造方法进行初始化"
								},
								{
									"Type": "NodeText",
									"Data": "，不写则默认"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "赠送 super()"
								},
								{
									"Type": "NodeText",
									"Data": "，写则用写的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "指定 super"
								},
								{
									"Type": "NodeText",
									"Data": "调用"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-k8w0ivq",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-k8w0ivq"
					},
					"Children": [
						{
							"ID": "20210707214341-bjx3cqk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-bjx3cqk"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造方法的名字是与类名一致的。所以子类是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "无法继承"
								},
								{
									"Type": "NodeText",
									"Data": "父类"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "构造方法"
								},
								{
									"Type": "NodeText",
									"Data": "的"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-q6m96va",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-q6m96va"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "继承后"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "成员方法"
				},
				{
					"Type": "NodeText",
					"Data": "：重名，子类重写父类方法。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "编译看左边，运行看右边"
				}
			]
		},
		{
			"ID": "20210707214341-rff6a0y",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-rff6a0y"
			},
			"Children": [
				{
					"ID": "20210707214341-55wnltl",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-55wnltl"
					},
					"Children": [
						{
							"ID": "20210707214341-cx17jrd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-cx17jrd"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在父子类的继承关系中，创建子类对象，访问成员方法的规则："
								}
							]
						},
						{
							"ID": "20210707214341-e0k0inh",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-e0k0inh"
							},
							"Children": [
								{
									"ID": "20210707214341-lbhflgh",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-lbhflgh"
									},
									"Children": [
										{
											"ID": "20210707214341-12n9dwp",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-12n9dwp"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "创建的对象(new)是谁，就优先用谁"
												},
												{
													"Type": "NodeText",
													"Data": "，没有则向"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "上"
												},
												{
													"Type": "NodeText",
													"Data": "找"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-4p2zf5l",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-4p2zf5l"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "优缺点"
				}
			]
		},
		{
			"ID": "20210707214341-1um0mpf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-1um0mpf"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "优点"
				}
			]
		},
		{
			"ID": "20210707214341-3uhwcd1",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-3uhwcd1"
			},
			"Children": [
				{
					"ID": "20210707214341-ompz9t0",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-ompz9t0"
					},
					"Children": [
						{
							"ID": "20210707214341-zhda6sf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-zhda6sf"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "通过共性抽取减少了代码冗余，提高代码复用性"
								},
								{
									"Type": "NodeText",
									"Data": "。也可以通过其他方式来解决这个代码复用的问题，比如利用组合关系而不是继承关系"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-qlh5hn7",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-qlh5hn7"
					},
					"Children": [
						{
							"ID": "20210707214341-1zgb1ed",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-1zgb1ed"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "继承的出现更有利于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "功能的扩展"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-b5rcugw",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-b5rcugw"
					},
					"Children": [
						{
							"ID": "20210707214341-3gvfcd1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-3gvfcd1"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "继承的出现让"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "类与类之间产生了关系，提供了多态的前提"
								},
								{
									"Type": "NodeText",
									"Data": "。但是不要仅为了获取其他类中某个功能而去继承"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-qrnsjw3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-qrnsjw3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缺点"
				}
			]
		},
		{
			"ID": "20210707214341-vvbp0zb",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-vvbp0zb"
			},
			"Children": [
				{
					"ID": "20210707214341-6v6dxpx",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-6v6dxpx"
					},
					"Children": [
						{
							"ID": "20210707214341-o0ummyj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-o0ummyj"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "过度使用继承，继承层次过深过复杂，就会导致代码可读性、可维护性变差。为了了解一个类的功能，我们不仅需要查看这个类的代码，还需要按照继承关系一层一层地往上查看“父类、父类的父类……”的代码。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-608vc41",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-608vc41"
					},
					"Children": [
						{
							"ID": "20210707214341-qx0vwzl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-qx0vwzl"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "子类和父类高度耦合，修改父类的代码，会直接影响到子类。继承这个特性也是一个非常有争议的特性。很多人觉得继承是一种反模式。我们应该尽量少用，甚至不用。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-yinovsk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-yinovsk"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "单继承"
				}
			]
		},
		{
			"ID": "20210707214341-0lm9uzn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-0lm9uzn"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自从 C++ 引入以来，一个 OOP 问题变得尤为突出：是否所有的类都应该默认从一个基类继承呢？这个答案在 Java 中是肯定的（实际上，除 C++ 以外的几乎所有 OOP 语言中也是这样）。在 Java 中，这个最终基类的名字就是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Object"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210707214341-8kahipo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-8kahipo"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java 的单继承结构有很多好处。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "由于所有对象都具有一个公共接口，因此它们最终都属于同一个基类"
				},
				{
					"Type": "NodeText",
					"Data": "。相反的，对于 C++ 所使用的多继承的方案则是不保证所有的对象都属于同一个基类。从向后兼容的角度看，多继承的方案更符合 C 的模型，而且受限较少。"
				}
			]
		},
		{
			"ID": "20210707214341-rm23knq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-rm23knq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于完全面向对象编程，我们必须要构建自己的层次结构，以提供与其他 OOP 语言同样的便利。我们经常会使用到新的类库和不兼容的接口。为了整合它们而花费大气力（有可能还要用上多继承）以获得 C++ 样的“灵活性”值得吗？如果从零开始，Java 这样的替代方案会是更好的选择。"
				}
			]
		},
		{
			"ID": "20210707214341-qywf3lz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-qywf3lz"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "另外，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "单继承的结构使得垃圾收集器的实现更为容易"
				},
				{
					"Type": "NodeText",
					"Data": "。这也是 Java 在 C++ 基础上的根本改进之一。"
				}
			]
		},
		{
			"ID": "20210707214341-cywgo27",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-cywgo27"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "运行期的类型信息会存在于所有对象中，所以我们永远不会遇到判断不了对象类型的情况"
				},
				{
					"Type": "NodeText",
					"Data": "。这对于系统级操作尤其重要，例如异常处理。同时，这也让我们的编程具有更大的灵活性。"
				}
			]
		},
		{
			"ID": "20210707214341-jlke4cp",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707214341-jlke4cp"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "多态—Polymorphism"
				}
			]
		},
		{
			"ID": "20210707214341-mmjdkt5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-mmjdkt5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "::: tip 提示"
				}
			]
		},
		{
			"ID": "20210707214341-orw4vy8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-orw4vy8"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多态，也称为动态绑定 或 后期绑定 或 运行时绑定"
				}
			]
		},
		{
			"ID": "20210707214341-tdyxb8i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-tdyxb8i"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": ":::"
				}
			]
		},
		{
			"ID": "20210707214341-fq7q4ak",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-fq7q4ak"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20210707214341-6xuqhf1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-6xuqhf1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多态提供了另一个维度的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "接口与实现分离"
				},
				{
					"Type": "NodeText",
					"Data": "，以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "解耦做什么和怎么做"
				},
				{
					"Type": "NodeText",
					"Data": "，消除类型之间耦合，因而一段代码就可以无差别地运行在所有不同的类型上了。多态可以理解为一个事物的多种形态。体现为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "对象的多态性"
				},
				{
					"Type": "NodeText",
					"Data": "，是指"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "父类的引用指向子类的对象"
				},
				{
					"Type": "NodeText",
					"Data": "，在实际的代码运行过程中，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "调用子类"
				},
				{
					"Type": "NodeText",
					"Data": "的方法实现。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "方法重载（@overload）实现编译时多态（有时不考虑这个）；方法重写（@override）实现运行时多态。"
				}
			]
		},
		{
			"ID": "20210707214341-4pkshva",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-4pkshva"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java 引用变量有两个类型：编译时类型和运行时类型"
				}
			]
		},
		{
			"ID": "20210707214341-t6d544p",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-t6d544p"
			},
			"Children": [
				{
					"ID": "20210707214341-9klvqy2",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-9klvqy2"
					},
					"Children": [
						{
							"ID": "20210707214341-8bdb7wi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-8bdb7wi"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "编译时类型由声明该变量时使用的类型决定"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-0eqzrx8",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-0eqzrx8"
					},
					"Children": [
						{
							"ID": "20210707214341-k96iugn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-k96iugn"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "运行时类型由实际赋给该变量的对象决定"
								}
							]
						},
						{
							"ID": "20210707214341-wo0use7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-wo0use7"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "编译时，看左边；运行时，看右边"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-gfcjjgu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-gfcjjgu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "若编译时类型和运行时类型不一致，就出现了对象的多态性，多态情况下"
				}
			]
		},
		{
			"ID": "20210707214341-viui6kn",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-viui6kn"
			},
			"Children": [
				{
					"ID": "20210707214341-qzh4fd5",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-qzh4fd5"
					},
					"Children": [
						{
							"ID": "20210707214341-v9b5o1n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-v9b5o1n"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "“看左边”：看的是父类的引用（父类中不具备子类特有的方法）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-mts6wx4",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-mts6wx4"
					},
					"Children": [
						{
							"ID": "20210707214341-ounuvkm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-ounuvkm"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "“看右边”：看的是子类的对象（实际运行的是子类重写父类的方法）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-2rmvxg0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-2rmvxg0"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们在处理类的层次结构时，通常把一个对象看成是它所属的基类，而不是把它当成具体类。通过这种方式，我们可以编写出不局限于特定类型的代码。这样的代码不会受添加的新类型影响，并且添加新类型是扩展面向对象程序以处理新情况的常用方法。通过派生新的子类来扩展设计的这种能力是封装变化的基本方法之一。"
				}
			]
		},
		{
			"ID": "20210707214341-djmg77g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-djmg77g"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这种能力改善了我们的设计，且减少了软件的维护代价。如果我们把派生的对象类型统一看成是它本身的基类（“圆”当作“形状”，“自行车”当作“车”，“鸬鹚”当作“鸟”等等），编译器（compiler）在编译时期就无法准确地知道什么“形状”被擦除，哪一种“车”在行驶，或者是哪种“鸟”在飞行。这就是关键所在：当程序接收这种消息时，程序员并不想知道哪段代码会被执行。“绘图”的方法可以平等地应用到每种可能的“形状”上，形状会依据自身的具体类型执行恰当的代码。"
				}
			]
		},
		{
			"ID": "20210707214341-87iknqf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-87iknqf"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果不需要知道执行了哪部分代码，那我们就能添加一个新的不同执行方式的子类而不需要更改调用它的方法。那么编译器在不确定该执行哪部分代码时是怎么做的呢？举个例子，下图的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "BirdController"
				},
				{
					"Type": "NodeText",
					"Data": " 对象和通用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Bird"
				},
				{
					"Type": "NodeText",
					"Data": " 对象中，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "BirdController"
				},
				{
					"Type": "NodeText",
					"Data": " 不知道 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Bird"
				},
				{
					"Type": "NodeText",
					"Data": " 的确切类型却还能一起工作。从 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "BirdController"
				},
				{
					"Type": "NodeText",
					"Data": " 的角度来看，这是很方便的，因为它不需要编写特别的代码来确定 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Bird"
				},
				{
					"Type": "NodeText",
					"Data": " 对象的确切类型或行为。那么，在调用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "move()"
				},
				{
					"Type": "NodeText",
					"Data": " 方法时是如何保证发生正确的行为（鹅走路、飞或游泳、企鹅走路或游泳）的呢？"
				}
			]
		},
		{
			"ID": "20210707214341-oj0nqvu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-oj0nqvu"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "Bird-example"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "../assets/1545839316314.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-jg1mv8y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-jg1mv8y"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个问题的答案，是面向对象程序设计的妙诀：在传统意义上，编译器不能进行函数调用。由非 OOP 编译器产生的函数调用会引起所谓的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "早期绑定"
				},
				{
					"Type": "NodeText",
					"Data": "，这个术语你可能从未听说过，不会想过其他的函数调用方式。这意味着编译器生成对特定函数名的调用，该调用会被解析为将执行的代码的绝对地址。"
				}
			]
		},
		{
			"ID": "20210707214341-bljvevj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-bljvevj"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过继承，程序直到运行时才能确定代码的地址，因此发送消息给对象时，还需要其他一些方案。为了解决这个问题，面向对象语言使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "后期绑定"
				},
				{
					"Type": "NodeText",
					"Data": "的概念。当向对象发送信息时，被调用的代码直到运行时才确定。编译器确保方法存在，并对参数和返回值执行类型检查，但是它不知道要执行的确切代码。"
				}
			]
		},
		{
			"ID": "20210707214341-1a71xu3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-1a71xu3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了执行后期绑定，Java 使用一个特殊的代码位来代替绝对调用。这段代码使用对象中存储的信息来计算方法主体的地址（此过程在多态性章节中有详细介绍）。因此，每个对象的行为根据特定代码位的内容而不同。当你向对象发送消息时，对象知道该如何处理这条消息。在某些语言中，必须显式地授予方法后期绑定属性的灵活性。例如，C++ 使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "virtual"
				},
				{
					"Type": "NodeText",
					"Data": " 关键字。在这些语言中，默认情况下方法不是动态绑定的。在 Java 中，动态绑定是默认行为，不需要额外的关键字来实现多态性。"
				}
			]
		},
		{
			"ID": "20210707214341-tofekvw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-tofekvw"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了演示多态性，我们编写了一段代码，它忽略了类型的具体细节，只与基类对话。该代码与具体类型信息分离，因此更易于编写和理解。而且，如果通过继承添加了一个新类型（例如，一个六边形），那么代码对于新类型的 Shape 就像对现有类型一样有效。因此，该程序是可扩展的。"
				}
			]
		},
		{
			"ID": "20210707214341-5hzby4s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-5hzby4s"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例："
				}
			]
		},
		{
			"ID": "20210707214341-676e4q6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-676e4q6"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void doSomething(Shape shape) {\n    shape.erase();\n    // ...\n    shape.draw();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-4ed6rjb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-4ed6rjb"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此方法与任何 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Shape"
				},
				{
					"Type": "NodeText",
					"Data": " 对话，因此它与所绘制和擦除的对象的具体类型无关。如果程序的其他部分使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "doSomething()"
				},
				{
					"Type": "NodeText",
					"Data": " 方法："
				}
			]
		},
		{
			"ID": "20210707214341-qcom1j1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-qcom1j1"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Circle circle = new Circle();\nTriangle triangle = new Triangle();\nLine line = new Line();\ndoSomething(circle);\ndoSomething(triangle);\ndoSomething(line);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-3p7tij3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-3p7tij3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到无论传入的“形状”是什么，程序都正确的执行了。"
				}
			]
		},
		{
			"ID": "20210707214341-j2ntj3r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-j2ntj3r"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "shape-example"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "../assets/1545841270997.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-grpty58",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-grpty58"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这是一个非常令人惊奇的编程技巧。分析下面这行代码："
				}
			]
		},
		{
			"ID": "20210707214341-2ovcry6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-2ovcry6"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "doSomething(circle);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-2khs10y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-2khs10y"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当预期接收 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Shape"
				},
				{
					"Type": "NodeText",
					"Data": " 的方法被传入了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Circle"
				},
				{
					"Type": "NodeText",
					"Data": "，会发生什么。由于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Circle"
				},
				{
					"Type": "NodeText",
					"Data": " 也是一种 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Shape"
				},
				{
					"Type": "NodeText",
					"Data": "，所以 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "doSomething(circle)"
				},
				{
					"Type": "NodeText",
					"Data": " 能正确地执行。也就是说，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "doSomething()"
				},
				{
					"Type": "NodeText",
					"Data": " 能接收任意发送给 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Shape"
				},
				{
					"Type": "NodeText",
					"Data": " 的消息。这是完全安全和合乎逻辑的事情。"
				}
			]
		},
		{
			"ID": "20210707214341-62pifon",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-62pifon"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这种把子类当成其基类来处理的过程叫做“向上转型”（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "upcasting"
				},
				{
					"Type": "NodeText",
					"Data": "）。在面向对象的编程里，经常利用这种方法来给程序解耦。再看下面的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "doSomething()"
				},
				{
					"Type": "NodeText",
					"Data": " 代码示例："
				}
			]
		},
		{
			"ID": "20210707214341-w3yz9fq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-w3yz9fq"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "shape.erase();\n// ...\nshape.draw();\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-3o04osn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-3o04osn"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以看到程序并未这样表达：“如果你是一个 Circle ，就这样做；如果你是一个 Square，就那样做...”。若那样编写代码，就需检查 Shape 所有可能的类型，如圆、矩形等等。这显然是非常麻烦的，而且每次添加了一种新的 Shape 类型后，都要相应地进行修改。在这里，我们只需说：“你是一种几何形状，我知道你能删掉 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "erase()"
				},
				{
					"Type": "NodeText",
					"Data": " 和绘制 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "draw()"
				},
				{
					"Type": "NodeText",
					"Data": "，你自己去做吧，注意细节。”"
				}
			]
		},
		{
			"ID": "20210707214341-2pygsqn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-2pygsqn"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "尽管我们没作出任何特殊指示，程序的操作也是完全正确和恰当的。我们知道，为 Circle 调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "draw()"
				},
				{
					"Type": "NodeText",
					"Data": " 时执行的代码与为一个 Square 或 Line 调用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "draw()"
				},
				{
					"Type": "NodeText",
					"Data": " 时执行的代码是不同的。但在将 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "draw()"
				},
				{
					"Type": "NodeText",
					"Data": " 信息发给一个匿名 Shape 时，根据 Shape 句柄当时连接的实际类型，会相应地采取正确的操作。这非常神奇，因为当 Java 编译器为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "doSomething()"
				},
				{
					"Type": "NodeText",
					"Data": " 编译代码时，它并不知道自己要操作的准确类型是什么。"
				}
			]
		},
		{
			"ID": "20210707214341-eqypaoo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-eqypaoo"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "尽管我们确实可以保证最终会为 Shape 调用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "erase()"
				},
				{
					"Type": "NodeText",
					"Data": " 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "draw()"
				},
				{
					"Type": "NodeText",
					"Data": "，但并不能确定特定的 Circle，Square 或者 Line 调用什么。最后，程序执行的操作却依然是正确的，这是怎么做到的呢？"
				}
			]
		},
		{
			"ID": "20210707214341-vewd7in",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-vewd7in"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "发送消息给对象时，如果程序不知道接收的具体类型是什么，但最终执行是正确的，这就是对象的“多态性”（Polymorphism）。面向对象的程序设计语言是通过“"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "动态绑定"
				},
				{
					"Type": "NodeText",
					"Data": "”的方式来"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "实现对象的多态性"
				},
				{
					"Type": "NodeText",
					"Data": "的。编译器和运行时系统会负责对所有细节的控制；我们只需知道要做什么，以及如何利用多态性来更好地设计程序。"
				}
			]
		},
		{
			"ID": "20210707214341-1jcq5e6",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-1jcq5e6"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "实现机制"
				}
			]
		},
		{
			"ID": "20210707214341-dtjk3va",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-dtjk3va"
			},
			"Children": [
				{
					"ID": "20210707214341-iyphugd",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-iyphugd"
					},
					"Children": [
						{
							"ID": "20210707214341-ylm1bm4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-ylm1bm4"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "继承"
								},
								{
									"Type": "NodeText",
									"Data": "或者"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "实现接口"
								},
								{
									"Type": "NodeText",
									"Data": "（二选一）"
								}
							]
						},
						{
							"ID": "20210707214341-hwr1zou",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-hwr1zou"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "::: tip"
								}
							]
						},
						{
							"ID": "20210707214341-jjtn9hw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-jjtn9hw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "动态语言中的 duck-typing 语法也可以实现多态"
								}
							]
						},
						{
							"ID": "20210707214341-xo4fyql",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-xo4fyql"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": ":::"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-8wecqxo",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-8wecqxo"
					},
					"Children": [
						{
							"ID": "20210707214341-3v1h0gi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-3v1h0gi"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "子类可以重写父类中的方法"
								},
								{
									"Type": "NodeText",
									"Data": "——意义体现，若不重写，则无意义"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-tivvkch",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-tivvkch"
					},
					"Children": [
						{
							"ID": "20210707214341-q6zz09w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-q6zz09w"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "父类引用指向子类对象"
								},
								{
									"Type": "NodeText",
									"Data": "——格式体现"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-g96ov5h",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-g96ov5h"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "多态的使用—虚拟方法调用"
				}
			]
		},
		{
			"ID": "20210707214341-3n9j9mb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-3n9j9mb"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。"
				}
			]
		},
		{
			"ID": "20210707214341-thxyjle",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-thxyjle"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "虚拟方法调用(Virtual Method Invocation)，多态情况下：子类中定义了与父类同名同参数的方法，在多态情况下，将此时"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "父类的方法称为虚拟方法"
				},
				{
					"Type": "NodeText",
					"Data": "，父类根据赋给它的不同子类对象，动态调用属于子类的该方法。即"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "参数的值传递机制体现对象多态性"
				},
				{
					"Type": "NodeText",
					"Data": "。这样的方法调用在编译期是无法确定的。"
				}
			]
		},
		{
			"ID": "20210707214341-foaj62i",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-foaj62i"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "成员访问特点"
				}
			]
		},
		{
			"ID": "20210707214341-7gacivo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-7gacivo"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "::: tip 重点"
				}
			]
		},
		{
			"ID": "20210707214341-zrw636r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-zrw636r"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "继承 \u0026 多态中成员访问特点总结为："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "对象的多态性，只适用于成员方法"
				}
			]
		},
		{
			"ID": "20210707214341-arllz9s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-arllz9s"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": ":::"
				}
			]
		},
		{
			"ID": "20210707214341-s1skmrb",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-s1skmrb"
			},
			"Children": [
				{
					"ID": "20210707214341-krp8cmr",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-krp8cmr"
					},
					"Children": [
						{
							"ID": "20210707214341-u099sry",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-u099sry"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "成员变量：编译看左边，运行看左边。没有则向上找。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-0dducgq",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-0dducgq"
					},
					"Children": [
						{
							"ID": "20210707214341-w6c7tb4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-w6c7tb4"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态方法或变量：编译看左边，运行看左边（与类相关）。没有则向上找。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-77ek1si",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-77ek1si"
					},
					"Children": [
						{
							"ID": "20210707214341-kl894zx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-kl894zx"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "成员方法"
								},
								{
									"Type": "NodeText",
									"Data": "：编译看"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "左"
								},
								{
									"Type": "NodeText",
									"Data": "边，运行看"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "右"
								},
								{
									"Type": "NodeText",
									"Data": "边（"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "依赖对象，因为有方法重写"
								},
								{
									"Type": "NodeText",
									"Data": "）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-go9h7bx",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-go9h7bx"
					},
					"Children": [
						{
							"ID": "20210707214341-r9b23pw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-r9b23pw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造方法：创建子类对象时访问父类构造方法对父类成员进行初始化"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-unzxox1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-unzxox1"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "对象类型转换"
				}
			]
		},
		{
			"ID": "20210707214341-36jrqto",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-36jrqto"
			},
			"Children": [
				{
					"ID": "20210707214341-mwd105h",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-mwd105h"
					},
					"Children": [
						{
							"ID": "20210707214341-vx8fpzm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-vx8fpzm"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "基本数据类型的 Casting"
								}
							]
						},
						{
							"ID": "20210707214341-tqbdafy",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-tqbdafy"
							},
							"Children": [
								{
									"ID": "20210707214341-gx87tmx",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-gx87tmx"
									},
									"Children": [
										{
											"ID": "20210707214341-3cmgn66",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-3cmgn66"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "自动类型转换：小的数据类型可以自动转换成大的数据类型。略"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-x06vdre",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-x06vdre"
									},
									"Children": [
										{
											"ID": "20210707214341-inx4rl1",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-inx4rl1"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "强制类型转换：可以把大的数据类型强制转换(casting)成小的数据类型。略"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-8y3q26k",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-8y3q26k"
					},
					"Children": [
						{
							"ID": "20210707214341-2s700kk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-2s700kk"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Java 对象的强制类型转换"
								},
								{
									"Type": "NodeText",
									"Data": "称为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "造型"
								}
							]
						},
						{
							"ID": "20210707214341-t662sfx",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-t662sfx"
							},
							"Children": [
								{
									"ID": "20210707214341-3awpi1v",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-3awpi1v"
									},
									"Children": [
										{
											"ID": "20210707214341-w4jvig8",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-w4jvig8"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "从子类到父类的类型转换可以自动进行（多态）"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-madrcz8",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-madrcz8"
									},
									"Children": [
										{
											"ID": "20210707214341-4e40olu",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-4e40olu"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "从父类到子类的类型转换必须通过造型(强制类型转换)实现。可能出现 ClassCastException，需先 instanceof 判断"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-jaau0py",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-jaau0py"
									},
									"Children": [
										{
											"ID": "20210707214341-84yaiqz",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-84yaiqz"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "无继承关系的引用类型间的转换是非法的"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-zjkl0w6",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-zjkl0w6"
									},
									"Children": [
										{
											"ID": "20210707214341-sf3qz6z",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-sf3qz6z"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在造型前可以使用 instanceof 操作符测试一个对象的类型"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-96jjjpv",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-96jjjpv"
					},
					"Children": [
						{
							"ID": "20210707214341-wkluwbt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-wkluwbt"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "instanceof"
								},
								{
									"Type": "NodeText",
									"Data": " "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "x instanceof A"
								},
								{
									"Type": "NodeText",
									"Data": "：检验 x 是否为类 A 的对象，返回值为 boolean 型"
								}
							]
						},
						{
							"ID": "20210707214341-e8berfo",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-e8berfo"
							},
							"Children": [
								{
									"ID": "20210707214341-zpdhlou",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-zpdhlou"
									},
									"Children": [
										{
											"ID": "20210707214341-8abevpr",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-8abevpr"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "要求 x 所属的类与类 A 必须是子类和父类的关系，否则编译错误。"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-dvj7vw3",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-dvj7vw3"
									},
									"Children": [
										{
											"ID": "20210707214341-rbjnfxa",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-rbjnfxa"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果 x 属于类 A 的子类 B，x instanceof A 值也为 true。"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-mpvyeyd",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-mpvyeyd"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "优缺点"
				}
			]
		},
		{
			"ID": "20210707214341-krqtuib",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-krqtuib"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "优点"
				}
			]
		},
		{
			"ID": "20210707214341-gjewez5",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-gjewez5"
			},
			"Children": [
				{
					"ID": "20210707214341-kjm437a",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-kjm437a"
					},
					"Children": [
						{
							"ID": "20210707214341-ehldegr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-ehldegr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "改善代码的组织，提高代码的可读性"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-8hscp7v",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-8hscp7v"
					},
					"Children": [
						{
							"ID": "20210707214341-f99q4q1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-f99q4q1"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "提高代码的可扩展性"
								},
								{
									"Type": "NodeText",
									"Data": "——无论在最初创建项目时还是在添加新特性时都可以“生长”的程序"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-jdyq0is",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-jdyq0is"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "示例"
				}
			]
		},
		{
			"ID": "20210707214341-ohu7bcj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-ohu7bcj"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多态也是很多设计模式、设计原则、编程技巧的代码实现基础，比如策略模式、基于接口而非实现编程、依赖倒置原则、里式替换原则、利用多态去掉冗长的 if-else 语句等等。"
				}
			]
		},
		{
			"ID": "20210707214341-cdem0on",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-cdem0on"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "::: tip 动态语言中 duck-typing 语法"
				}
			]
		},
		{
			"ID": "20210707214341-pnokc4b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-pnokc4b"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "继承和实现接口来实现多态就不多赘述，下面来看下，如何用 duck-typing 来实现多态特性："
				}
			]
		},
		{
			"ID": "20210707214341-329cvyv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "cHl0aG9u",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-329cvyv"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cHl0aG9u"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Logger:\n    def record(self):\n        print(“I write a log into file.”)\n\nclass DB:\n    def record(self):\n        print(“I insert data into db. ”)\n\ndef test(recorder):\n    recorder.record()\n\ndef demo():\n    logger = Logger()\n    db = DB()\n    test(logger)\n    test(db)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-jgqtgq0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-jgqtgq0"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "duck-typing 实现多态的方式非常灵活。Logger 和 DB 两个类没有任何关系，既不是继承关系，也不是接口和实现的关系，但是只要它们都有定义了 record() 方法，就可以被传递到 test() 方法中，在实际运行的时候，执行对应的 record() 方法。也就是说，只要两个类具有相同的方法，就可以实现多态，并不要求两个类之间有任何关系，这就是所谓的 duck-typing，是一些动态语言所特有的语法机制。"
				}
			]
		},
		{
			"ID": "20210707214341-2fgglnm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-2fgglnm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": ":::"
				}
			]
		},
		{
			"ID": "20210707214341-6aocmwm",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707214341-6aocmwm"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "复用"
				}
			]
		},
		{
			"ID": "20210707214341-32sgeyr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-32sgeyr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码复用是面向对象编程（OOP）最具魅力的原因之一。在本章里，你将学习到两种方式来达到这个目的："
				}
			]
		},
		{
			"ID": "20210707214341-p713ixz",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-p713ixz"
			},
			"Children": [
				{
					"ID": "20210707214341-g9122jr",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-g9122jr"
					},
					"Children": [
						{
							"ID": "20210707214341-aqvgwf7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-aqvgwf7"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "继承"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-z7bk13t",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-z7bk13t"
					},
					"Children": [
						{
							"ID": "20210707214341-4fd4rso",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-4fd4rso"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "组合"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-7ofl9mv",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-7ofl9mv"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "继承"
				}
			]
		},
		{
			"ID": "20210707214341-dyf6t1r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-dyf6t1r"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看继承章节"
				}
			]
		},
		{
			"ID": "20210707214341-4yhv9bu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-4yhv9bu"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "组合 \u0026 聚合"
				}
			]
		},
		{
			"ID": "20210707214341-01m2o9m",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-01m2o9m"
			},
			"Children": [
				{
					"ID": "20210707214341-aytrzw1",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-aytrzw1"
					},
					"Children": [
						{
							"ID": "20210707214341-o3lct9x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-o3lct9x"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "组合"
								},
								{
									"Type": "NodeText",
									"Data": "（Composition）经常用来表示“"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "拥有"
								},
								{
									"Type": "NodeText",
									"Data": "”关系（has-a relationship）。例如，“汽车拥有引擎”。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "仅需要把对象的引用（object references）放置在一个新的类里"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-qn81b84",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-qn81b84"
					},
					"Children": [
						{
							"ID": "20210707214341-nxb9xrr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-nxb9xrr"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "聚合"
								},
								{
									"Type": "NodeText",
									"Data": "（Aggregation）动态的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "组合"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-18yim36",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-18yim36"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用“组合”关系给我们的程序带来极大的灵活性。通常新建的类中，成员对象会使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "private"
				},
				{
					"Type": "NodeText",
					"Data": " 访问权限，这样应用程序员则无法对其直接访问。我们就可以在不影响客户代码的前提下，从容地修改那些成员。我们也可以在“运行时\"改变成员对象从而动态地改变程序的行为，这进一步增大了灵活性。而“继承”并不具备这种灵活性，因为编译器对通过继承创建的类进行了限制。"
				}
			]
		},
		{
			"ID": "20210707214341-lgtxbvd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-lgtxbvd"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在面向对象编程中经常重点强调“继承”。在新手程序员的印象里，或许先入为主地认为“继承应当随处可见”。沿着这种思路产生的程序设计通常拙劣又复杂。相反，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "在创建新类时首先要考虑“组合”"
				},
				{
					"Type": "NodeText",
					"Data": "，因为它更简单灵活，而且设计更加清晰。"
				}
			]
		},
		{
			"ID": "20210707214341-f5453l1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-f5453l1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "::: tip 组合和聚合的区别"
				}
			]
		},
		{
			"ID": "20210707214341-a1554az",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-a1554az"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "组合和聚合都属于关联关系的一种，只是额外具有整体-部分的意义。至于是聚合还是组合，需要根据实际的业务需求来判断。可能相同超类和子类，在不同的业务场景，关联关系会发生变化。只看代码是无法区分聚合和组合的，具体是哪一种关系，只能从语义级别来区分。聚合关系中，整件不会拥有部件的生命周期，所以整件删除时，部件不会被删除。再者，多个整件可以共享同一个部件。组合关系中，整件拥有部件的生命周期，所以整件删除时，部件一定会跟着删除。而且，多个整件不可以同时共享同一个部件。这个区别可以用来区分某个关联关系到底是组合还是聚合。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "两个类生命周期不同步，则是聚合关系，生命周期同步就是组合关系。"
				}
			]
		},
		{
			"ID": "20210707214341-gc760z4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-gc760z4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": ":::"
				}
			]
		},
		{
			"ID": "20210707214341-a9laypa",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-a9laypa"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "委托"
				}
			]
		},
		{
			"ID": "20210707214341-ef4xnzh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-ef4xnzh"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java 不直接支持的第三种重用关系称为委托。这"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "介于继承和组合之间"
				},
				{
					"Type": "NodeText",
					"Data": "，因为你将一个成员对象放在正在构建的类中(比如组合)，但同时又在新类中公开来自成员对象的所有方法(比如继承)。例如，宇宙飞船需要一个控制模块:"
				}
			]
		},
		{
			"ID": "20210707214341-hw0yetn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-hw0yetn"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class SpaceShipControls {\n  void up(int velocity) {}\n  void down(int velocity) {}\n  void left(int velocity) {}\n  void right(int velocity) {}\n  void forward(int velocity) {}\n  void back(int velocity) {}\n  void turboBoost() {}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-mizxj6u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-mizxj6u"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "建造宇宙飞船的一种方法是使用继承:"
				}
			]
		},
		{
			"ID": "20210707214341-wr5esm6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-wr5esm6"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class DerivedSpaceShip extends SpaceShipControls {\n  private String name;\n\n  public DerivedSpaceShip(String name) {\n    this.name = name;\n  }\n\n  @Override\n  public String toString() { return name; }\n\n  public static void main(String[] args) {\n    DerivedSpaceShip protector =\n        new DerivedSpaceShip(\"NSEA Protector\");\n    protector.forward(100);\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-xq3brhf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-xq3brhf"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然而， "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "DerivedSpaceShip"
				},
				{
					"Type": "NodeText",
					"Data": " 并"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "不是"
				},
				{
					"Type": "NodeText",
					"Data": "真正的“一种” "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "SpaceShipControls"
				},
				{
					"Type": "NodeText",
					"Data": "（不属于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "is-a"
				},
				{
					"Type": "NodeText",
					"Data": "关系） ，即使你“告诉” "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "DerivedSpaceShip"
				},
				{
					"Type": "NodeText",
					"Data": " 调用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "forward()"
				},
				{
					"Type": "NodeText",
					"Data": "。更准确地说，一艘宇宙飞船包含了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "SpaceShipControls ，同时 SpaceShipControls"
				},
				{
					"Type": "NodeText",
					"Data": " 中的所有方法都暴露在宇宙飞船中。委托解决了这个难题:"
				}
			]
		},
		{
			"ID": "20210707214341-qm6a9qd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-qm6a9qd"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class SpaceShipDelegation {\n  private String name;\n  private SpaceShipControls controls =\n    new SpaceShipControls();\n  public SpaceShipDelegation(String name) {\n    this.name = name;\n  }\n  // Delegated methods:\n  public void back(int velocity) {\n    controls.back(velocity);\n  }\n  public void down(int velocity) {\n    controls.down(velocity);\n  }\n  public void forward(int velocity) {\n    controls.forward(velocity);\n  }\n  public void left(int velocity) {\n    controls.left(velocity);\n  }\n  public void right(int velocity) {\n    controls.right(velocity);\n  }\n  public void turboBoost() {\n    controls.turboBoost();\n  }\n  public void up(int velocity) {\n    controls.up(velocity);\n  }\n  public static void main(String[] args) {\n    SpaceShipDelegation protector =\n      new SpaceShipDelegation(\"NSEA Protector\");\n    protector.forward(100);\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-14cvj61",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-14cvj61"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "方法被转发到底层 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "control"
				},
				{
					"Type": "NodeText",
					"Data": " 对象，因此接口与继承的接口是相同的。但是，你对委托有更多的控制，因为你可以选择只在成员对象中提供方法的子集。"
				}
			]
		},
		{
			"ID": "20210707214341-49zo9r2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-49zo9r2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "虽然 Java 语言不支持"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "委托"
				},
				{
					"Type": "NodeText",
					"Data": "，但是开发工具常常支持。例如，上面的例子是使用 JetBrains Idea IDE 自动生成的。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "调用 Generate 后选择 Delegated methods..."
				}
			]
		},
		{
			"ID": "20210707214341-5e5u7jv",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-5e5u7jv"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "继承与组合的选择"
				}
			]
		},
		{
			"ID": "20210707214341-an0xgud",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-an0xgud"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "当你想在新类中包含一个已有类的功能时，使用组合，而非继承"
				},
				{
					"Type": "NodeText",
					"Data": "。也就是说，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "在新类中嵌入一个对象（通常是私有的"
				},
				{
					"Type": "NodeText",
					"Data": "），以实现其功能。新类的使用者看到的是你所定义的新类的接口，而非嵌入对象的接口。"
				}
			]
		},
		{
			"ID": "20210707214341-h12o578",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-h12o578"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有时让类的用户直接访问到新类中的组合成分是有意义的。只需将成员对象声明为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "public"
				},
				{
					"Type": "NodeText",
					"Data": " 即可（可以把这当作“半委托”的一种）。成员对象隐藏了具体实现，所以这是安全的。当用户知道你正在组装一组部件时，会使得接口更加容易理解。下面的 car 对象是个很好的例子："
				}
			]
		},
		{
			"ID": "20210707214341-irejn7k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-irejn7k"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Engine {\n    public void start() {}\n    public void rev() {}\n    public void stop() {}\n}\n\nclass Wheel {\n    public void inflate(int psi) {}\n}\n\nclass Window {\n    public void rollup() {}\n    public void rolldown() {}\n}\n\nclass Door {\n    public Window window = new Window();\n\n    public void open() {}\n    public void close() {}\n}\n\npublic class Car {\n    public Engine engine = new Engine();\n    public Wheel[] wheel = new Wheel[4];\n    public Door left = new Door(), right = new Door(); // 2-door\n\n    public Car() {\n        for (int i = 0; i \u003c 4; i++) {\n            wheel[i] = new Wheel();\n        }\n    }\n\n    public static void main(String[] args) {\n        Car car = new Car();\n        car.left.window.rollup();\n        car.wheel[0].inflate(72);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-ai45w52",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-ai45w52"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为在这个例子中 car 的组合也是问题分析的一部分（不是底层设计的部分），所以声明成员为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "public"
				},
				{
					"Type": "NodeText",
					"Data": " 有助于客户端程序员理解如何使用类，且降低了类创建者面临的代码复杂度。但是，记住这是一个特例。通常来说，属性还是应该声明为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "private"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210707214341-u1apto6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-u1apto6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当使用继承时，使用一个现有类并开发出它的新版本。通常这意味着使用一个通用类，并为了某个特殊需求将其特殊化。稍微思考下，你就会发现，用一个交通工具对象来组成一部车是毫无意义的——车不包含交通工具，它就是交通工具。这种“是一个”的关系是用继承来表达的，而“有一个“的关系则用组合来表达。"
				}
			]
		},
		{
			"ID": "20210707214341-0brehib",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707214341-0brehib"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "创建对象的数据存储"
				}
			]
		},
		{
			"ID": "20210707214341-7v5xou0",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-7v5xou0"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "内存分配"
				}
			]
		},
		{
			"ID": "20210707214341-460l5yd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-460l5yd"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那么，程序在运行时是如何存储的呢？尤其是内存是怎么分配的。有 5 个不同的地方可以存储数据："
				}
			]
		},
		{
			"ID": "20210707214341-13u8hxi",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Tight": true,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 4,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210707214341-13u8hxi"
			},
			"Children": [
				{
					"ID": "20210707214341-mu2qrfz",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210707214341-mu2qrfz"
					},
					"Children": [
						{
							"ID": "20210707214341-gyij6dr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-gyij6dr"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "寄存器"
								},
								{
									"Type": "NodeText",
									"Data": "（Registers）最快的存储区域，位于 CPU 内部 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://lingcoder.github.io/OnJava8/#/大多数微处理器芯片都有额外的高速缓冲存储器，但这是按照传统存储器而不是寄存器。",
									"TextMarkTextContent": "^2"
								},
								{
									"Type": "NodeText",
									"Data": "。然而，寄存器的数量十分有限，所以寄存器根据需求进行分配。我们对其没有直接的控制权，也无法在自己的程序里找到寄存器存在的踪迹（另一方面，C/C++ 允许开发者向编译器建议寄存器的分配）。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-jfadhh2",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210707214341-jfadhh2"
					},
					"Children": [
						{
							"ID": "20210707214341-s98982c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-s98982c"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "栈内存"
								},
								{
									"Type": "NodeText",
									"Data": "（Stack）存在于常规内存 RAM（随机访问存储器，Random Access Memory）区域中，可通过栈指针获得处理器的直接支持。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "栈指针下移分配内存，上移释放内存"
								},
								{
									"Type": "NodeText",
									"Data": "，这是一种快速有效的内存分配方法，速度仅次于寄存器。创建程序时，Java 系统必须准确地知道栈内保存的所有项的生命周期。这种约束限制了程序的灵活性。因此，虽然在栈内存上存在一些 Java 数据，特别是对象引用，但 Java 对象却是保存在堆内存的。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-qw2v5r4",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20210707214341-qw2v5r4"
					},
					"Children": [
						{
							"ID": "20210707214341-nv67ar5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-nv67ar5"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "堆内存"
								},
								{
									"Type": "NodeText",
									"Data": "（Heap）这是一种通用的内存池（也在 RAM 区域），所有 Java 对象都存在于其中。与栈内存不同，编译器不需要知道对象必须在堆内存上停留多长时间。因此，用堆内存保存数据更具灵活性。创建一个对象时，只需用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "new"
								},
								{
									"Type": "NodeText",
									"Data": " 命令实例化对象即可，当执行代码时，会自动在堆中进行内存分配。这种灵活性是有代价的：分配和清理堆内存要比栈内存需要更多的时间（如果可以用 Java 在栈内存上创建对象，就像在 C++ 中那样的话）。随着时间的推移，Java 的堆内存分配机制现在已经非常快，因此这不是一个值得关心的问题了。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-seh80c1",
					"Type": "NodeListItem",
					"Data": "4",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 4,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "NA==",
						"Num": 4
					},
					"Properties": {
						"id": "20210707214341-seh80c1"
					},
					"Children": [
						{
							"ID": "20210707214341-5ytoyev",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-5ytoyev"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "常量存储"
								},
								{
									"Type": "NodeText",
									"Data": "（Constant storage）常量值通常直接放在程序代码中，因为它们永远不会改变。如需严格保护，可考虑将它们置于只读存储器 ROM （只读存储器，Read Only Memory）中 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "https://lingcoder.github.io/OnJava8/#/一个例子是字符串常量池。所有文字字符串和字符串值常量表达式都会自动放入特殊的静态存储中。",
									"TextMarkTextContent": "^3"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-2g27rt2",
					"Type": "NodeListItem",
					"Data": "5",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 5,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "NQ==",
						"Num": 5
					},
					"Properties": {
						"id": "20210707214341-2g27rt2"
					},
					"Children": [
						{
							"ID": "20210707214341-96zwjz6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-96zwjz6"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "非 RAM 存储"
								},
								{
									"Type": "NodeText",
									"Data": "（Non-RAM storage）数据完全存在于程序之外，在程序未运行以及脱离程序控制后依然存在。两个主要的例子：（1）序列化对象：对象被转换为字节流，通常被发送到另一台机器；（2）持久化对象：对象被放置在磁盘上，即使程序终止，数据依然存在。这些存储的方式都是将对象转存于另一个介质中，并在需要时恢复成常规的、基于 RAM 的对象。Java 为轻量级持久化提供了支持。而诸如 JDBC 和 Hibernate 这些类库为使用数据库存储和检索对象信息提供了更复杂的支持。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-dsm2f2i",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-dsm2f2i"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "基本类型的存储"
				}
			]
		},
		{
			"ID": "20210707214341-he2vcl2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-he2vcl2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有一组类型在 Java 中使用频率很高，它们需要特殊对待，这就是 Java 的基本类型。之所以这么说，是因为它们的创建并不是通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "new"
				},
				{
					"Type": "NodeText",
					"Data": " 关键字来产生。通常 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "new"
				},
				{
					"Type": "NodeText",
					"Data": " 出来的对象都是保存在堆内存中的，以此方式创建小而简单的变量往往是不划算的。所以对于这些基本类型的创建方法，Java 使用了和 C/C++ 一样的策略。也就是说，不是使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "new"
				},
				{
					"Type": "NodeText",
					"Data": " 创建变量，而是使用一个“自动”变量。 这个变量直接存储\"值\"，并置于栈内存中，因此更加高效。"
				}
			]
		},
		{
			"ID": "20210707214341-8i1ux5w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-8i1ux5w"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java 确定了每种基本类型的内存占用大小。 这些大小不会像其他一些语言那样随着机器环境的变化而变化。这种不变性也是 Java 更具可移植性的一个原因。"
				}
			]
		},
		{
			"ID": "20210707214341-nsdstf3",
			"Type": "NodeTable",
			"Data": "| 基本类型 | 大小    | 最小值    | 最大值         | 包装类型  |\n| -------- | ------- | --------- | -------------- | --------- |\n| boolean  | —       | —         | —              | Boolean   |\n| char     | 16 bits | Unicode 0 | Unicode 216 -1 | Character |\n| byte     | 8 bits  | -128      | +127           | Byte      |\n| short    | 16 bits | - 215     | + 215 -1       | Short     |\n| int      | 32 bits | - 231     | + 231 -1       | Integer   |\n| long     | 64 bits | - 263     | + 263 -1       | Long      |\n| float    | 32 bits | IEEE754   | IEEE754        | Float     |\n| double   | 64 bits | IEEE754   | IEEE754        | Double    |\n| void     | —       | —         | —              | Void      |",
			"TableAligns": [
				0,
				0,
				0,
				0,
				0
			],
			"Properties": {
				"id": "20210707214341-nsdstf3"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "基本类型"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "大小"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "最小值"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "最大值"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "包装类型"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "boolean"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "—"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "—"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "—"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Boolean"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "char"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "16 bits"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Unicode 0"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Unicode 216 -1"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Character"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "byte"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "8 bits"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "-128"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "+127"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Byte"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "short"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "16 bits"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "- 215"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "+ 215 -1"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Short"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "int"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "32 bits"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "- 231"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "+ 231 -1"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Integer"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "long"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "64 bits"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "- 263"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "+ 263 -1"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Long"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "float"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "32 bits"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "IEEE754"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "IEEE754"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Float"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "double"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "64 bits"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "IEEE754"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "IEEE754"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Double"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "void"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "—"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "—"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "—"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Void"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-1a4i1fx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-1a4i1fx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所有的数值类型都是有正/负符号的。布尔（boolean）类型的大小没有明确的规定，通常定义为取字面值 “true” 或 “false” 。基本类型有自己对应的包装类型，如果你希望在堆内存里表示基本类型的数据，就需要用到它们的包装类。"
				}
			]
		},
		{
			"ID": "20210707214341-5l6c2in",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-5l6c2in"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "高精度数值"
				}
			]
		},
		{
			"ID": "20210707214341-9onbwxu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-9onbwxu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 Java 中有两种类型的数据可用于高精度的计算。它们是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BigInteger"
				},
				{
					"Type": "NodeText",
					"Data": " 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BigDecimal"
				},
				{
					"Type": "NodeText",
					"Data": "。尽管它们大致可以划归为“包装类型”，但是它们并没有对应的基本类型。"
				}
			]
		},
		{
			"ID": "20210707214341-dg8dvjf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-dg8dvjf"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这两个类包含的方法提供的操作，与对基本类型执行的操作相似。也就是说，能对 int 或 float 做的运算，在 BigInteger 和 BigDecimal 这里也同样可以，只不过必须要通过调用它们的方法来实现而非运算符。此外，由于涉及到的计算量更多，所以运算速度会慢一些。诚然，我们牺牲了速度，但换来了精度。"
				}
			]
		},
		{
			"ID": "20210707214341-4d04a9k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-4d04a9k"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "BigInteger 支持任意精度的整数。可用于精确表示任意大小的整数值，同时在运算过程中不会丢失精度。 BigDecimal 支持任意精度的定点数字。例如，可用它进行精确的货币计算。"
				}
			]
		},
		{
			"ID": "20210707214341-bm10ixm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-bm10ixm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于这两个类的详细信息，请参考 JDK 官方文档。"
				}
			]
		},
		{
			"ID": "20210707214341-hhvrvhs",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-hhvrvhs"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "数组的存储"
				}
			]
		},
		{
			"ID": "20210707214341-lyij5ka",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-lyij5ka"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "许多编程语言都支持数组类型。在 C 和 C++ 中使用数组是危险的，因为那些数组只是内存块。如果程序访问了内存块之外的数组或在初始化之前使用该段内存（常见编程错误），则结果是不可预测的。"
				}
			]
		},
		{
			"ID": "20210707214341-1id211z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-1id211z"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java 的设计主要目标之一是安全性，因此许多困扰 C 和 C++ 程序员的问题不会在 Java 中再现。在 Java 中，数组使用前需要被初始化，并且不能访问数组长度以外的数据。这种范围检查，是以每个数组上少量的内存开销及运行时检查下标的额外时间为代价的，但由此换来的安全性和效率的提高是值得的。（并且 Java 经常可以优化这些操作）。"
				}
			]
		},
		{
			"ID": "20210707214341-ldvk396",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-ldvk396"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当我们创建对象数组时，实际上是创建了一个引用数组，并且每个引用的初始值都为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": " 。在使用该数组之前，我们必须为每个引用指定一个对象 。如果我们尝试使用为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": " 的引用，则会在运行时报错。因此，在 Java 中就防止了数组操作的常规错误。"
				}
			]
		},
		{
			"ID": "20210707214341-f3ko1ju",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-f3ko1ju"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们还可创建基本类型的数组。编译器通过将该数组的内存全部置零来保证初始化。本书稍后将详细介绍数组，特别是在数组章节中。"
				}
			]
		},
		{
			"ID": "20210707214341-q84smc7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707214341-q84smc7"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "对象清理"
				}
			]
		},
		{
			"ID": "20210707214341-ws4zya9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-ws4zya9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在一些编程语言中，管理变量的生命周期需要大量的工作。一个变量需要存活多久？如果我们想销毁它，应该什么时候去做呢？变量生命周期的混乱会导致许多 bug，本小结向你介绍 Java 是如何通过释放存储来简化这个问题的。"
				}
			]
		},
		{
			"ID": "20210707214341-vcun2bm",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-vcun2bm"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "作用域"
				}
			]
		},
		{
			"ID": "20210707214341-3r9sm78",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-3r9sm78"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "大多数程序语言都有作用域的概念。作用域决定了在该范围内定义的变量名的可见性和生存周期。在 C、 C++ 和 Java 中，作用域是由大括号 {} 的位置决定的。例如："
				}
			]
		},
		{
			"ID": "20210707214341-luk1jv3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-luk1jv3"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "{\n    int x = 12;\n    // 仅 x 变量可用\n    {\n        int q = 96;\n        // x 和 q 变量皆可用\n    }\n    // 仅 x 变量可用\n    // 变量 q 不在作用域内\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-7nzumi3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-7nzumi3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java 的变量只有在其作用域内才可用。缩进使得 Java 代码更易于阅读。由于 Java 是一种自由格式的语言，额外的空格、制表符和回车并不会影响程序的执行结果。在 Java 中，你不能执行以下操作，即使这在 C 和 C++ 中是合法的："
				}
			]
		},
		{
			"ID": "20210707214341-4s2g1p9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-4s2g1p9"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "{\n    int x = 12;\n    {\n        int x = 96; // Illegal\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-i8dhn0j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-i8dhn0j"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在上例中， Java 编译器会在提示变量 x 已经被定义过了。因此，在 C/C++ 中将一个较大作用域的变量\"隐藏\"起来的做法，在 Java 中是不被允许的。 因为 Java 的设计者认为这样做会导致程序混乱。"
				}
			]
		},
		{
			"ID": "20210707214341-wvdlmff",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-wvdlmff"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "对象作用域"
				}
			]
		},
		{
			"ID": "20210707214341-8p3mzbu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-8p3mzbu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java 对象与基本类型具有不同的生命周期。当我们使用 new 关键字来创建 Java 对象时，它的生命周期将会超出作用域。因此，下面这段代码示例："
				}
			]
		},
		{
			"ID": "20210707214341-ne78rdq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-ne78rdq"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "{\n    String s = new String(\"a string\");\n}\n// 作用域终点\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-dalt9t2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-dalt9t2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上例中，引用 s 在作用域终点就结束了。但是，引用 s 指向的字符串对象依然还在占用内存。在这段代码中，我们无法在这个作用域之后访问这个对象，因为唯一对它的引用 s 已超出了作用域的范围。在后面的章节中，我们还会学习怎么在编程中传递和复制对象的引用。"
				}
			]
		},
		{
			"ID": "20210707214341-7s3512o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-7s3512o"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "只要你需要，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "new"
				},
				{
					"Type": "NodeText",
					"Data": " 出来的对象就会一直存活下去。 相比在 C++ 编码中操作内存可能会出现的诸多问题，这些困扰在 Java 中都不复存在了。在 C++ 中你不仅要确保对象的内存在你操作的范围内存在，还必须在使用完它们之后，将其销毁。"
				}
			]
		},
		{
			"ID": "20210707214341-l8iggjc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-l8iggjc"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那么问题来了：我们在 Java 中并没有主动清理这些对象，那么它是如何避免 C++ 中出现的内存被填满从而阻塞程序的问题呢？答案是：Java 的垃圾收集器会检查所有 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "new"
				},
				{
					"Type": "NodeText",
					"Data": " 出来的对象并判断哪些不再可达，继而释放那些被占用的内存，供其他新的对象使用。也就是说，我们不必担心内存回收的问题了。你只需简单创建对象即可。当其不再被需要时，能自行被垃圾收集器释放。垃圾回收机制有效防止了因程序员忘记释放内存而造成的“内存泄漏”问题。"
				}
			]
		},
		{
			"ID": "20210707214341-j1i5y7b",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707214341-j1i5y7b"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "类及其成员"
				}
			]
		},
		{
			"ID": "20210707214341-97xr6k1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-97xr6k1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类及其成员包括：成员变量、成员方法、构造器、代码块、内部类"
				}
			]
		},
		{
			"ID": "20210707214341-zwsynfy",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-zwsynfy"
			},
			"Children": [
				{
					"ID": "20210707214341-7ksh976",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-7ksh976"
					},
					"Children": [
						{
							"ID": "20210707214341-lax7zdt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-lax7zdt"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "面向对象的两个要素："
								}
							]
						},
						{
							"ID": "20210707214341-ingoye0",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-ingoye0"
							},
							"Children": [
								{
									"ID": "20210707214341-4frg6m5",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-4frg6m5"
									},
									"Children": [
										{
											"ID": "20210707214341-pcnn7qn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-pcnn7qn"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "类：是对"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "一类事物的描述，是抽象的、概念上"
												},
												{
													"Type": "NodeText",
													"Data": "的定义。是一组相关"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "属性"
												},
												{
													"Type": "NodeText",
													"Data": "和"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "行为"
												},
												{
													"Type": "NodeText",
													"Data": "的集合。"
												}
											]
										},
										{
											"ID": "20210707214341-tddebsu",
											"Type": "NodeList",
											"ListData": {
												"Tight": true,
												"BulletChar": 45,
												"Padding": 2,
												"Marker": "LQ==",
												"Num": -1
											},
											"Properties": {
												"id": "20210707214341-tddebsu"
											},
											"Children": [
												{
													"ID": "20210707214341-3vbxf6k",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-3vbxf6k"
													},
													"Children": [
														{
															"ID": "20210707214341-jfqfseu",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-jfqfseu"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "属性 = 成员变量 = Field（域/字段）"
																},
																{
																	"Type": "NodeText",
																	"Data": "：就是该事物的"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "状态信息"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-jb9n6cn",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-jb9n6cn"
													},
													"Children": [
														{
															"ID": "20210707214341-9kyt9j3",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-9kyt9j3"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "行为 = 成员方法 = 函数 = Method"
																},
																{
																	"Type": "NodeText",
																	"Data": "：就是该事物"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "能够做什么"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-38f54ji",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-38f54ji"
									},
									"Children": [
										{
											"ID": "20210707214341-1ak30ll",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-1ak30ll"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "对象：是"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "实际存在的该类事物的每个个体"
												},
												{
													"Type": "NodeText",
													"Data": "，因而也称为实例(instance)。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-8xbu2p9",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-8xbu2p9"
					},
					"Children": [
						{
							"ID": "20210707214341-s9xinsl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-s9xinsl"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "类的定义格式"
								}
							]
						},
						{
							"ID": "20210707214341-mb83azq",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707214341-mb83azq"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class ClassName {\n    //成员变量，对应事物的属性，描述事物的状态信息\n    //构造方法：创建事物对象\n    //成员方法，对应事物的行为，描述事物能做什么\n    //......\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-030x10t",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-030x10t"
					},
					"Children": [
						{
							"ID": "20210707214341-8fjx6o0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-8fjx6o0"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "对象的使用"
								}
							]
						},
						{
							"ID": "20210707214341-8l36nvh",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-8l36nvh"
							},
							"Children": [
								{
									"ID": "20210707214341-1so13mt",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-1so13mt"
									},
									"Children": [
										{
											"ID": "20210707214341-w1nt29p",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-w1nt29p"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "类的实例化、创建对象："
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "类名 对象名 = new 类名();"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-7isdiw8",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-7isdiw8"
									},
									"Children": [
										{
											"ID": "20210707214341-lo7go7u",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-lo7go7u"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "使用对象访问类中的成员："
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "对象名.成员变量；"
												},
												{
													"Type": "NodeText",
													"Data": " "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "对象名.成员方法()"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-kpkd7gd",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-kpkd7gd"
					},
					"Children": [
						{
							"ID": "20210707214341-q797n6f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-q797n6f"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "匿名对象：不定义对象的句柄，而直接调用这个对象的方法"
								}
							]
						},
						{
							"ID": "20210707214341-z2j68gv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-z2j68gv"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建匿名对象直接调用方法，没有变量名；匿名对象可以作为方法的参数和返回值。只能调用一次。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-qnyqcyv",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-qnyqcyv"
					},
					"Children": [
						{
							"ID": "20210707214341-yvdqnis",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-yvdqnis"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "两个对象使用同一方法"
								},
								{
									"Type": "NodeText",
									"Data": "的内存图"
								}
							]
						},
						{
							"ID": "20210707214341-uslozsj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-uslozsj"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对象调用方法时，根据对象中方法标记（地址值），去类中寻找方法信息。这样哪怕是多个对象，方法信息 只保存一份，节约内存空间。"
								}
							]
						},
						{
							"ID": "20210707214341-oqjv0x9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-oqjv0x9"
							},
							"Children": [
								{
									"Type": "NodeImage",
									"Children": [
										{
											"Type": "NodeBang",
											"Data": "!"
										},
										{
											"Type": "NodeOpenBracket",
											"Data": "["
										},
										{
											"Type": "NodeCloseBracket",
											"Data": "]"
										},
										{
											"Type": "NodeOpenParen",
											"Data": "("
										},
										{
											"Type": "NodeLinkDest",
											"Data": "../assets/memory-img1.png"
										},
										{
											"Type": "NodeCloseParen",
											"Data": ")"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-uns7u87",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-uns7u87"
					},
					"Children": [
						{
							"ID": "20210707214341-n5k52uf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-n5k52uf"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "两个引用指向同一对象"
								},
								{
									"Type": "NodeText",
									"Data": "的内存图"
								}
							]
						},
						{
							"ID": "20210707214341-lsb1gze",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-lsb1gze"
							},
							"Children": [
								{
									"Type": "NodeImage",
									"Children": [
										{
											"Type": "NodeBang",
											"Data": "!"
										},
										{
											"Type": "NodeOpenBracket",
											"Data": "["
										},
										{
											"Type": "NodeCloseBracket",
											"Data": "]"
										},
										{
											"Type": "NodeOpenParen",
											"Data": "("
										},
										{
											"Type": "NodeLinkDest",
											"Data": "../assets/memory-img2.png"
										},
										{
											"Type": "NodeCloseParen",
											"Data": ")"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-eia366k",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-eia366k"
					},
					"Children": [
						{
							"ID": "20210707214341-65uw4du",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-65uw4du"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "引用类型作为参数传递到方法中，传递的是地址值"
								}
							]
						},
						{
							"ID": "20210707214341-0z4giez",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-0z4giez"
							},
							"Children": [
								{
									"Type": "NodeImage",
									"Children": [
										{
											"Type": "NodeBang",
											"Data": "!"
										},
										{
											"Type": "NodeOpenBracket",
											"Data": "["
										},
										{
											"Type": "NodeCloseBracket",
											"Data": "]"
										},
										{
											"Type": "NodeOpenParen",
											"Data": "("
										},
										{
											"Type": "NodeLinkDest",
											"Data": "../assets/memory-img3.png"
										},
										{
											"Type": "NodeCloseParen",
											"Data": ")"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-bidnt9s",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-bidnt9s"
					},
					"Children": [
						{
							"ID": "20210707214341-x93anje",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-x93anje"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "使用引用类型作为方法的返回值，返回值就是对象的地址值"
								}
							]
						},
						{
							"ID": "20210707214341-90yfao3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-90yfao3"
							},
							"Children": [
								{
									"Type": "NodeImage",
									"Children": [
										{
											"Type": "NodeBang",
											"Data": "!"
										},
										{
											"Type": "NodeOpenBracket",
											"Data": "["
										},
										{
											"Type": "NodeCloseBracket",
											"Data": "]"
										},
										{
											"Type": "NodeOpenParen",
											"Data": "("
										},
										{
											"Type": "NodeLinkDest",
											"Data": "../assets/memory-img4.png"
										},
										{
											"Type": "NodeCloseParen",
											"Data": ")"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-7uu354q",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-7uu354q"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "Field（域 / 字段 / 成员变量）"
				}
			]
		},
		{
			"ID": "20210707214341-lqd93em",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-lqd93em"
			},
			"Children": [
				{
					"ID": "20210707214341-rs2y2vz",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-rs2y2vz"
					},
					"Children": [
						{
							"ID": "20210707214341-a3dvw7p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-a3dvw7p"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "语法格式："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "修饰符 数据类型 属性名 = 初始化值 ;"
								},
								{
									"Type": "NodeSoftBreak",
									"Data": "\n"
								},
								{
									"Type": "NodeText",
									"Data": "修饰符：private、缺省、protected、public；static、final"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-qrqs4oh",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-qrqs4oh"
					},
					"Children": [
						{
							"ID": "20210707214341-6b1vpoe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-6b1vpoe"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "字段的默认值"
								},
								{
									"Type": "NodeText",
									"Data": "："
								}
							]
						},
						{
							"ID": "20210707214341-zoc8tp1",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-zoc8tp1"
							},
							"Children": [
								{
									"ID": "20210707214341-age3obu",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-age3obu"
									},
									"Children": [
										{
											"ID": "20210707214341-ek8hcm2",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-ek8hcm2"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "整型—"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "0"
												},
												{
													"Type": "NodeText",
													"Data": "或"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "0L"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-hn5ggs2",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-hn5ggs2"
									},
									"Children": [
										{
											"ID": "20210707214341-usjagwe",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-usjagwe"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "浮点—"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "0.0f"
												},
												{
													"Type": "NodeText",
													"Data": "或"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "0.0d"
												},
												{
													"Type": "NodeText",
													"Data": "，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "d"
												},
												{
													"Type": "NodeText",
													"Data": "可省略"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-csd389e",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-csd389e"
									},
									"Children": [
										{
											"ID": "20210707214341-jpr2fwf",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-jpr2fwf"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "布尔—"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "false"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-s4dkn1e",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-s4dkn1e"
									},
									"Children": [
										{
											"ID": "20210707214341-y2kxflt",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-y2kxflt"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "char—Unicode 码"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "'\\u0000'"
												},
												{
													"Type": "NodeText",
													"Data": "（或 ASCII 码"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "0"
												},
												{
													"Type": "NodeText",
													"Data": "，非"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "'0'"
												},
												{
													"Type": "NodeText",
													"Data": "），是"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "空字符"
												},
												{
													"Type": "NodeText",
													"Data": "，一个不可打印字符，不会看到任何输出"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-eiu0fvm",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-eiu0fvm"
									},
									"Children": [
										{
											"ID": "20210707214341-3y6t3mr",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-3y6t3mr"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "引用类型（"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "包括包装类型"
												},
												{
													"Type": "NodeText",
													"Data": "）—"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "null"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-2j0jio9",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-2j0jio9"
					},
					"Children": [
						{
							"ID": "20210707214341-dfsim4l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-dfsim4l"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "成员变量与局部变量区别"
								}
							]
						},
						{
							"ID": "20210707214341-hd19t6t",
							"Type": "NodeTable",
							"Data": "|              | 成员变量                                           | 局部变量                                           |\n| ------------ | -------------------------------------------------- | -------------------------------------------------- |\n| 声明的位置   | 直接声明在类中                                     | 方法或构造器的形参、方法内部、代码块内、构造器内等 |\n| 修饰符       | private、默认、protected、public、static、final 等 | 不能用权限修饰符修饰，可以用 final 修饰            |\n| 初始化值     | 有默认初始化值                                     | 没有默认初始化值，必须显式赋值，方可使用           |\n| 内存加载位置 | 堆空间 或 方法区的静态域内                         | 栈空间                                             |\n| 生命周期     | **随着对象**的创建而存在，随着对象被垃圾回收而消失 | **随着方法**的调用而存在，随着方法的调用完毕而消失 |",
							"TableAligns": [
								0,
								0,
								0
							],
							"Properties": {
								"id": "20210707214341-hd19t6t"
							},
							"Children": [
								{
									"Type": "NodeTableHead",
									"Children": [
										{
											"Type": "NodeTableRow",
											"Children": [
												{
													"Type": "NodeTableCell"
												},
												{
													"Type": "NodeTableCell",
													"Children": [
														{
															"Type": "NodeText",
															"Data": "成员变量"
														}
													]
												},
												{
													"Type": "NodeTableCell",
													"Children": [
														{
															"Type": "NodeText",
															"Data": "局部变量"
														}
													]
												}
											]
										}
									]
								},
								{
									"Type": "NodeTableRow",
									"TableAligns": [
										0,
										0,
										0
									],
									"Children": [
										{
											"Type": "NodeTableCell",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "声明的位置"
												}
											]
										},
										{
											"Type": "NodeTableCell",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "直接声明在类中"
												}
											]
										},
										{
											"Type": "NodeTableCell",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "方法或构造器的形参、方法内部、代码块内、构造器内等"
												}
											]
										}
									]
								},
								{
									"Type": "NodeTableRow",
									"TableAligns": [
										0,
										0,
										0
									],
									"Children": [
										{
											"Type": "NodeTableCell",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "修饰符"
												}
											]
										},
										{
											"Type": "NodeTableCell",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "private、默认、protected、public、static、final 等"
												}
											]
										},
										{
											"Type": "NodeTableCell",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "不能用权限修饰符修饰，可以用 final 修饰"
												}
											]
										}
									]
								},
								{
									"Type": "NodeTableRow",
									"TableAligns": [
										0,
										0,
										0
									],
									"Children": [
										{
											"Type": "NodeTableCell",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "初始化值"
												}
											]
										},
										{
											"Type": "NodeTableCell",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "有默认初始化值"
												}
											]
										},
										{
											"Type": "NodeTableCell",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "没有默认初始化值，必须显式赋值，方可使用"
												}
											]
										}
									]
								},
								{
									"Type": "NodeTableRow",
									"TableAligns": [
										0,
										0,
										0
									],
									"Children": [
										{
											"Type": "NodeTableCell",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "内存加载位置"
												}
											]
										},
										{
											"Type": "NodeTableCell",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "堆空间 或 方法区的静态域内"
												}
											]
										},
										{
											"Type": "NodeTableCell",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "栈空间"
												}
											]
										}
									]
								},
								{
									"Type": "NodeTableRow",
									"TableAligns": [
										0,
										0,
										0
									],
									"Children": [
										{
											"Type": "NodeTableCell",
											"Children": [
												{
													"Type": "NodeText",
													"Data": "生命周期"
												}
											]
										},
										{
											"Type": "NodeTableCell",
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "随着对象"
												},
												{
													"Type": "NodeText",
													"Data": "的创建而存在，随着对象被垃圾回收而消失"
												}
											]
										},
										{
											"Type": "NodeTableCell",
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "随着方法"
												},
												{
													"Type": "NodeText",
													"Data": "的调用而存在，随着方法的调用完毕而消失"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-sigt33o",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-sigt33o"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "Method（方法）"
				}
			]
		},
		{
			"ID": "20210707214341-6ow79cw",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-6ow79cw"
			},
			"Children": [
				{
					"ID": "20210707214341-xzcvsml",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-xzcvsml"
					},
					"Children": [
						{
							"ID": "20210707214341-1ihav9d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-1ihav9d"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "方法定义格式"
								}
							]
						},
						{
							"ID": "20210707214341-b5dp7oe",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707214341-b5dp7oe"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "[返回类型] [方法名](/* 参数列表 */)｛\n\t方法体;\n\t/* return 返回值;//停止方法，将返回值返回给调用处 */\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210707214341-e8ud0ue",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-e8ud0ue"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "方法名"
								},
								{
									"Type": "NodeText",
									"Data": "和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "参数列表"
								},
								{
									"Type": "NodeText",
									"Data": "统称为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "方法签名"
								},
								{
									"Type": "NodeText",
									"Data": "（signature of the method），"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "签名作为方法的唯一标识"
								},
								{
									"Type": "NodeText",
									"Data": "。Java 中的方法只能作为类的一部分创建，且它只能被有权限的对象所调用。方法的返回值也称为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "方法的副作用"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-25rn0px",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-25rn0px"
					},
					"Children": [
						{
							"ID": "20210707214341-gza7rxf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-gza7rxf"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "return"
								}
							]
						},
						{
							"ID": "20210707214341-2spb9gr",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-2spb9gr"
							},
							"Children": [
								{
									"ID": "20210707214341-m4csfay",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-m4csfay"
									},
									"Children": [
										{
											"ID": "20210707214341-ookd2fj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-ookd2fj"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "退出当前方法"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-k53urqc",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-k53urqc"
									},
									"Children": [
										{
											"ID": "20210707214341-4f051ku",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-4f051ku"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "指定一个方法返回值 (在方法返回类型非 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "void"
												},
												{
													"Type": "NodeText",
													"Data": " 的情况下)"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-j96wgl8",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-j96wgl8"
									},
									"Children": [
										{
											"ID": "20210707214341-2p3xwc3",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-2p3xwc3"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果在方法签名中定义了返回值类型为 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "void"
												},
												{
													"Type": "NodeText",
													"Data": "，那么在代码执行结束时会有一个隐式的 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "return"
												},
												{
													"Type": "NodeText",
													"Data": "。 也就是说我们不用在总是在方法中显式地包含 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "return"
												},
												{
													"Type": "NodeText",
													"Data": " 语句。 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "注意"
												},
												{
													"Type": "NodeText",
													"Data": "：如果你的方法声明的返回值类型为非 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "void"
												},
												{
													"Type": "NodeText",
													"Data": " 类型，那么则必须确保每个代码路径都返回一个值。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-09vnjdk",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-09vnjdk"
					},
					"Children": [
						{
							"ID": "20210707214341-pt47p67",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-pt47p67"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法调用"
								}
							]
						},
						{
							"ID": "20210707214341-iy24h9m",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707214341-iy24h9m"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "method();\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-yart4y4",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-yart4y4"
					},
					"Children": [
						{
							"ID": "20210707214341-z7u2pf9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-z7u2pf9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法定义"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "注意事项"
								},
								{
									"Type": "NodeText",
									"Data": "："
								}
							]
						},
						{
							"ID": "20210707214341-tkr9w25",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-tkr9w25"
							},
							"Children": [
								{
									"ID": "20210707214341-wqjqevj",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-wqjqevj"
									},
									"Children": [
										{
											"ID": "20210707214341-4qjwz75",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-4qjwz75"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "方法必须定义在一个"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "类中"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-y2xwvqq",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-y2xwvqq"
									},
									"Children": [
										{
											"ID": "20210707214341-z468qkf",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-z468qkf"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "方法不能定义在另一个方法的里面，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "不能嵌套"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-ygyx6g6",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-ygyx6g6"
									},
									"Children": [
										{
											"ID": "20210707214341-m5apy1k",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-m5apy1k"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "一个方法可以有多个 return 语句，但必须保证"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "同时只有一个 return 会被执行到"
												},
												{
													"Type": "NodeText",
													"Data": "，return 后不能有语句"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-bnkwy1q",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-bnkwy1q"
					},
					"Children": [
						{
							"ID": "20210707214341-ihnb9vs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-ihnb9vs"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法可用的修饰符：staitc、final、abstract、native"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-oprk8v4",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-oprk8v4"
					},
					"Children": [
						{
							"ID": "20210707214341-oimwz2b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-oimwz2b"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "方法重载（overload）"
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "同一类"
								},
								{
									"Type": "NodeText",
									"Data": "中"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "方法名相同"
								},
								{
									"Type": "NodeText",
									"Data": "，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "参数列表不同"
								},
								{
									"Type": "NodeText",
									"Data": "（类型 或 个数 或 多类型顺序 不同）"
								}
							]
						},
						{
							"ID": "20210707214341-6l7xngo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-6l7xngo"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "与访问修饰符、返回值类型（可能只调用，不需要返回值）、参数名无关！"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-7jvcibq",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-7jvcibq"
					},
					"Children": [
						{
							"ID": "20210707214341-hb16twx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-hb16twx"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "方法重写（override）"
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "父子类"
								},
								{
									"Type": "NodeText",
									"Data": "中，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "方法名"
								},
								{
									"Type": "NodeText",
									"Data": "、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "参数列表必须相同"
								},
								{
									"Type": "NodeText",
									"Data": "（不同则是特有方法）。满足以下条件为重写："
								}
							]
						},
						{
							"ID": "20210707214341-fp8h5ne",
							"Type": "NodeList",
							"ListData": {
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-fp8h5ne"
							},
							"Children": [
								{
									"ID": "20210707214341-49lmncy",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-49lmncy"
									},
									"Children": [
										{
											"ID": "20210707214341-obvnp7e",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-obvnp7e"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "访问权限"
												},
												{
													"Type": "NodeText",
													"Data": "必须大于等于父类权限"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-vjpnhwv",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-vjpnhwv"
									},
									"Children": [
										{
											"ID": "20210707214341-hd1isol",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-hd1isol"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "返回值类型"
												},
												{
													"Type": "NodeText",
													"Data": "，对象类型必须小于等于父类（如 Object、String）；基本类型必须一致！若为 void，则都必须为 void；"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-ijihghc",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-ijihghc"
									},
									"Children": [
										{
											"ID": "20210707214341-xiw4cud",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-xiw4cud"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "抛出的异常类型"
												},
												{
													"Type": "NodeText",
													"Data": "小于等于父类方法的异常类型"
												}
											]
										},
										{
											"ID": "20210707214341-qa6xn21",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"CodeBlockFenceChar": 96,
											"CodeBlockFenceLen": 3,
											"CodeBlockOpenFence": "YGBg",
											"CodeBlockInfo": "amF2YQ==",
											"CodeBlockCloseFence": "YGBg",
											"Properties": {
												"id": "20210707214341-qa6xn21"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "amF2YQ=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "class Father {\n\n    int show(int a, int b) throws IOException { //重写中，子类方法抛出异常类型必须小于等于父类方法\n        return 0;\n    }\n}\n//下面哪些方法可以出现在Father的子类中？\npublic/private/... short show(int a, long b){return 0;}//参数列表都不同了，是子类特有方法\npublic int show(int a,int b){return 0;}//可以，方法重写\nprivate int show(int a,int b){return 0;}//不可以，权限小\npublic short show(int a, int b){return 0;}//不可以，返回类型为基本类型必须一致！\nstatic int show(int a, int b){return 0;}//不可以，条件都满足，但是静态方法只能覆盖静态方法！！！\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20210707214341-8k0ovz7",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 42,
								"Padding": 2,
								"Marker": "Kg==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-8k0ovz7"
							},
							"Children": [
								{
									"ID": "20210707214341-iuwcvf5",
									"Type": "NodeListItem",
									"Data": "*",
									"ListData": {
										"Tight": true,
										"BulletChar": 42,
										"Padding": 2,
										"Marker": "Kg==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-iuwcvf5"
									},
									"Children": [
										{
											"ID": "20210707214341-dpu2g62",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-dpu2g62"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "若父类中有"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "私有方法、静态方法"
												},
												{
													"Type": "NodeText",
													"Data": "，因为和"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "类相关"
												},
												{
													"Type": "NodeText",
													"Data": "，子类也可以存在完全一样的方法，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "不是重写"
												},
												{
													"Type": "NodeText",
													"Data": "！"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20210707214341-shmdw1a",
							"Type": "NodeBlockquote",
							"Properties": {
								"id": "20210707214341-shmdw1a"
							},
							"Children": [
								{
									"Type": "NodeBlockquoteMarker",
									"Data": "\u003e "
								},
								{
									"ID": "20210707214341-b1ejfye",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20210707214341-b1ejfye"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "从编译和运行的角度看："
										}
									]
								},
								{
									"ID": "20210707214341-u1wm6v3",
									"Type": "NodeList",
									"ListData": {
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-u1wm6v3"
									},
									"Children": [
										{
											"ID": "20210707214341-ek57213",
											"Type": "NodeListItem",
											"Data": "-",
											"ListData": {
												"BulletChar": 45,
												"Padding": 2,
												"Marker": "LQ==",
												"Num": -1
											},
											"Properties": {
												"id": "20210707214341-ek57213"
											},
											"Children": [
												{
													"ID": "20210707214341-jw3zjg4",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20210707214341-jw3zjg4"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不 同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了 不同的方法。它们的调用地址在编译期就绑定了。Java 的重载是可以包括父类 和子类的，即子类可以重载父类的同名不同参数的方法。所以对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法， 这称为“早绑定”或“静态绑定”;"
														}
													]
												}
											]
										},
										{
											"ID": "20210707214341-lmelo2o",
											"Type": "NodeListItem",
											"Data": "-",
											"ListData": {
												"Tight": true,
												"BulletChar": 45,
												"Padding": 2,
												"Marker": "LQ==",
												"Num": -1
											},
											"Properties": {
												"id": "20210707214341-lmelo2o"
											},
											"Children": [
												{
													"ID": "20210707214341-fbhg98w",
													"Type": "NodeParagraph",
													"Properties": {
														"id": "20210707214341-fbhg98w"
													},
													"Children": [
														{
															"Type": "NodeText",
															"Data": "而对于多态（重写），只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。"
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-kmbkhcs",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20210707214341-kmbkhcs"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "即方法重载（@overload）实现编译时多态性；方法重写（@override）实现运行时多态性。"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-5tx9ju6",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-5tx9ju6"
					},
					"Children": [
						{
							"ID": "20210707214341-uo4kcjx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-uo4kcjx"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "可变参数"
								},
								{
									"Type": "NodeText",
									"Data": "：JavaSE 5.0 中提供了 Varargs(variable number of arguments)机制，允许直接定 义能和多个实参相匹配的形参。从而，可以用一种更简单的方式，来传递个数可变的实参。（同 js 中 arguments 类似）"
								}
							]
						},
						{
							"ID": "20210707214341-sr8ye7v",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-sr8ye7v"
							},
							"Children": [
								{
									"ID": "20210707214341-jsig8hc",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-jsig8hc"
									},
									"Children": [
										{
											"ID": "20210707214341-4syuvv8",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-4syuvv8"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "可变形参的方法与"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "同名"
												},
												{
													"Type": "NodeText",
													"Data": "的方法之间，彼此构成重载。当调用时不传递参数，此时编译器不知道该调用哪个，编译报错"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-2ofj6lr",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-2ofj6lr"
									},
									"Children": [
										{
											"ID": "20210707214341-dx4v1w6",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-dx4v1w6"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "可变参数方法（"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "底层为数组"
												},
												{
													"Type": "NodeText",
													"Data": "）的使用与方法参数部分使用数组是一致的，所以"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "不能与之重载"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-tqje0x3",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-tqje0x3"
									},
									"Children": [
										{
											"ID": "20210707214341-85ru2kn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-85ru2kn"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "方法的参数部分有可变形参，需要放在形参声明的"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "最后"
												},
												{
													"Type": "NodeText",
													"Data": "，且只能有一个可变个数形参"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20210707214341-ijt2cym",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-ijt2cym"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "::: tip 注意"
								}
							]
						},
						{
							"ID": "20210707214341-ybn2p1b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-ybn2p1b"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "你应该总是在重载方法的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "一个版本上使用"
								},
								{
									"Type": "NodeText",
									"Data": "可变参数列表，或者"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "压根不用"
								},
								{
									"Type": "NodeText",
									"Data": "它。"
								}
							]
						},
						{
							"ID": "20210707214341-lpvhkce",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-lpvhkce"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": ":::"
								}
							]
						},
						{
							"ID": "20210707214341-egqbdnt",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707214341-egqbdnt"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public static void sum(int ... arr) {\n    int sum = 0;\n    for(int a:arr) {\n        sum+=a;\n    }\n    System.out.println(sum);\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-1jg07q3",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-1jg07q3"
					},
					"Children": [
						{
							"ID": "20210707214341-n1jv08i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-n1jv08i"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "方法参数的值传递机制"
								}
							]
						},
						{
							"ID": "20210707214341-dd7r7hv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-dd7r7hv"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java 里方法的参数传递方式只有一种："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "值传递"
								},
								{
									"Type": "NodeText",
									"Data": "；画内存图即可明显看出。"
								}
							]
						},
						{
							"ID": "20210707214341-ur4bie9",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-ur4bie9"
							},
							"Children": [
								{
									"ID": "20210707214341-ajs2cpx",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-ajs2cpx"
									},
									"Children": [
										{
											"ID": "20210707214341-y0blh6i",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-y0blh6i"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "形参是基本数据类型：将实参基本数据类型变量的“数据值”传递给形参"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-y889ax1",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-y889ax1"
									},
									"Children": [
										{
											"ID": "20210707214341-tmmek91",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-tmmek91"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "形参是引用数据类型：将实参引用数据类型变量的“地址值”传递给形参"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-blaq9i5",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-blaq9i5"
					},
					"Children": [
						{
							"ID": "20210707214341-r1sverh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-r1sverh"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "递归"
								},
								{
									"Type": "NodeText",
									"Data": "（"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "recursion"
								},
								{
									"Type": "NodeText",
									"Data": "）方法：一个方法体内调用它自身"
								}
							]
						},
						{
							"ID": "20210707214341-cb0ihva",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-cb0ihva"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "注意："
								}
							]
						},
						{
							"ID": "20210707214341-12ga5l3",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1,
								"Tight": true,
								"Start": 1,
								"Delimiter": 46,
								"Padding": 3,
								"Marker": "MQ==",
								"Num": 1
							},
							"Properties": {
								"id": "20210707214341-12ga5l3"
							},
							"Children": [
								{
									"ID": "20210707214341-vup057s",
									"Type": "NodeListItem",
									"Data": "1",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 1,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "MQ==",
										"Num": 1
									},
									"Properties": {
										"id": "20210707214341-vup057s"
									},
									"Children": [
										{
											"ID": "20210707214341-n5k59nn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-n5k59nn"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "要"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "有出口"
												},
												{
													"Type": "NodeText",
													"Data": "可以停止，否则就是死递归"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-yauqsaw",
									"Type": "NodeListItem",
									"Data": "2",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 2,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "Mg==",
										"Num": 2
									},
									"Properties": {
										"id": "20210707214341-yauqsaw"
									},
									"Children": [
										{
											"ID": "20210707214341-zevemxn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-zevemxn"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "次数不能过多"
												},
												{
													"Type": "NodeText",
													"Data": "，否则内存溢出 StackOverFlowError"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-fahgekc",
									"Type": "NodeListItem",
									"Data": "3",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 3,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "Mw==",
										"Num": 3
									},
									"Properties": {
										"id": "20210707214341-fahgekc"
									},
									"Children": [
										{
											"ID": "20210707214341-x3hdt69",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-x3hdt69"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "构造方法不能"
												},
												{
													"Type": "NodeText",
													"Data": "递归使用"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-28n7qu1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-28n7qu1"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "Constructor（构造器）"
				}
			]
		},
		{
			"ID": "20210707214341-jbttzhu",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-jbttzhu"
			},
			"Children": [
				{
					"ID": "20210707214341-3lq1qe7",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-3lq1qe7"
					},
					"Children": [
						{
							"ID": "20210707214341-mhn1jn8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-mhn1jn8"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造器的特征"
								}
							]
						},
						{
							"ID": "20210707214341-frt8rkq",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-frt8rkq"
							},
							"Children": [
								{
									"ID": "20210707214341-n1h3h6z",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-n1h3h6z"
									},
									"Children": [
										{
											"ID": "20210707214341-9akwztp",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-9akwztp"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "与类相同的名称"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-8iwygrl",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-8iwygrl"
									},
									"Children": [
										{
											"ID": "20210707214341-vliw9u3",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-vliw9u3"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "不声明返回值类型（与声明为 void 不同）"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-tolk8y6",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-tolk8y6"
									},
									"Children": [
										{
											"ID": "20210707214341-ot4vvmq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-ot4vvmq"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "不能被 static、final、synchronized、abstract、native 修饰，不能有 return 语句返回值"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-2if4c1i",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-2if4c1i"
					},
					"Children": [
						{
							"ID": "20210707214341-yn89dtl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-yn89dtl"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造器的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "作用：创建对象;给对象进行初始化"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-nq60o4q",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-nq60o4q"
					},
					"Children": [
						{
							"ID": "20210707214341-ucuxng0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-ucuxng0"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "语法格式"
								}
							]
						},
						{
							"ID": "20210707214341-bpq1waa",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707214341-bpq1waa"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "修饰符 类名 (参数列表) {\n  初始化语句;\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-4kdeosm",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-4kdeosm"
					},
					"Children": [
						{
							"ID": "20210707214341-qojut8u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-qojut8u"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "注意"
								}
							]
						},
						{
							"ID": "20210707214341-xgebxns",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-xgebxns"
							},
							"Children": [
								{
									"ID": "20210707214341-8hvr664",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-8hvr664"
									},
									"Children": [
										{
											"ID": "20210707214341-gm7bz6l",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-gm7bz6l"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Java 语言中，每个类都"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "至少有一个构造器"
												},
												{
													"Type": "NodeText",
													"Data": "；无参构造器的修饰符与所属类的修饰符一致"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-gfj4yde",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-gfj4yde"
									},
									"Children": [
										{
											"ID": "20210707214341-4crv5g7",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-4crv5g7"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "一旦显式"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "定义了构造器，则系统不再提供无参构造器"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-cuxn9kb",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-cuxn9kb"
									},
									"Children": [
										{
											"ID": "20210707214341-0n57vb9",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-0n57vb9"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "一个类可以创建多个"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "重载"
												},
												{
													"Type": "NodeText",
													"Data": "的构造器"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-m0m4m9l",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-m0m4m9l"
									},
									"Children": [
										{
											"ID": "20210707214341-5c56b6m",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-5c56b6m"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "父类的构造器"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "不可被子类继承"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-vu6vjop",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-vu6vjop"
									},
									"Children": [
										{
											"ID": "20210707214341-koq53dz",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-koq53dz"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "子类的构造器中首行默认为"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "super()"
												},
												{
													"Type": "NodeText",
													"Data": "，且默认省略"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-gdc0az1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-gdc0az1"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "代码块"
				}
			]
		},
		{
			"ID": "20210707214341-e8046f8",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-e8046f8"
			},
			"Children": [
				{
					"ID": "20210707214341-wr4mb3h",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-wr4mb3h"
					},
					"Children": [
						{
							"ID": "20210707214341-4oh9xj4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-4oh9xj4"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "作用：用来"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "初始化类、对象"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-22xanw5",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-22xanw5"
					},
					"Children": [
						{
							"ID": "20210707214341-xxot8kw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-xxot8kw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "代码块如果有修饰的话，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "只能使用 static"
								},
								{
									"Type": "NodeText",
									"Data": "。因此可以分为如下："
								}
							]
						},
						{
							"ID": "20210707214341-olt5cn5",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-olt5cn5"
							},
							"Children": [
								{
									"ID": "20210707214341-3gtumnd",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-3gtumnd"
									},
									"Children": [
										{
											"ID": "20210707214341-hxezucg",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-hxezucg"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "静态代码块"
												}
											]
										},
										{
											"ID": "20210707214341-b7d7ih4",
											"Type": "NodeList",
											"ListData": {
												"Tight": true,
												"BulletChar": 45,
												"Padding": 2,
												"Marker": "LQ==",
												"Num": -1
											},
											"Properties": {
												"id": "20210707214341-b7d7ih4"
											},
											"Children": [
												{
													"ID": "20210707214341-wxg7h17",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-wxg7h17"
													},
													"Children": [
														{
															"ID": "20210707214341-a5owx30",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-a5owx30"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "内部可以有输出语句"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-xfgoitg",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-xfgoitg"
													},
													"Children": [
														{
															"ID": "20210707214341-g9nhg51",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-g9nhg51"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "随着类的加载而执行，而且只执行一次"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-b1iuaa7",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-b1iuaa7"
													},
													"Children": [
														{
															"ID": "20210707214341-jcytdxw",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-jcytdxw"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "作用："
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "初始化类的信息"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-7outppe",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-7outppe"
													},
													"Children": [
														{
															"ID": "20210707214341-ohdxxdp",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-ohdxxdp"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-ygrtv5v",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-ygrtv5v"
													},
													"Children": [
														{
															"ID": "20210707214341-5tpi5wb",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-5tpi5wb"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "静态代码块的执行要优先于非静态代码块的执行"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-z3pckm2",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-z3pckm2"
													},
													"Children": [
														{
															"ID": "20210707214341-n1ci7bj",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-n1ci7bj"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-memzdo5",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-memzdo5"
									},
									"Children": [
										{
											"ID": "20210707214341-qax40iu",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-qax40iu"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "非静态代码块"
												}
											]
										},
										{
											"ID": "20210707214341-h9of9dl",
											"Type": "NodeList",
											"ListData": {
												"Tight": true,
												"BulletChar": 45,
												"Padding": 2,
												"Marker": "LQ==",
												"Num": -1
											},
											"Properties": {
												"id": "20210707214341-h9of9dl"
											},
											"Children": [
												{
													"ID": "20210707214341-9mner40",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-9mner40"
													},
													"Children": [
														{
															"ID": "20210707214341-015rksp",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-015rksp"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "内部可以有输出语句"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-h7g2nk5",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-h7g2nk5"
													},
													"Children": [
														{
															"ID": "20210707214341-xk2ps4w",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-xk2ps4w"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "随着对象的创建而执行"
																},
																{
																	"Type": "NodeText",
																	"Data": "。每创建一个对象，就执行一次非静态代码块"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-b0z7yea",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-b0z7yea"
													},
													"Children": [
														{
															"ID": "20210707214341-zof0j3i",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-zof0j3i"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "作用："
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "可以在创建对象时，对对象的属性等进行初始化"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-3j9svwh",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-3j9svwh"
													},
													"Children": [
														{
															"ID": "20210707214341-pjhqony",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-pjhqony"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-vl8gx14",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-vl8gx14"
													},
													"Children": [
														{
															"ID": "20210707214341-q0hkd72",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-q0hkd72"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-kylz73s",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-kylz73s"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "内部类"
				}
			]
		},
		{
			"ID": "20210707214341-dhygyz7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-dhygyz7"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当一个事物的内部，还有一个部分"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "需要一个完整的结构进行描述"
				},
				{
					"Type": "NodeText",
					"Data": "，而这个内部的完整的结构"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "又只为外部事物提供服务"
				},
				{
					"Type": "NodeText",
					"Data": "，那么整个内部的完整结构最好使用内部类。Java 8 的 Lambda 表达式和方法引用减少了编写内部类的需求。"
				}
			]
		},
		{
			"ID": "20210707214341-ya3e7pw",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-ya3e7pw"
			},
			"Children": [
				{
					"ID": "20210707214341-z5ctjzi",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-z5ctjzi"
					},
					"Children": [
						{
							"ID": "20210707214341-tu1e8rg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-tu1e8rg"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在 Java 中，允许"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "一个类的定义位于另一个类的内部"
								},
								{
									"Type": "NodeText",
									"Data": "，前者称为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "内部类"
								},
								{
									"Type": "NodeText",
									"Data": "，后者称为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "外部类"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						},
						{
							"ID": "20210707214341-ccvbjvo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-ccvbjvo"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Inner class 一般用在定义它的类或语句块之内，在外部引用它时必须给出完整的名称。不能与外部类名相同。"
								}
							]
						},
						{
							"ID": "20210707214341-pfgql0a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-pfgql0a"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "内部类仍然是一个独立的类，在编译之后会内部类会被编译成独立的.class 文件，但是前面冠以外部类的类名 和$"
								},
								{
									"Type": "NodeText",
									"Data": "符号 。比如，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Person$Heart.class"
								},
								{
									"Type": "NodeText",
									"Data": "。分类如下："
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-hxlfh94",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-hxlfh94"
					},
					"Children": [
						{
							"ID": "20210707214341-47fsd2t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-47fsd2t"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "成员内部类"
								},
								{
									"Type": "NodeText",
									"Data": "（"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "static"
								},
								{
									"Type": "NodeText",
									"Data": "成员内部类和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "非 static"
								},
								{
									"Type": "NodeText",
									"Data": "成员内部类）"
								}
							]
						},
						{
							"ID": "20210707214341-ogpw10h",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-ogpw10h"
							},
							"Children": [
								{
									"ID": "20210707214341-p6g9sl7",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-p6g9sl7"
									},
									"Children": [
										{
											"ID": "20210707214341-91kgb5h",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-91kgb5h"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "作为外部类的成员"
												}
											]
										},
										{
											"ID": "20210707214341-fnvh842",
											"Type": "NodeList",
											"ListData": {
												"Tight": true,
												"BulletChar": 45,
												"Padding": 2,
												"Marker": "LQ==",
												"Num": -1
											},
											"Properties": {
												"id": "20210707214341-fnvh842"
											},
											"Children": [
												{
													"ID": "20210707214341-gk1zrbl",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-gk1zrbl"
													},
													"Children": [
														{
															"ID": "20210707214341-kz0bz5u",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-kz0bz5u"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "与外部类不同，Inner class 还可以声明为 private 或 protected（总共"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "4 种权限修饰符"
																},
																{
																	"Type": "NodeText",
																	"Data": "）"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-zsm3l05",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-zsm3l05"
													},
													"Children": [
														{
															"ID": "20210707214341-n37bi3m",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-n37bi3m"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "可以被 abstract 修饰，因此可以被其它的内部类继承"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-brdtmem",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-brdtmem"
													},
													"Children": [
														{
															"ID": "20210707214341-6jo24hh",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-6jo24hh"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "可以"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "被 static 修饰"
																},
																{
																	"Type": "NodeText",
																	"Data": "，但此时就不能再使用外层类的非 static 的成员变量。非 static 的成员内部类中的成员不能声明为 static 的，只有在外部类或 static 的成员内部类中才可声明 static 成员。"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-a2p86ei",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-a2p86ei"
													},
													"Children": [
														{
															"ID": "20210707214341-riexfih",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-riexfih"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "可以"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "调用外部类的结构"
																}
															]
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-56ascor",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-56ascor"
									},
									"Children": [
										{
											"ID": "20210707214341-9od3gjw",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-9od3gjw"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "作为一个类"
												}
											]
										},
										{
											"ID": "20210707214341-2z5i038",
											"Type": "NodeList",
											"ListData": {
												"Tight": true,
												"BulletChar": 45,
												"Padding": 2,
												"Marker": "LQ==",
												"Num": -1
											},
											"Properties": {
												"id": "20210707214341-2z5i038"
											},
											"Children": [
												{
													"ID": "20210707214341-hs3ub9m",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-hs3ub9m"
													},
													"Children": [
														{
															"ID": "20210707214341-sj49ig5",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-sj49ig5"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "类内可以"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "定义属性、方法、构造器等"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-6c3aygp",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-6c3aygp"
													},
													"Children": [
														{
															"ID": "20210707214341-3z0kf13",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-3z0kf13"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "可以"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "被 abstract 修饰"
																},
																{
																	"Type": "NodeText",
																	"Data": "，因此可以被其它的内部类继承"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-jmbz69w",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-jmbz69w"
													},
													"Children": [
														{
															"ID": "20210707214341-mh63o0j",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-mh63o0j"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "可以"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "被 final 修饰"
																},
																{
																	"Type": "NodeText",
																	"Data": "，表示此类不能被继承。言外之意，不使用 final，就可以被继承"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-h2p4g5q",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-h2p4g5q"
													},
													"Children": [
														{
															"ID": "20210707214341-8muum2a",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-8muum2a"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "编译以后生成 OuterClass$"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "InnerClass.class 字节码文件"
																},
																{
																	"Type": "NodeText",
																	"Data": "(也适用于局部内部类)"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-18afgj7",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-18afgj7"
					},
					"Children": [
						{
							"ID": "20210707214341-h3iopwp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-h3iopwp"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "局部内部类"
								},
								{
									"Type": "NodeText",
									"Data": "（不谈修饰符，一般在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "代码块中、构造器中、方法中"
								},
								{
									"Type": "NodeText",
									"Data": "）、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "匿名内部类"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-0sv1pxe",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-0sv1pxe"
			},
			"Children": [
				{
					"ID": "20210707214341-c48vwvw",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-c48vwvw"
					},
					"Children": [
						{
							"ID": "20210707214341-nsqylnr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-nsqylnr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "特点：（铁扇公主肚子里的孙猴子）"
								}
							]
						},
						{
							"ID": "20210707214341-9ug146c",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-9ug146c"
							},
							"Children": [
								{
									"ID": "20210707214341-615le4v",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-615le4v"
									},
									"Children": [
										{
											"ID": "20210707214341-900rut8",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-900rut8"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "内部类可以直接访问外部类的成员"
												},
												{
													"Type": "NodeText",
													"Data": "，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "包括私有成员"
												},
												{
													"Type": "NodeText",
													"Data": "。"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-cw0y5xu",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-cw0y5xu"
									},
									"Children": [
										{
											"ID": "20210707214341-vwzwnhw",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-vwzwnhw"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "外部类要访问"
												},
												{
													"Type": "NodeText",
													"Data": "内部类的成员，必须要"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "建立内部类的对象"
												},
												{
													"Type": "NodeText",
													"Data": "。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-r7yjqu5",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-r7yjqu5"
					},
					"Children": [
						{
							"ID": "20210707214341-chkirc3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-chkirc3"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "需要关注如下问题："
								}
							]
						},
						{
							"ID": "20210707214341-afx4qri",
							"Type": "NodeList",
							"ListData": {
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-afx4qri"
							},
							"Children": [
								{
									"ID": "20210707214341-wsnw38q",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-wsnw38q"
									},
									"Children": [
										{
											"ID": "20210707214341-qzd8z7p",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-qzd8z7p"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "如何实例化成员内部类的对象"
												}
											]
										},
										{
											"ID": "20210707214341-5700wx3",
											"Type": "NodeList",
											"ListData": {
												"BulletChar": 45,
												"Padding": 2,
												"Marker": "LQ==",
												"Num": -1
											},
											"Properties": {
												"id": "20210707214341-5700wx3"
											},
											"Children": [
												{
													"ID": "20210707214341-8kkipc3",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-8kkipc3"
													},
													"Children": [
														{
															"ID": "20210707214341-zk888v8",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-zk888v8"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "非静态成员内部类"
																}
															]
														},
														{
															"ID": "20210707214341-15xv85i",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-15xv85i"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "code",
																	"TextMarkTextContent": "Outer.Inner in = new Outer().new Inner();"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "直接访问外部类中内部类成员"
																}
															]
														},
														{
															"ID": "20210707214341-ubz5z2i",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-ubz5z2i"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "如果出现了"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "重名"
																},
																{
																	"Type": "NodeText",
																	"Data": "现象，"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "访问外部类成员变量"
																},
																{
																	"Type": "NodeText",
																	"Data": "格式是："
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong code",
																	"TextMarkTextContent": "外部类名称.this.外部类成员变量名"
																}
															]
														},
														{
															"ID": "20210707214341-cvg26rx",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-cvg26rx"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "【面试】"
																}
															]
														},
														{
															"ID": "20210707214341-hmy2x0z",
															"Type": "NodeCodeBlock",
															"IsFencedCodeBlock": true,
															"CodeBlockFenceChar": 96,
															"CodeBlockFenceLen": 3,
															"CodeBlockOpenFence": "YGBg",
															"CodeBlockInfo": "amF2YQ==",
															"CodeBlockCloseFence": "YGBg",
															"Properties": {
																"id": "20210707214341-hmy2x0z"
															},
															"Children": [
																{
																	"Type": "NodeCodeBlockFenceOpenMarker",
																	"Data": "```",
																	"CodeBlockFenceLen": 3
																},
																{
																	"Type": "NodeCodeBlockFenceInfoMarker",
																	"CodeBlockInfo": "amF2YQ=="
																},
																{
																	"Type": "NodeCodeBlockCode",
																	"Data": "class Outer {\n    public int num = 10;\n\n    class Inner {\n        public int num = 20;\n\n        public viod show() {\n            int num  = 30;\n\n            System.out.println(num);//30\n            System.out.println(this.num);//20\n            System.out.println(Outer.this.num);//10\n        }\n    }\n}\n"
																},
																{
																	"Type": "NodeCodeBlockFenceCloseMarker",
																	"Data": "```",
																	"CodeBlockFenceLen": 3
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-z70dhuk",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-z70dhuk"
													},
													"Children": [
														{
															"ID": "20210707214341-gt4e58d",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-gt4e58d"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "静态成员内部类"
																}
															]
														},
														{
															"ID": "20210707214341-thvs0ed",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-thvs0ed"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "code",
																	"TextMarkTextContent": "Outer.Inner in = new Outer.Inner();"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "不用创建外部类对象"
																},
																{
																	"Type": "NodeText",
																	"Data": "，相当于外部类"
																}
															]
														},
														{
															"ID": "20210707214341-aqsstsl",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-aqsstsl"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "静态内部类只能访问外部类中的静态成员"
																}
															]
														},
														{
															"ID": "20210707214341-n11edlu",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-n11edlu"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "静态内部类中可以定义静态成员，"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "非静态内部类中不允许定义静态成员"
																}
															]
														},
														{
															"ID": "20210707214341-9kbdf7w",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-9kbdf7w"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "【面试】"
																}
															]
														},
														{
															"ID": "20210707214341-becnzzo",
															"Type": "NodeCodeBlock",
															"IsFencedCodeBlock": true,
															"CodeBlockFenceChar": 96,
															"CodeBlockFenceLen": 3,
															"CodeBlockOpenFence": "YGBg",
															"CodeBlockInfo": "amF2YQ==",
															"CodeBlockCloseFence": "YGBg",
															"Properties": {
																"id": "20210707214341-becnzzo"
															},
															"Children": [
																{
																	"Type": "NodeCodeBlockFenceOpenMarker",
																	"Data": "```",
																	"CodeBlockFenceLen": 3
																},
																{
																	"Type": "NodeCodeBlockFenceInfoMarker",
																	"CodeBlockInfo": "amF2YQ=="
																},
																{
																	"Type": "NodeCodeBlockCode",
																	"Data": "public class Test {\n    public void func() {\n        //位置1\n    }\n\n    class Inner {\n    }\n\n    public static void main(String[] args) {\n        Test test = new Test();\n        //位置2\n    }\n    //在位置1写 new Inner()  可以，外部类访问内部类要创建内部类对象\n    //在位置2写 new Inner()  不可以，main方法时静态的，不能调用非静态内部类\n    //在位置2写 new test.Inner()  不可以，不是静态内部类，可以test.new Inner()\n    //在位置2写 new Test.Inner()  不可以，类名调用只能调用静态成员，除非内部类为静态\n}\n"
																},
																{
																	"Type": "NodeCodeBlockFenceCloseMarker",
																	"Data": "```",
																	"CodeBlockFenceLen": 3
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-g6fn20i",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-g6fn20i"
													},
													"Children": [
														{
															"ID": "20210707214341-srbynen",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-srbynen"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "局部内部类"
																},
																{
																	"Type": "NodeText",
																	"Data": "（包含"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "匿名内部类"
																},
																{
																	"Type": "NodeText",
																	"Data": "）：定义在"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "方法内部"
																},
																{
																	"Type": "NodeText",
																	"Data": "的类，只有"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "当前所属方法才能使用它"
																}
															]
														},
														{
															"ID": "20210707214341-v69agb8",
															"Type": "NodeList",
															"ListData": {
																"BulletChar": 45,
																"Padding": 2,
																"Marker": "LQ==",
																"Num": -1
															},
															"Properties": {
																"id": "20210707214341-v69agb8"
															},
															"Children": [
																{
																	"ID": "20210707214341-aiom5xd",
																	"Type": "NodeListItem",
																	"Data": "-",
																	"ListData": {
																		"BulletChar": 45,
																		"Padding": 2,
																		"Marker": "LQ==",
																		"Num": -1
																	},
																	"Properties": {
																		"id": "20210707214341-aiom5xd"
																	},
																	"Children": [
																		{
																			"ID": "20210707214341-px6arcv",
																			"Type": "NodeParagraph",
																			"Properties": {
																				"id": "20210707214341-px6arcv"
																			},
																			"Children": [
																				{
																					"Type": "NodeText",
																					"Data": "局部内部类，如果"
																				},
																				{
																					"Type": "NodeTextMark",
																					"TextMarkType": "strong",
																					"TextMarkTextContent": "访问所在方法的局部变量"
																				},
																				{
																					"Type": "NodeText",
																					"Data": "，那么这个局部变量必须是【有效"
																				},
																				{
																					"Type": "NodeTextMark",
																					"TextMarkType": "strong",
																					"TextMarkTextContent": "final"
																				},
																				{
																					"Type": "NodeText",
																					"Data": "的】"
																				}
																			]
																		},
																		{
																			"ID": "20210707214341-n1k8s3r",
																			"Type": "NodeParagraph",
																			"Properties": {
																				"id": "20210707214341-n1k8s3r"
																			},
																			"Children": [
																				{
																					"Type": "NodeText",
																					"Data": "备注：从 Java 8+开始，只要局部变量事实不变，那么 final 关键字可以省略。"
																				}
																			]
																		},
																		{
																			"ID": "20210707214341-uvmtd92",
																			"Type": "NodeBlockquote",
																			"Properties": {
																				"id": "20210707214341-uvmtd92"
																			},
																			"Children": [
																				{
																					"Type": "NodeBlockquoteMarker",
																					"Data": "\u003e "
																				},
																				{
																					"ID": "20210707214341-ux17uts",
																					"Type": "NodeParagraph",
																					"Properties": {
																						"id": "20210707214341-ux17uts"
																					},
																					"Children": [
																						{
																							"Type": "NodeText",
																							"Data": "new 出来的对象在堆内存当中。"
																						}
																					]
																				},
																				{
																					"ID": "20210707214341-zxzapv1",
																					"Type": "NodeParagraph",
																					"Properties": {
																						"id": "20210707214341-zxzapv1"
																					},
																					"Children": [
																						{
																							"Type": "NodeText",
																							"Data": "局部变量是跟着方法走的，在栈内存当中。"
																						}
																					]
																				},
																				{
																					"ID": "20210707214341-h7o427v",
																					"Type": "NodeParagraph",
																					"Properties": {
																						"id": "20210707214341-h7o427v"
																					},
																					"Children": [
																						{
																							"Type": "NodeText",
																							"Data": "方法运行结束之后，立刻出栈，局部变量就会立刻消失。"
																						}
																					]
																				},
																				{
																					"ID": "20210707214341-7ij8ye8",
																					"Type": "NodeParagraph",
																					"Properties": {
																						"id": "20210707214341-7ij8ye8"
																					},
																					"Children": [
																						{
																							"Type": "NodeText",
																							"Data": "但是 new 出来的对象会在堆当中持续存在，直到垃圾回收消失。"
																						}
																					]
																				}
																			]
																		}
																	]
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-h59vmep",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-h59vmep"
													},
													"Children": [
														{
															"ID": "20210707214341-014cad3",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-014cad3"
															},
															"Children": [
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "匿名内部类"
																},
																{
																	"Type": "NodeText",
																	"Data": "：是局部内部类的简化写法。它的本质是一个"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "带具体实现的父类或者父接口的匿名的子类对象"
																}
															]
														},
														{
															"ID": "20210707214341-pjda4to",
															"Type": "NodeList",
															"ListData": {
																"BulletChar": 45,
																"Padding": 2,
																"Marker": "LQ==",
																"Num": -1
															},
															"Properties": {
																"id": "20210707214341-pjda4to"
															},
															"Children": [
																{
																	"ID": "20210707214341-u77agte",
																	"Type": "NodeListItem",
																	"Data": "-",
																	"ListData": {
																		"BulletChar": 45,
																		"Padding": 2,
																		"Marker": "LQ==",
																		"Num": -1
																	},
																	"Properties": {
																		"id": "20210707214341-u77agte"
																	},
																	"Children": [
																		{
																			"ID": "20210707214341-493auny",
																			"Type": "NodeParagraph",
																			"Properties": {
																				"id": "20210707214341-493auny"
																			},
																			"Children": [
																				{
																					"Type": "NodeTextMark",
																					"TextMarkType": "strong",
																					"TextMarkTextContent": "前提"
																				},
																				{
																					"Type": "NodeText",
																					"Data": "：匿名内部类必须"
																				},
																				{
																					"Type": "NodeTextMark",
																					"TextMarkType": "strong",
																					"TextMarkTextContent": "继承一个父类"
																				},
																				{
																					"Type": "NodeText",
																					"Data": "或者"
																				},
																				{
																					"Type": "NodeTextMark",
																					"TextMarkType": "strong",
																					"TextMarkTextContent": "实现一个父接口"
																				},
																				{
																					"Type": "NodeText",
																					"Data": "。"
																				}
																			]
																		},
																		{
																			"ID": "20210707214341-snvuxjc",
																			"Type": "NodeCodeBlock",
																			"IsFencedCodeBlock": true,
																			"CodeBlockFenceChar": 96,
																			"CodeBlockFenceLen": 3,
																			"CodeBlockOpenFence": "YGBg",
																			"CodeBlockInfo": "amF2YQ==",
																			"CodeBlockCloseFence": "YGBg",
																			"Properties": {
																				"id": "20210707214341-snvuxjc"
																			},
																			"Children": [
																				{
																					"Type": "NodeCodeBlockFenceOpenMarker",
																					"Data": "```",
																					"CodeBlockFenceLen": 3
																				},
																				{
																					"Type": "NodeCodeBlockFenceInfoMarker",
																					"CodeBlockInfo": "amF2YQ=="
																				},
																				{
																					"Type": "NodeCodeBlockCode",
																					"Data": "接口名称 对象名 = new 接口名称() { //new代表创建对象的动作；接口名称就是匿名内部类需要实现哪个接口\n    // 覆盖重写所有抽象方法\n}; //{...}这才是匿名内部类的内容\n"
																				},
																				{
																					"Type": "NodeCodeBlockFenceCloseMarker",
																					"Data": "```",
																					"CodeBlockFenceLen": 3
																				}
																			]
																		}
																	]
																},
																{
																	"ID": "20210707214341-jf2y0ff",
																	"Type": "NodeListItem",
																	"Data": "-",
																	"ListData": {
																		"Tight": true,
																		"BulletChar": 45,
																		"Padding": 2,
																		"Marker": "LQ==",
																		"Num": -1
																	},
																	"Properties": {
																		"id": "20210707214341-jf2y0ff"
																	},
																	"Children": [
																		{
																			"ID": "20210707214341-s2u1fpk",
																			"Type": "NodeParagraph",
																			"Properties": {
																				"id": "20210707214341-s2u1fpk"
																			},
																			"Children": [
																				{
																					"Type": "NodeTextMark",
																					"TextMarkType": "strong",
																					"TextMarkTextContent": "使用场景："
																				},
																				{
																					"Type": "NodeText",
																					"Data": "方法的参数是接口或抽象类，并且其中的方法不超过三个，嫌麻烦为了不写实现类或子类"
																				}
																			]
																		}
																	]
																},
																{
																	"ID": "20210707214341-lveku1o",
																	"Type": "NodeListItem",
																	"Data": "-",
																	"ListData": {
																		"Tight": true,
																		"BulletChar": 45,
																		"Padding": 2,
																		"Marker": "LQ==",
																		"Num": -1
																	},
																	"Properties": {
																		"id": "20210707214341-lveku1o"
																	},
																	"Children": [
																		{
																			"ID": "20210707214341-hm3asbo",
																			"Type": "NodeParagraph",
																			"Properties": {
																				"id": "20210707214341-hm3asbo"
																			},
																			"Children": [
																				{
																					"Type": "NodeText",
																					"Data": "注意几点问题："
																				}
																			]
																		},
																		{
																			"ID": "20210707214341-el2wcpw",
																			"Type": "NodeList",
																			"ListData": {
																				"Tight": true,
																				"BulletChar": 45,
																				"Padding": 2,
																				"Marker": "LQ==",
																				"Num": -1
																			},
																			"Properties": {
																				"id": "20210707214341-el2wcpw"
																			},
																			"Children": [
																				{
																					"ID": "20210707214341-m2quy4t",
																					"Type": "NodeListItem",
																					"Data": "-",
																					"ListData": {
																						"Tight": true,
																						"BulletChar": 45,
																						"Padding": 2,
																						"Marker": "LQ==",
																						"Num": -1
																					},
																					"Properties": {
																						"id": "20210707214341-m2quy4t"
																					},
																					"Children": [
																						{
																							"ID": "20210707214341-kw9mz11",
																							"Type": "NodeParagraph",
																							"Properties": {
																								"id": "20210707214341-kw9mz11"
																							},
																							"Children": [
																								{
																									"Type": "NodeTextMark",
																									"TextMarkType": "strong",
																									"TextMarkTextContent": "匿名内部类"
																								},
																								{
																									"Type": "NodeText",
																									"Data": "，在【"
																								},
																								{
																									"Type": "NodeTextMark",
																									"TextMarkType": "strong",
																									"TextMarkTextContent": "创建对象"
																								},
																								{
																									"Type": "NodeText",
																									"Data": "】的时候，"
																								},
																								{
																									"Type": "NodeTextMark",
																									"TextMarkType": "strong",
																									"TextMarkTextContent": "只能使用唯一一次"
																								},
																								{
																									"Type": "NodeText",
																									"Data": "。如果希望多次创建对象，而且类的内容一样的话，那么就需要使用单独定义的实现类了。"
																								}
																							]
																						}
																					]
																				},
																				{
																					"ID": "20210707214341-meuas04",
																					"Type": "NodeListItem",
																					"Data": "-",
																					"ListData": {
																						"Tight": true,
																						"BulletChar": 45,
																						"Padding": 2,
																						"Marker": "LQ==",
																						"Num": -1
																					},
																					"Properties": {
																						"id": "20210707214341-meuas04"
																					},
																					"Children": [
																						{
																							"ID": "20210707214341-8qohs35",
																							"Type": "NodeParagraph",
																							"Properties": {
																								"id": "20210707214341-8qohs35"
																							},
																							"Children": [
																								{
																									"Type": "NodeTextMark",
																									"TextMarkType": "strong",
																									"TextMarkTextContent": "匿名对象"
																								},
																								{
																									"Type": "NodeText",
																									"Data": "，在【"
																								},
																								{
																									"Type": "NodeTextMark",
																									"TextMarkType": "strong",
																									"TextMarkTextContent": "调用方法"
																								},
																								{
																									"Type": "NodeText",
																									"Data": "】的时候，"
																								},
																								{
																									"Type": "NodeTextMark",
																									"TextMarkType": "strong",
																									"TextMarkTextContent": "只能调用唯一一次"
																								},
																								{
																									"Type": "NodeText",
																									"Data": "。如果希望同一个对象，调用多次方法，那么必须"
																								},
																								{
																									"Type": "NodeTextMark",
																									"TextMarkType": "strong",
																									"TextMarkTextContent": "给对象起个名字"
																								},
																								{
																									"Type": "NodeText",
																									"Data": "。"
																								}
																							]
																						}
																					]
																				},
																				{
																					"ID": "20210707214341-bg59n9z",
																					"Type": "NodeListItem",
																					"Data": "-",
																					"ListData": {
																						"Tight": true,
																						"BulletChar": 45,
																						"Padding": 2,
																						"Marker": "LQ==",
																						"Num": -1
																					},
																					"Properties": {
																						"id": "20210707214341-bg59n9z"
																					},
																					"Children": [
																						{
																							"ID": "20210707214341-ya55qc3",
																							"Type": "NodeParagraph",
																							"Properties": {
																								"id": "20210707214341-ya55qc3"
																							},
																							"Children": [
																								{
																									"Type": "NodeText",
																									"Data": "匿名内部类是省略了【实现类/子类名称】，但是匿名对象是省略了【对象名称】"
																								}
																							]
																						}
																					]
																				}
																			]
																		}
																	]
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-nm6zwh6",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-nm6zwh6"
					},
					"Children": [
						{
							"ID": "20210707214341-qcv090l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-qcv090l"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "定义一个类的时候，权限修饰符规则："
								}
							]
						},
						{
							"ID": "20210707214341-stdcka3",
							"Type": "NodeList",
							"ListData": {
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-stdcka3"
							},
							"Children": [
								{
									"ID": "20210707214341-zdmue6v",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-zdmue6v"
									},
									"Children": [
										{
											"ID": "20210707214341-mblefgu",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-mblefgu"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "外部类：public / (default)"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-uflo2y5",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-uflo2y5"
									},
									"Children": [
										{
											"ID": "20210707214341-r2werkl",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-r2werkl"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "成员内部类：public / protected / (default) / private"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-5sy6kzw",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-5sy6kzw"
									},
									"Children": [
										{
											"ID": "20210707214341-q90y3df",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-q90y3df"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "局部内部类"
												},
												{
													"Type": "NodeText",
													"Data": "：什么都不能写"
												}
											]
										},
										{
											"ID": "20210707214341-otmvj3h",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"CodeBlockFenceChar": 96,
											"CodeBlockFenceLen": 3,
											"CodeBlockOpenFence": "YGBg",
											"CodeBlockInfo": "amF2YQ==",
											"CodeBlockCloseFence": "YGBg",
											"Properties": {
												"id": "20210707214341-otmvj3h"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "amF2YQ=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "public class Demo {\n    public static void main(String[] args) {\n        new Demo(){ //匿名对象，匿名内部类\n            void show(){\n                System.out.println(\"hello\");\n            }\n        }.show();//hello\n        //若是给对象起名，并用该名调用show方法，则编译不通过，因为父类中没有此方法，当前所属方法才能使用它\n    }\n}\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-6a77gxm",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-6a77gxm"
			},
			"Children": [
				{
					"ID": "20210707214341-c0td5kp",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-c0td5kp"
					},
					"Children": [
						{
							"ID": "20210707214341-85ed7s4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-85ed7s4"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "开发中局部内部类的使用 见《InnerClassTest1.java》"
								}
							]
						},
						{
							"ID": "20210707214341-b2c6v7x",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707214341-b2c6v7x"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "class Animal{\n\n    String name = \"小明\";\n    int age;\n\n    public void eat(){\n        System.out.println(\"动物：吃饭\");\n    }\n\n\n    //静态成员内部类\n    static class Dog{\n        String name;\n        int age;\n\n        public void show(){\n            System.out.println(\"卡拉是条狗\");\n            //eat(); //静态不能调用非静态\n        }\n    }\n    //非静态成员内部类\n    class Bird{\n        String name = \"杜鹃\";\n\n        public Bird(){\n        }\n\n        public void sing(){\n            System.out.println(\"我是一只小小鸟\");\n            Animal.this.eat();//调用外部类的非静态属性\n            eat();\n            System.out.println(age);\n        }\n\n        public void display(String name){\n            System.out.println(name);//方法的形参\n            System.out.println(this.name);//内部类的属性\n            System.out.println(Animal.this.name);//外部类的属性\n        }\n    }\n\n    public void method(){\n        //局部内部类\n        class AA{\n        }\n    }\n\n    {\n        //局部内部类\n        class BB{\n        }\n    }\n\n    public Animal(){\n        //局部内部类\n        class CC{\n        }\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-mjwx3ib",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-mjwx3ib"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "JavaBean"
				}
			]
		},
		{
			"ID": "20210707214341-w4c5u0a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-w4c5u0a"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "JavaBean 是一种 Java 语言写成的可重用组件，符合如下标准的 Java 类："
				}
			]
		},
		{
			"ID": "20210707214341-e61zaql",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-e61zaql"
			},
			"Children": [
				{
					"ID": "20210707214341-y7tceqa",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-y7tceqa"
					},
					"Children": [
						{
							"ID": "20210707214341-w1g4c8a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-w1g4c8a"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "类是公共的"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-8k5gixc",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-8k5gixc"
					},
					"Children": [
						{
							"ID": "20210707214341-1k7pshu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-1k7pshu"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "有一个无参的公共的构造器"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-e6g2hpu",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-e6g2hpu"
					},
					"Children": [
						{
							"ID": "20210707214341-vfsnbfc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-vfsnbfc"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "有属性，且有对应的 get、set 方法"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-6414s4w",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-6414s4w"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "UML 类图"
				}
			]
		},
		{
			"ID": "20210707214341-fqvvwmt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-fqvvwmt"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "Xnip2019-08-20_00-03-07"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "../assets/Xnip2019-08-20_00-03-07.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-655htgt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707214341-655htgt"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "this \u0026 super"
				}
			]
		},
		{
			"ID": "20210707214341-59n0w03",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-59n0w03"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "this"
				}
			]
		},
		{
			"ID": "20210707214341-um95pfp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-um95pfp"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "this 可以调用类的属性、方法、另一个重载构造器（最多只能有一个 this，且在第一句）"
				}
			]
		},
		{
			"ID": "20210707214341-w1i78lm",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-w1i78lm"
			},
			"Children": [
				{
					"ID": "20210707214341-clc8xsq",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-clc8xsq"
					},
					"Children": [
						{
							"ID": "20210707214341-qc8u810",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-qc8u810"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "它在方法内部使用，即这个方法"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "所属对象的引用"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-b94x6l6",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-b94x6l6"
					},
					"Children": [
						{
							"ID": "20210707214341-1ug8606",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-1ug8606"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "它在构造器内部使用，表示该构造器"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "正在初始化的对象"
								}
							]
						},
						{
							"ID": "20210707214341-fwj2u86",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-fwj2u86"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "记住 ：方法"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "被哪个\u0026quot;对象\u0026quot;调用"
								},
								{
									"Type": "NodeText",
									"Data": "，方法中的 this"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "就代表那个\u0026quot;对象\u0026quot;"
								},
								{
									"Type": "NodeText",
									"Data": "。即谁在调用，this 就代表谁。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-0mc31pc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-0mc31pc"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "::: tip"
				}
			]
		},
		{
			"ID": "20210707214341-2dgkzqj",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-2dgkzqj"
			},
			"Children": [
				{
					"ID": "20210707214341-32n4nvb",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-32n4nvb"
					},
					"Children": [
						{
							"ID": "20210707214341-mnj8xlq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-mnj8xlq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用 this"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "访问属性和方法"
								},
								{
									"Type": "NodeText",
									"Data": "时， 如果"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "在本类中未找到，会从父类中查找"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-u5favsi",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-u5favsi"
					},
					"Children": [
						{
							"ID": "20210707214341-8dlelbj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-8dlelbj"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "this 可以作为一个类中"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "构造器相互调用"
								},
								{
									"Type": "NodeText",
									"Data": "的特殊格式，但不能调用自身构造器。如果一个类中声明了 n 个构造器，则最多有 n - 1 个构造器中使用了\"this(形参列表)\""
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-w5ndb28",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-w5ndb28"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": ":::"
				}
			]
		},
		{
			"ID": "20210707214341-ul2swco",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-ul2swco"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那么什么时候使用 this 关键字呢？"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "当在（构造）方法内需要用到调用该方法的对象时"
				},
				{
					"Type": "NodeText",
					"Data": "，就用 this。如："
				}
			]
		},
		{
			"ID": "20210707214341-hnc8bc7",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-hnc8bc7"
			},
			"Children": [
				{
					"ID": "20210707214341-wi821n4",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-wi821n4"
					},
					"Children": [
						{
							"ID": "20210707214341-6rtw8i4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-6rtw8i4"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可以用 this 来"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "区分成员变量和局部变量"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-i9ngo6d",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-i9ngo6d"
					},
					"Children": [
						{
							"ID": "20210707214341-ejmkeda",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-ejmkeda"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "方法中调用该对象其他方法"
								},
								{
									"Type": "NodeText",
									"Data": "（可不写 this）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-n2gm9tj",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-n2gm9tj"
					},
					"Children": [
						{
							"ID": "20210707214341-ykxuf37",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-ykxuf37"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "构造器中调用其他构造器"
								},
								{
									"Type": "NodeText",
									"Data": "，注意事项如上"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-ggtdshz",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-ggtdshz"
					},
					"Children": [
						{
							"ID": "20210707214341-x8bg0qf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-x8bg0qf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "return"
								},
								{
									"Type": "NodeText",
									"Data": " 语句中"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "返回对当前对象的引用"
								},
								{
									"Type": "NodeText",
									"Data": "（"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Builder 模式"
								},
								{
									"Type": "NodeText",
									"Data": "）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-2ueeaeb",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-2ueeaeb"
					},
					"Children": [
						{
							"ID": "20210707214341-4848zba",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-4848zba"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "向其他方法传递当前对象"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-m3nwrcr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-m3nwrcr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "::: tip 原理介绍"
				}
			]
		},
		{
			"ID": "20210707214341-yrddsgz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-yrddsgz"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Banana {\n    void peel(int i) {\n        /*...*/\n    }\n}\npublic class BananaPeel {\n    public static void main(String[] args) {\n        Banana a = new Banana(), b = new Banana();\n        a.peel(1);\n        // b.peel(2);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-bcueiod",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-bcueiod"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在上述方法中，注释掉第二个 peel 方法调用，那么如何确定是对象 a 还是对象 b 调用的 peel 方法呢？编译器做了一些底层工作，所以你可以像这样编写代码。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "peel()"
				},
				{
					"Type": "NodeText",
					"Data": " 方法中第一个参数隐密地传入了一个指向操作对象的引用。因此，上述例子中的方法调用像下面这样："
				}
			]
		},
		{
			"ID": "20210707214341-455nhha",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-455nhha"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Banana.peel(a, 1)\nBanana.peel(b, 1)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-dgz0rpi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-dgz0rpi"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是这是在内部实现的，不能直接这样编写代码，编译器会报错，但是这能说明到底发生了什么。假设现在在方法内部，你想获得对当前对象的引用。但是，对象引用是被秘密地传达给编译器——并不在参数列表中。方便的是，有一个关键字: "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "this"
				},
				{
					"Type": "NodeText",
					"Data": " 。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "this"
				},
				{
					"Type": "NodeText",
					"Data": " 关键字只能在非静态方法内部使用。当你调用一个对象的方法时，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "this"
				},
				{
					"Type": "NodeText",
					"Data": " 生成了一个对象引用。你可以像对待其他引用一样对待这个引用。如果你在一个类的方法里调用其他该类中的方法，不要使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "this"
				},
				{
					"Type": "NodeText",
					"Data": "，直接调用即可，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "this"
				},
				{
					"Type": "NodeText",
					"Data": " 自动地应用于其他方法上了。因此你可以像这样："
				}
			]
		},
		{
			"ID": "20210707214341-qlsnip0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-qlsnip0"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Apricot {\n    void pick() {\n        /* ... */\n    }\n\n    void pit() {\n        pick();\n        /* ... */\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-ma286ib",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-ma286ib"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "pit()"
				},
				{
					"Type": "NodeText",
					"Data": " 方法中，你可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "this.pick()"
				},
				{
					"Type": "NodeText",
					"Data": "，但是没有必要。编译器自动为你做了这些。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "this"
				},
				{
					"Type": "NodeText",
					"Data": " 关键字只用在一些必须显式使用当前对象引用的特殊场合。例如，用在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "return"
				},
				{
					"Type": "NodeText",
					"Data": " 语句中"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "返回对当前对象的引用"
				},
				{
					"Type": "NodeText",
					"Data": "（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Builder 模式"
				},
				{
					"Type": "NodeText",
					"Data": "）。"
				}
			]
		},
		{
			"ID": "20210707214341-l99lyn5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-l99lyn5"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Leaf {\n\n    int i = 0;\n\n    Leaf increment() {\n        i++;\n        return this;\n    }\n\n    void print() {\n        System.out.println(\"i = \" + i);\n    }\n\n    public static void main(String[] args) {\n        Leaf x = new Leaf();\n        x.increment().increment().increment().print();// i = 3\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-v48mcf4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-v48mcf4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "increment()"
				},
				{
					"Type": "NodeText",
					"Data": " 通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "this"
				},
				{
					"Type": "NodeText",
					"Data": " 关键字返回当前对象的引用，因此在相同的对象上可以轻易地执行多次操作。"
				}
			]
		},
		{
			"ID": "20210707214341-i4le5ve",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-i4le5ve"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "this"
				},
				{
					"Type": "NodeText",
					"Data": " 关键字在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "向其他方法传递当前对象"
				},
				{
					"Type": "NodeText",
					"Data": "时也很有用："
				}
			]
		},
		{
			"ID": "20210707214341-966l7zd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-966l7zd"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Person {\n    public void eat(Apple apple) {\n        Apple peeled = apple.getPeeled();\n        System.out.println(\"Yummy\");\n    }\n}\n\nclass Peeler {\n    static Apple peel(Apple apple) {\n        // ... remove peel\n        return apple; // Peeled\n    }\n}\n\nclass Apple {\n    Apple getPeeled() {\n        return Peeler.peel(this);\n    }\n}\n\npublic class PassingThis {\n    public static void main(String[] args) {\n        new Person().eat(new Apple());// Yummy\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-kxs8qxg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-kxs8qxg"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Apple"
				},
				{
					"Type": "NodeText",
					"Data": " 因为某些原因（比如说工具类中的方法在多个类中重复出现，你不想代码重复），必须调用一个外部工具方法 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Peeler.peel()"
				},
				{
					"Type": "NodeText",
					"Data": " 做一些行为。必须使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "this"
				},
				{
					"Type": "NodeText",
					"Data": " 才能将自身传递给外部方法。"
				}
			]
		},
		{
			"ID": "20210707214341-orr0oct",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-orr0oct"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": ":::"
				}
			]
		},
		{
			"ID": "20210707214341-ct3zcfa",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-ct3zcfa"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "super"
				}
			]
		},
		{
			"ID": "20210707214341-kecvdpr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-kecvdpr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 Java 类中"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "使用 super 来调用父类中的指定操作"
				},
				{
					"Type": "NodeText",
					"Data": "。访问父类中定义的属性、成员方法、构造器"
				}
			]
		},
		{
			"ID": "20210707214341-nygoaux",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-nygoaux"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在子父类中"
				}
			]
		},
		{
			"ID": "20210707214341-760xuzh",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-760xuzh"
			},
			"Children": [
				{
					"ID": "20210707214341-w1p7oqq",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-w1p7oqq"
					},
					"Children": [
						{
							"ID": "20210707214341-m3p65gy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-m3p65gy"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "子类中所有的构造器"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "默认都会访问父类中空参数的构造器"
								},
								{
									"Type": "NodeText",
									"Data": "，即默认赠送"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "super()"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-4wcmrq7",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-4wcmrq7"
					},
					"Children": [
						{
							"ID": "20210707214341-azil01m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-azil01m"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当父类中没有空参数的构造器时，子类的构造器必须通过"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "this(参数列表)"
								},
								{
									"Type": "NodeText",
									"Data": "或者"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "super(参数列表)"
								},
								{
									"Type": "NodeText",
									"Data": "语句"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "调用本类或者父类中相应的构造器"
								},
								{
									"Type": "NodeText",
									"Data": "。且 this 和 super 只能"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "二选一，且必须放在构造器的首行"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-53s9zas",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-53s9zas"
					},
					"Children": [
						{
							"ID": "20210707214341-jo1tsxr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-jo1tsxr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有无参的构造器，则编译出错"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-wv8k3l3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-wv8k3l3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "::: tip"
				}
			]
		},
		{
			"ID": "20210707214341-jnl1b8z",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-jnl1b8z"
			},
			"Children": [
				{
					"ID": "20210707214341-ncx4127",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-ncx4127"
					},
					"Children": [
						{
							"ID": "20210707214341-x78hx0r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-x78hx0r"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "super 的追溯不仅限于直接父类"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-ji4r9i0",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-ji4r9i0"
					},
					"Children": [
						{
							"ID": "20210707214341-ldnzg3n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-ldnzg3n"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "super 和 this 的用法相像，this 代表本类对象的引用，super 代表父类的内存空间的标识"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-ckkbcpc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-ckkbcpc"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": ":::"
				}
			]
		},
		{
			"ID": "20210707214341-pmkzwn5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-pmkzwn5"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "区别"
				}
			]
		},
		{
			"ID": "20210707214341-qgu0yrt",
			"Type": "NodeTable",
			"Data": "| 区别点     | this                                                   | super                                                 |\n| ---------- | ------------------------------------------------------ | ----------------------------------------------------- |\n| 访问属性   | 访问本类中的属性，如果本类没有此属性则从父类中继续查找 | 直接访问父类中的属性，若没有则...                     |\n| 调用方法   | 访问本类中的方法，如果本类没有此方法则从父类中继续查找 | 直接访问父类中的方法，若没有则...                     |\n| 调用构造器 | 调用本类构造器，必须放在构造器的首行                   | 调用父类构造器，必须放在子类构造器的首行，若没有则... |",
			"TableAligns": [
				0,
				0,
				0
			],
			"Properties": {
				"id": "20210707214341-qgu0yrt"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "区别点"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "this"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "super"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "访问属性"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "访问本类中的属性，如果本类没有此属性则从父类中继续查找"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "直接访问父类中的属性，若没有则..."
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用方法"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "访问本类中的方法，如果本类没有此方法则从父类中继续查找"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "直接访问父类中的方法，若没有则..."
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用构造器"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用本类构造器，必须放在构造器的首行"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用父类构造器，必须放在子类构造器的首行，若没有则..."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-lk37l5s",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-lk37l5s"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "this \u0026 super 内存图"
				}
			]
		},
		{
			"ID": "20210707214341-lbfib3q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-lbfib3q"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "父类空间优先于子类对象产生"
				},
				{
					"Type": "NodeText",
					"Data": "。在每次创建子类对象时，先初始化父类空间，再创建其子类对象本身。目的在于子类对象中包含了其对应的父类空间，便可以包含其父类的成员，如果父类成员非 private 修饰，则子类可以随意使用父类成员。代码体现在子类的构 造方法调用时，一定先调用父类的构造方法。"
				}
			]
		},
		{
			"ID": "20210707214341-e7mzh0h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-e7mzh0h"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "../assets/super\u0026this.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-ah7b7sn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-ah7b7sn"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "this \u0026 super 顺序问题"
				}
			]
		},
		{
			"ID": "20210707214341-ejd2q16",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-ejd2q16"
			},
			"Children": [
				{
					"ID": "20210707214341-zmha4am",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-zmha4am"
					},
					"Children": [
						{
							"ID": "20210707214341-cafwqe0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-cafwqe0"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "为什么 super(...)和 this(...)调用语句不能同时在一个构造器中出现？"
								}
							]
						},
						{
							"ID": "20210707214341-x4z9asa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-x4z9asa"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "因为两个都要出现在首行！所以只能存在一个"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-8fu459b",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-8fu459b"
					},
					"Children": [
						{
							"ID": "20210707214341-i8afuvb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-i8afuvb"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "为什么 super(...)或 this(...)调用语句只能作为构造器中的第一句出现？"
								}
							]
						},
						{
							"ID": "20210707214341-5hkuwxv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-5hkuwxv"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "无论通过哪个构造器创建子类对象，需要保证先初始化父类。目的在于当子类继承父类后，会继承父类中所有属性和方法，因此子类有必要知道父类如何为对象初始化！"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-bkht8nu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707214341-bkht8nu"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "static"
				}
			]
		},
		{
			"ID": "20210707214341-olczjfi",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-olczjfi"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20210707214341-t8z97in",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-t8z97in"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "某些特定的数据在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "内存空间里只有一份"
				},
				{
					"Type": "NodeText",
					"Data": "，如果一个成员使用了 static 关键字（静态的），那么这个成员不再属于自己，而是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "属于所在类"
				},
				{
					"Type": "NodeText",
					"Data": "，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "由多个对象共享这个成员"
				},
				{
					"Type": "NodeText",
					"Data": "。可用于修饰"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "成员变量、成员方法、代码块、内部类"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210707214341-gewut9g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-gewut9g"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "::: tip"
				}
			]
		},
		{
			"ID": "20210707214341-oqhxqn6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-oqhxqn6"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "abstract 和 static 不能同时使用"
				},
				{
					"Type": "NodeText",
					"Data": "。abstract 修饰的方法没有方法体，static 修饰的方法可以类名调用，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "编译失败"
				}
			]
		},
		{
			"ID": "20210707214341-6uuxckm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-6uuxckm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": ":::"
				}
			]
		},
		{
			"ID": "20210707214341-7l0ncsq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-7l0ncsq"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "修饰成员"
				}
			]
		},
		{
			"ID": "20210707214341-mxjtwob",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-mxjtwob"
			},
			"Children": [
				{
					"ID": "20210707214341-so1xjfx",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-so1xjfx"
					},
					"Children": [
						{
							"ID": "20210707214341-r5vdl7s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-r5vdl7s"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "修饰属性 / 成员变量"
								},
								{
									"Type": "NodeText",
									"Data": "：被修饰的称做"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "静态成员变量（或类变量）"
								},
								{
									"Type": "NodeText",
									"Data": "，区别如下："
								}
							]
						},
						{
							"ID": "20210707214341-62onhpn",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-62onhpn"
							},
							"Children": [
								{
									"ID": "20210707214341-afvmgyn",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-afvmgyn"
									},
									"Children": [
										{
											"ID": "20210707214341-vp8mtrw",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-vp8mtrw"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "静态成员变量（或类变量）：多个对象共享同一个静态变量。"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-04tumbs",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-04tumbs"
									},
									"Children": [
										{
											"ID": "20210707214341-36qhz6q",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-36qhz6q"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "非静态变量（实例变量）：每个对象都独立的拥有一套类中的非静态变量。"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20210707214341-xwb5cuv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-xwb5cuv"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "::: tip"
								}
							]
						},
						{
							"ID": "20210707214341-ndof34d",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-ndof34d"
							},
							"Children": [
								{
									"ID": "20210707214341-4t4ws22",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-4t4ws22"
									},
									"Children": [
										{
											"ID": "20210707214341-v98qkui",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-v98qkui"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "静态变量"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "随着类的加载而加载"
												},
												{
													"Type": "NodeText",
													"Data": "。可以通过"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "类.静态变量"
												},
												{
													"Type": "NodeText",
													"Data": "的方式进行调用"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-oh3s8wo",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-oh3s8wo"
									},
									"Children": [
										{
											"ID": "20210707214341-qxr7fvd",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-qxr7fvd"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "静态变量的"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "加载要早于对象的创建"
												},
												{
													"Type": "NodeText",
													"Data": "。"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-eweuj1p",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-eweuj1p"
									},
									"Children": [
										{
											"ID": "20210707214341-wvuflsc",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-wvuflsc"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "由于类只会加载一次，则静态变量在内存中也只会存在一份：存在"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "方法区的静态域中"
												},
												{
													"Type": "NodeText",
													"Data": "。"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20210707214341-ciy2e6z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-ciy2e6z"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": ":::"
								}
							]
						},
						{
							"ID": "20210707214341-p3ye2rx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-p3ye2rx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "开发中，如何确定一个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "属性"
								},
								{
									"Type": "NodeText",
									"Data": "是否要声明为 static 的？"
								}
							]
						},
						{
							"ID": "20210707214341-xb9g0u1",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-xb9g0u1"
							},
							"Children": [
								{
									"ID": "20210707214341-0e4qqb5",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-0e4qqb5"
									},
									"Children": [
										{
											"ID": "20210707214341-zoz0ssz",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-zoz0ssz"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "属性是可以"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "被多个对象所共享"
												},
												{
													"Type": "NodeText",
													"Data": "的，不会随着对象的不同而不同的。"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-kb27ct7",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-kb27ct7"
									},
									"Children": [
										{
											"ID": "20210707214341-7d49t0y",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-7d49t0y"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "类中的"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "常量"
												},
												{
													"Type": "NodeText",
													"Data": "也常常声明为 static"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-38yrmzz",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-38yrmzz"
			},
			"Children": [
				{
					"ID": "20210707214341-cofaq7v",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-cofaq7v"
					},
					"Children": [
						{
							"ID": "20210707214341-z89i7et",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-z89i7et"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "修饰方法"
								},
								{
									"Type": "NodeText",
									"Data": "：被修饰的称做"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "静态方法"
								}
							]
						},
						{
							"ID": "20210707214341-lavadvt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-lavadvt"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "::: tip"
								}
							]
						},
						{
							"ID": "20210707214341-gj87xk3",
							"Type": "NodeList",
							"ListData": {
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-gj87xk3"
							},
							"Children": [
								{
									"ID": "20210707214341-ao6f0ci",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-ao6f0ci"
									},
									"Children": [
										{
											"ID": "20210707214341-t3ov8qe",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-t3ov8qe"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "静态方法"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "随着类的加载而加载"
												},
												{
													"Type": "NodeText",
													"Data": "，可以通过"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "类.静态方法"
												},
												{
													"Type": "NodeText",
													"Data": "的方式进行调用"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-qhe1t8s",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-qhe1t8s"
									},
									"Children": [
										{
											"ID": "20210707214341-ivnacg2",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-ivnacg2"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "静态方法中，只能调用静态的方法或属性（由于生命周期）;非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-24skc6n",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-24skc6n"
									},
									"Children": [
										{
											"ID": "20210707214341-3i2nwpb",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-3i2nwpb"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在静态的方法内，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "不能使用 this 关键字、super 关键字"
												},
												{
													"Type": "NodeText",
													"Data": "（由于生命周期）"
												}
											]
										},
										{
											"ID": "20210707214341-ouwmhoo",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-ouwmhoo"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "关于静态变量和静态方法的使用，大家都从生命周期的角度去理解。"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20210707214341-sf2i7b9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-sf2i7b9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": ":::"
								}
							]
						},
						{
							"ID": "20210707214341-nx2aafm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-nx2aafm"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "开发中，如何确定一个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "方法"
								},
								{
									"Type": "NodeText",
									"Data": "是否要声明为 static 的？"
								}
							]
						},
						{
							"ID": "20210707214341-pfmlhbw",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-pfmlhbw"
							},
							"Children": [
								{
									"ID": "20210707214341-6zyfrhq",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-6zyfrhq"
									},
									"Children": [
										{
											"ID": "20210707214341-3nti1sg",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-3nti1sg"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "操作静态属性的方法"
												},
												{
													"Type": "NodeText",
													"Data": "，通常设置为 static 的"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-zm374kx",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-zm374kx"
									},
									"Children": [
										{
											"ID": "20210707214341-uesol4e",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-uesol4e"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "工具类"
												},
												{
													"Type": "NodeText",
													"Data": "中的方法，习惯上声明为 static 的。 比如：Math、Arrays、Collections"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-kndniai",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-kndniai"
			},
			"Children": [
				{
					"ID": "20210707214341-rhbjy7h",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-rhbjy7h"
					},
					"Children": [
						{
							"ID": "20210707214341-b5dg0jv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-b5dg0jv"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "修饰代码块"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-p77m61x",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-p77m61x"
			},
			"Children": [
				{
					"ID": "20210707214341-lkuby74",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-lkuby74"
					},
					"Children": [
						{
							"ID": "20210707214341-ep5s84n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-ep5s84n"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "修饰内部类"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-ud8pqwd",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-ud8pqwd"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "静态内存图"
				}
			]
		},
		{
			"ID": "20210707214341-aw2f8sc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-aw2f8sc"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "../assets/static.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-immkohr",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-immkohr"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "示例"
				}
			]
		},
		{
			"ID": "20210707214341-rz7cjcb",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-rz7cjcb"
			},
			"Children": [
				{
					"ID": "20210707214341-xea24od",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-xea24od"
					},
					"Children": [
						{
							"ID": "20210707214341-19i65oy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-19i65oy"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Arrays、Math、Collections 工具类"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-nesdm4w",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-nesdm4w"
					},
					"Children": [
						{
							"ID": "20210707214341-ycx068g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-ycx068g"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "单例设计模式有用到"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-qj1qpo7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707214341-qj1qpo7"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "final"
				}
			]
		},
		{
			"ID": "20210707214341-5zy16tk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-5zy16tk"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20210707214341-3w0g1wj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-3w0g1wj"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "::: tip"
				}
			]
		},
		{
			"ID": "20210707214341-a2ugusl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-a2ugusl"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "abstract 和 final 不能同时使用"
				},
				{
					"Type": "NodeText",
					"Data": "。abstract 修饰类、方法是需要被实现、重写的，与 final 矛盾"
				}
			]
		},
		{
			"ID": "20210707214341-cbejfma",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-cbejfma"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": ":::"
				}
			]
		},
		{
			"ID": "20210707214341-d4fyfik",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-d4fyfik"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "final，最终的。可以用来修饰的结构：类、方法、变量。"
				}
			]
		},
		{
			"ID": "20210707214341-bj97uyd",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-bj97uyd"
			},
			"Children": [
				{
					"ID": "20210707214341-ypvxmeh",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-ypvxmeh"
					},
					"Children": [
						{
							"ID": "20210707214341-6g62s5g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-6g62s5g"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "类"
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "此类不能被其他类所继承"
								},
								{
									"Type": "NodeText",
									"Data": "。比如：String 类、System 类、StringBuffer 类"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-tky4jxz",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-tky4jxz"
					},
					"Children": [
						{
							"ID": "20210707214341-fdx53ou",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-fdx53ou"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "方法"
								},
								{
									"Type": "NodeText",
									"Data": "：表明"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "此方法不可以被重写"
								},
								{
									"Type": "NodeText",
									"Data": "。比如：Object 类中"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "getClass()"
								},
								{
									"Type": "NodeText",
									"Data": "，是 native 方法"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-qsfay1y",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-qsfay1y"
					},
					"Children": [
						{
							"ID": "20210707214341-laefgez",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-laefgez"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "变量（成员变量、局部变量）"
								},
								{
									"Type": "NodeText",
									"Data": "："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "此时的\u0026quot;变量\u0026quot;就称为是一个常量，名称大写，且只能被赋值一次。"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						},
						{
							"ID": "20210707214341-1lbvto3",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-1lbvto3"
							},
							"Children": [
								{
									"ID": "20210707214341-l2hblr1",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-l2hblr1"
									},
									"Children": [
										{
											"ID": "20210707214341-uc6h5j0",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-uc6h5j0"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "final 修饰"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "属性（成员变量）"
												},
												{
													"Type": "NodeText",
													"Data": "：由于成员变量有默认值，用 final 修饰后"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "必须手动赋值"
												},
												{
													"Type": "NodeText",
													"Data": "！否则编译失败！可以考虑赋值的位置有：显式初始化、代码块初始化、构造器初始化（所有构造器都需赋值）。一般配合"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "static final 定义全局常量"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-w4mwwv7",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-w4mwwv7"
									},
									"Children": [
										{
											"ID": "20210707214341-i2an3ic",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-i2an3ic"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "final 修饰"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "局部变量"
												},
												{
													"Type": "NodeText",
													"Data": "：尤其是使用 final 修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。"
												}
											]
										},
										{
											"ID": "20210707214341-dmyubfc",
											"Type": "NodeList",
											"ListData": {
												"Tight": true,
												"BulletChar": 45,
												"Padding": 2,
												"Marker": "LQ==",
												"Num": -1
											},
											"Properties": {
												"id": "20210707214341-dmyubfc"
											},
											"Children": [
												{
													"ID": "20210707214341-r71hoja",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-r71hoja"
													},
													"Children": [
														{
															"ID": "20210707214341-dhhmn1t",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-dhhmn1t"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "基本类型：只能"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "赋值一次"
																},
																{
																	"Type": "NodeText",
																	"Data": "，"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "不能再更改"
																},
																{
																	"Type": "NodeText",
																	"Data": "。"
																}
															]
														}
													]
												},
												{
													"ID": "20210707214341-zyh5j7b",
													"Type": "NodeListItem",
													"Data": "-",
													"ListData": {
														"Tight": true,
														"BulletChar": 45,
														"Padding": 2,
														"Marker": "LQ==",
														"Num": -1
													},
													"Properties": {
														"id": "20210707214341-zyh5j7b"
													},
													"Children": [
														{
															"ID": "20210707214341-ihfayzu",
															"Type": "NodeParagraph",
															"Properties": {
																"id": "20210707214341-ihfayzu"
															},
															"Children": [
																{
																	"Type": "NodeText",
																	"Data": "引用类型：只能指向一个对象，"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "地址不能再更改"
																},
																{
																	"Type": "NodeText",
																	"Data": "。"
																},
																{
																	"Type": "NodeTextMark",
																	"TextMarkType": "strong",
																	"TextMarkTextContent": "不影响内部成员变量的修改"
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-fjchqpn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-fjchqpn"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "习题"
				}
			]
		},
		{
			"ID": "20210707214341-i6pmd9a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-i6pmd9a"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "习题 1："
				}
			]
		},
		{
			"ID": "20210707214341-3g9sddc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-3g9sddc"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Something {\n    public int addOne(final int x) {\n    \treturn ++x; // 编译报错\n        // return x + 1; // OK\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-aoadeb8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-aoadeb8"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "习题 2："
				}
			]
		},
		{
			"ID": "20210707214341-vo7bpj3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-vo7bpj3"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Something {\n    public static void main(String[] args) {\n        Other o = new Other();\n        new Something().addOne(o);\n    }\n    public void addOne(final Other o) {\n        // o = new Other(); // 编译报错\n        o.i++; // OK\n    }\n}\n\nclass Other {\n    public int i;\n{\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-p94u0tf",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707214341-p94u0tf"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "类的初始化"
				}
			]
		},
		{
			"ID": "20210707214341-953d42l",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-953d42l"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "初始化时机"
				}
			]
		},
		{
			"ID": "20210707214341-4rrs5ot",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-4rrs5ot"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类的初始化时机就是在\"在首次主动使用时\"："
				}
			]
		},
		{
			"ID": "20210707214341-g699z04",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-g699z04"
			},
			"Children": [
				{
					"ID": "20210707214341-wnlfdj9",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-wnlfdj9"
					},
					"Children": [
						{
							"ID": "20210707214341-uw0y7io",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-uw0y7io"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建某个类的新实例时--new、反射、克隆或反序列化；"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-hyslrto",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-hyslrto"
					},
					"Children": [
						{
							"ID": "20210707214341-n5vdr1a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-n5vdr1a"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用某个类的静态方法时；"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-lvwmihe",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-lvwmihe"
					},
					"Children": [
						{
							"ID": "20210707214341-febh6gu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-febh6gu"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用某个类或接口的静态字段或对该字段赋值时（final 字段除外）；"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-xr8ib8o",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-xr8ib8o"
					},
					"Children": [
						{
							"ID": "20210707214341-s1wu2wi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-s1wu2wi"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用 Java 的某些反射方法时"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-1o4e33q",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-1o4e33q"
					},
					"Children": [
						{
							"ID": "20210707214341-dt0wwdt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-dt0wwdt"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "初始化某个类的子类时"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-zh6rca3",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-zh6rca3"
					},
					"Children": [
						{
							"ID": "20210707214341-26fcifo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-26fcifo"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在虚拟机启动时某个含有 main()方法的那个启动类。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-fd9z1h4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-fd9z1h4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "除了以上几种情形以外（JVM 书中提及），所有其它使用 JAVA 类型的方式都是被动使用的，他们不会导致类的初始化。"
				}
			]
		},
		{
			"ID": "20210707214341-zw9arve",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-zw9arve"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "初始化过程"
				}
			]
		},
		{
			"ID": "20210707214341-oazk9nv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-oazk9nv"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "::: tip 注意"
				}
			]
		},
		{
			"ID": "20210707214341-gkjp5ca",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-gkjp5ca"
			},
			"Children": [
				{
					"ID": "20210707214341-uzx8l0s",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-uzx8l0s"
					},
					"Children": [
						{
							"ID": "20210707214341-br9rbxe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-br9rbxe"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "静态成员的初始化"
								},
								{
									"Type": "NodeText",
									"Data": "只有在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "第一次使用静态成员"
								},
								{
									"Type": "NodeText",
									"Data": "（如静态变量、静态方法）、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "第一次创建对象"
								},
								{
									"Type": "NodeText",
									"Data": "（构造器实际上也是静态方法）时进行；"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-qer1bjj",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-qer1bjj"
					},
					"Children": [
						{
							"ID": "20210707214341-41lucgk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-41lucgk"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "非静态成员的初始化"
								},
								{
									"Type": "NodeText",
									"Data": "只有在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "创建对象"
								},
								{
									"Type": "NodeText",
									"Data": "时才进行；"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-k2yy1qy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-k2yy1qy"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": ":::"
				}
			]
		},
		{
			"ID": "20210707214341-jetlwvq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-jetlwvq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如下考虑的是第一次创建对象时初始化过程，其他次只需去掉 1、2 步骤即可："
				}
			]
		},
		{
			"ID": "20210707214341-vzh8pxl",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Tight": true,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 4,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210707214341-vzh8pxl"
			},
			"Children": [
				{
					"ID": "20210707214341-3ihvlit",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210707214341-3ihvlit"
					},
					"Children": [
						{
							"ID": "20210707214341-64yn748",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-64yn748"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "（一般先考虑"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "main()"
								},
								{
									"Type": "NodeText",
									"Data": "所在类）JVM 加载"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "main()"
								},
								{
									"Type": "NodeText",
									"Data": "或其他静态成员所属类的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": ".class"
								},
								{
									"Type": "NodeText",
									"Data": "文件，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "若有基类则先加载基类"
								},
								{
									"Type": "NodeText",
									"Data": "（虽然加载了父类，但是并没创建对象）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-ektfdh5",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210707214341-ektfdh5"
					},
					"Children": [
						{
							"ID": "20210707214341-eg2k2dt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-eg2k2dt"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "执行"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "基类"
								},
								{
									"Type": "NodeText",
									"Data": "对应"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": ".class"
								},
								{
									"Type": "NodeText",
									"Data": "中 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "static 默认初始化"
								},
								{
									"Type": "NodeText",
									"Data": "，静态变量"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "显示初始化"
								},
								{
									"Type": "NodeText",
									"Data": "和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "静态代码块初始化"
								},
								{
									"Type": "NodeText",
									"Data": "这俩，后俩按其定义顺序执行。后执行派生类的上述 static 初始化。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-i0wki6d",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20210707214341-i0wki6d"
					},
					"Children": [
						{
							"ID": "20210707214341-y28ae7x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-y28ae7x"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当所有基类和派生类的静态初始化执行完毕时，回到正创建对象的派生类的构造器中，开始"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "构造器初始化"
								}
							]
						},
						{
							"ID": "20210707214341-f1npomo",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1,
								"Tight": true,
								"Start": 1,
								"Delimiter": 46,
								"Padding": 4,
								"Marker": "MQ==",
								"Num": 1
							},
							"Properties": {
								"id": "20210707214341-f1npomo"
							},
							"Children": [
								{
									"ID": "20210707214341-sdqp2wy",
									"Type": "NodeListItem",
									"Data": "1",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 1,
										"Delimiter": 46,
										"Padding": 4,
										"Marker": "MQ==",
										"Num": 1
									},
									"Properties": {
										"id": "20210707214341-sdqp2wy"
									},
									"Children": [
										{
											"ID": "20210707214341-24cn9p4",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-24cn9p4"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "先根据隐藏的第一行"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "super()"
												},
												{
													"Type": "NodeText",
													"Data": "来到"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "根基类"
												},
												{
													"Type": "NodeText",
													"Data": " 的"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "无参构造器"
												},
												{
													"Type": "NodeText",
													"Data": "，出现"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "this()"
												},
												{
													"Type": "NodeText",
													"Data": "之类的也同理"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-xtqaafq",
									"Type": "NodeListItem",
									"Data": "2",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 2,
										"Delimiter": 46,
										"Padding": 4,
										"Marker": "Mg==",
										"Num": 2
									},
									"Properties": {
										"id": "20210707214341-xtqaafq"
									},
									"Children": [
										{
											"ID": "20210707214341-ek970c9",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-ek970c9"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "初始化该类的非静态成员，执行对应"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": ".class"
												},
												{
													"Type": "NodeText",
													"Data": "中"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "非 static 默认初始化"
												},
												{
													"Type": "NodeText",
													"Data": "，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "显式初始化"
												},
												{
													"Type": "NodeText",
													"Data": "和"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "构造代码块的初始化"
												},
												{
													"Type": "NodeText",
													"Data": "，后俩按其定义顺序执行；执行该类"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "被调用的构造器定义的初始化（一般是无参构造）"
												},
												{
													"Type": "NodeText",
													"Data": "。注意"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "方法重写"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-zlpvx4o",
									"Type": "NodeListItem",
									"Data": "3",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 3,
										"Delimiter": 46,
										"Padding": 4,
										"Marker": "Mw==",
										"Num": 3
									},
									"Properties": {
										"id": "20210707214341-zlpvx4o"
									},
									"Children": [
										{
											"ID": "20210707214341-eknw52g",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-eknw52g"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "执行"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "调用该类的派生类"
												},
												{
													"Type": "NodeText",
													"Data": "之后的第 2 步初始化操作，重复如此"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-ghzgv26",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-ghzgv26"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "若是第一次使用静态成员，则只会初始化静态成员，即上述 1、2 步骤；若是其它次则仅仅调用静态成员"
				}
			]
		},
		{
			"ID": "20210707214341-b4wdw7n",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-b4wdw7n"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "属性/成员变量赋值顺序"
				}
			]
		},
		{
			"ID": "20210707214341-b4eab6f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-b4eab6f"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类中变量定义的顺序决定了它们初始化的顺序"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "即使变量定义散布在方法定义之间，它们仍会在任何方法（包括构造器）被调用之前得到初始化"
				},
				{
					"Type": "NodeText",
					"Data": "。所以此时可能会造成重复初始化，这乍一看可能觉得效率不高，但"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "保证了正确的初始化"
				},
				{
					"Type": "NodeText",
					"Data": "。试想，如果定义了一个重载构造器，在其中没有初始化该变量，会产生怎样的后果呢？"
				}
			]
		},
		{
			"ID": "20210707214341-wvxv3w8",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-wvxv3w8"
			},
			"Children": [
				{
					"ID": "20210707214341-3wztcng",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-3wztcng"
					},
					"Children": [
						{
							"ID": "20210707214341-xvxigj8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-xvxigj8"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "① 默认初始化"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-2uptoil",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-2uptoil"
					},
					"Children": [
						{
							"ID": "20210707214341-bfxcd8o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-bfxcd8o"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "② 显式初始化/⑤ 在代码块中赋值（静态属性/成员变量也是如此）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-jnrrpxf",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-jnrrpxf"
					},
					"Children": [
						{
							"ID": "20210707214341-u5ni4pw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-u5ni4pw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "③ 构造器中初始化"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-bw14681",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-bw14681"
					},
					"Children": [
						{
							"ID": "20210707214341-kdiuzsy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-kdiuzsy"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "④ 有了对象以后，可以通过\"对象.属性\"或\"对象.方法\"的方式，进行赋值"
								}
							]
						},
						{
							"ID": "20210707214341-955rur2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-955rur2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "执行的先后顺序：① - ② / ⑤ - ③ - ④。此处结论在“初始化过程”中已经体现！"
								}
							]
						},
						{
							"ID": "20210707214341-wng62pd",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707214341-wng62pd"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class OrderTest {\n    public static void main(String[] args) {\n        Order order = new Order();\n        System.out.println(order.orderId);// 4\n    }\n}\n\nclass Order{\n    {\n        orderId = 4;\n    }\n    int orderId = 3;\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-0efdwgd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-0efdwgd"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "page38image59470016.jpg"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "../assets/page38image59470016.jpg"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-uumcgew",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-uumcgew"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "习题 1"
				}
			]
		},
		{
			"ID": "20210707214341-zxb8fzx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-zxb8fzx"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Bowl {\n    Bowl(int marker) {\n        System.out.println(\"Bowl(\" + marker + \")\");\n    }\n\n    void f1(int marker) {\n        System.out.println(\"f1(\" + marker + \")\");\n    }\n}\n\nclass Table {\n    static Bowl bowl1 = new Bowl(1);\n\n    Table() {\n        System.out.println(\"Table()\");\n        bowl2.f1(1);\n    }\n\n    void f2(int marker) {\n        System.out.println(\"f2(\" + marker + \")\");\n    }\n\n    static Bowl bowl2 = new Bowl(2);\n}\n\nclass Cupboard {\n    Bowl bowl3 = new Bowl(3);\n    static Bowl bowl4 = new Bowl(4);\n\n    Cupboard() {\n        System.out.println(\"Cupboard()\");\n        bowl4.f1(2);\n    }\n\n    void f3(int marker) {\n        System.out.println(\"f3(\" + marker + \")\");\n    }\n\n    static Bowl bowl5 = new Bowl(5);\n}\n\npublic class StaticInitialization {\n    public static void main(String[] args) {\n        System.out.println(\"main creating new Cupboard()\");\n        new Cupboard();\n        System.out.println(\"main creating new Cupboard()\");\n        new Cupboard();\n        table.f2(1);\n        cupboard.f3(1);\n    }\n\n    static Table table = new Table();\n    static Cupboard cupboard = new Cupboard();\n}\n/*\nBowl(1)\nBowl(2)\nTable()\nf1(1)\nBowl(4)\nBowl(5)\nBowl(3)\nCupboard()\nf1(2)\nmain creating new Cupboard()\nBowl(3)\nCupboard()\nf1(2)\nmain creating new Cupboard()\nBowl(3)\nCupboard()\nf1(2)\nf2(1)\nf3(1)\n*/\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-tuwsnhg",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-tuwsnhg"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "习题 2"
				}
			]
		},
		{
			"ID": "20210707214341-9s9xc7f",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-9s9xc7f"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Father{\n    private int i = test();\n    private static int j = method();\n\n    static{\n        System.out.print(\"1 \");\n    }\n    public Father(){\n        System.out.print(\"2 \");\n    }\n    {\n        System.out.print(\"3 \");\n    }\n    public int test() {\n        System.out.print(\"4 \");\n        return 1;\n    }\n    public static int method() {\n        System.out.print(\"5 \");\n        return 1;\n    }\n}\n\npublic class Son extends Father{\n    private int i = test();\n    private static int j = method();\n\n    static{\n        System.out.print(\"6 \");\n    }\n    public Son(){\n        System.out.print(\"7 \");\n    }\n    {\n        System.out.print(\"8 \");\n    }\n  \t@Override\n    public int test(){\n        System.out.print(\"9 \");\n        return 1;\n    }\n    public static int method(){\n        System.out.print(\"10 \");\n        return 1;\n    }\n\n    public static void main(String[] args) { //也可以放在其他类中\n      \t// 区别在于会加载 main 所属类\n        new Father();// 5 1 10 6 4 3 2\n        System.out.println();\n        new Father();// 4 3 2\n\n        Son.j = 1;// 5 1 10 6\n        System.out.println();\n        Son.j = 1;//\n\n        new Son();//5 1 10 6 9 3 2 9 8 7\n        System.out.println();\n        new Son();//9 3 2 9 8 7\n    }\n}\n\nclass Test {\n    public static void main(String[] args) {\n        new Father();// 5 1 4 3 2\n        System.out.println();\n        new Father();// 4 3 2\n\n        Son.j = 1;// 5 1 10 6\n        System.out.println();\n        Son.j = 1;//\n\n        new Son();//5 1 10 6 9 3 2 9 8 7\n        System.out.println();\n        new Son();//9 3 2 9 8 7\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-9xabamw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-9xabamw"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "习题 3"
				}
			]
		},
		{
			"ID": "20210707214341-r5sfn92",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-r5sfn92"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//总结：由父及子，静态先行\nclass Root{\n    static{\n        System.out.println(\"Root的静态初始化块\");\n    }\n    {\n        System.out.println(\"Root的普通初始化块\");\n    }\n    public Root(){\n        super();\n        System.out.println(\"Root的无参数的构造器\");\n    }\n}\nclass Mid extends Root{\n    static{\n        System.out.println(\"Mid的静态初始化块\");\n    }\n    {\n        System.out.println(\"Mid的普通初始化块\");\n    }\n    public Mid(){\n        super();\n        System.out.println(\"Mid的无参数的构造器\");\n    }\n    public Mid(String msg){\n        //通过this调用同一类中重载的构造器\n        this();\n        System.out.println(\"Mid的带参数构造器，其参数值：\" + msg);\n    }\n}\nclass Leaf extends Mid{\n    static{\n        System.out.println(\"Leaf的静态初始化块\");\n    }\n    {\n        System.out.println(\"Leaf的普通初始化块\");\n    }\n    public Leaf(){\n        //通过super调用父类中有一个字符串参数的构造器\n        super(\"尚硅谷\");\n        System.out.println(\"Leaf的构造器\");\n    }\n}\npublic class LeafTest{\n    public static void main(String[] args){\n        new Leaf();\n        System.out.println();\n        new Leaf();\n\n    }\n    /*\n    Root的静态初始化块\n    Mid的静态初始化块\n    Leaf的静态初始化块\n    Root的普通初始化块\n    Root的无参数的构造器\n    Mid的普通初始化块\n    Mid的无参数的构造器\n    Mid的带参数构造器，其参数值：尚硅谷\n    Leaf的普通初始化块\n    Leaf的构造器\n\n    Root的普通初始化块\n    Root的无参数的构造器\n    Mid的普通初始化块\n    Mid的无参数的构造器\n    Mid的带参数构造器，其参数值：尚硅谷\n    Leaf的普通初始化块\n    Leaf的构造器\n    */\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-jed4xom",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-jed4xom"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "习题 4"
				}
			]
		},
		{
			"ID": "20210707214341-mesiadq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-mesiadq"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Father {\n    static {\n        System.out.println(\"11111111111\");\n    }\n    {\n        System.out.println(\"22222222222\");\n    }\n\n    public Father() {\n        System.out.println(\"33333333333\");\n\n    }\n}\n\npublic class Son extends Father {\n    static {\n        System.out.println(\"44444444444\");\n    }\n    {\n        System.out.println(\"55555555555\");\n    }\n    public Son() {\n        System.out.println(\"66666666666\");\n    }\n\n\n    public static void main(String[] args) { // 由父及子 静态先行\n        System.out.println(\"77777777777\");\n        System.out.println(\"************************\");\n        new Son();\n        System.out.println(\"************************\");\n        new Son();\n        System.out.println(\"************************\");\n        new Father();\n    }\n}\n/*\n11111111111\n44444444444\n77777777777\n************************\n22222222222\n33333333333\n55555555555\n66666666666\n************************\n22222222222\n33333333333\n55555555555\n66666666666\n************************\n22222222222\n33333333333\n*/\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-gufipnj",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707214341-gufipnj"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "访问控制"
				}
			]
		},
		{
			"ID": "20210707214341-rz05wvb",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-rz05wvb"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "package"
				}
			]
		},
		{
			"ID": "20210707214341-seyc12e",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-seyc12e"
			},
			"Children": [
				{
					"ID": "20210707214341-4hy22h2",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-4hy22h2"
					},
					"Children": [
						{
							"ID": "20210707214341-fnyyrow",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-fnyyrow"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "package 语句作为 Java 源文件"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "除注释外的第一条语句"
								},
								{
									"Type": "NodeText",
									"Data": "，指明该文件中定义的类所在的包（若缺省该语句，则指定为无名包）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-u81w4i6",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-u81w4i6"
					},
					"Children": [
						{
							"ID": "20210707214341-oqvuic4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-oqvuic4"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用处："
								}
							]
						},
						{
							"ID": "20210707214341-19x5muj",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-19x5muj"
							},
							"Children": [
								{
									"ID": "20210707214341-fehph7k",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-fehph7k"
									},
									"Children": [
										{
											"ID": "20210707214341-gzxmpgj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-gzxmpgj"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "包帮助管理大型软件系统:将功能相近的类划分到同一个包中。比如：MVC 的设计模式"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-jxufyis",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-jxufyis"
									},
									"Children": [
										{
											"ID": "20210707214341-p10ax8v",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-p10ax8v"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "包可以包含类和子包，划分项目层次，便于管理"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-wgqn716",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-wgqn716"
									},
									"Children": [
										{
											"ID": "20210707214341-ojx9y77",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-ojx9y77"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "解决类命名冲突的问题"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-ta86xs5",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-ta86xs5"
									},
									"Children": [
										{
											"ID": "20210707214341-opcdj15",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-opcdj15"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "控制访问权限"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-2pv9zmn",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-2pv9zmn"
					},
					"Children": [
						{
							"ID": "20210707214341-jwa8lgr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-jwa8lgr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JDK 中主要的包："
								}
							]
						},
						{
							"ID": "20210707214341-3s2lldm",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-3s2lldm"
							},
							"Children": [
								{
									"ID": "20210707214341-6gbalu4",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-6gbalu4"
									},
									"Children": [
										{
											"ID": "20210707214341-fmoybsy",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-fmoybsy"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "java.lang"
												},
												{
													"Type": "NodeText",
													"Data": "----包含一些 Java 语言的核心类，如 String、Math、Integer、 System 和 Thread，提供常用功能"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-h5q4u8h",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-h5q4u8h"
									},
									"Children": [
										{
											"ID": "20210707214341-jhueb94",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-jhueb94"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "java.util"
												},
												{
													"Type": "NodeText",
													"Data": "----包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数。"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-who7fjw",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-who7fjw"
									},
									"Children": [
										{
											"ID": "20210707214341-pf0uwxw",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-pf0uwxw"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "java.io"
												},
												{
													"Type": "NodeText",
													"Data": " ----包含能提供多种输入/输出功能的类。"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-nkn9qau",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-nkn9qau"
									},
									"Children": [
										{
											"ID": "20210707214341-whpdynz",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-whpdynz"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "java.net"
												},
												{
													"Type": "NodeText",
													"Data": "----包含执行与网络相关的操作的类和接口。"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-k2lyf2j",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-k2lyf2j"
									},
									"Children": [
										{
											"ID": "20210707214341-nn2n6v1",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-nn2n6v1"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "java.text"
												},
												{
													"Type": "NodeText",
													"Data": "----包含了一些 java 格式化相关的类"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-nnsaws9",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-nnsaws9"
									},
									"Children": [
										{
											"ID": "20210707214341-vu6a6mt",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-vu6a6mt"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "java.sql"
												},
												{
													"Type": "NodeText",
													"Data": "----包含了 java 进行 JDBC 数据库编程的相关类/接口"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-x37wftt",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-x37wftt"
					},
					"Children": [
						{
							"ID": "20210707214341-bmiahk9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-bmiahk9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "生成与包名对应目录(目录中可以是绝对地址、相对地址、“.”可以表示当前目录)，运行时要加上包名"
								}
							]
						},
						{
							"ID": "20210707214341-nhyat6j",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707214341-nhyat6j"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "javac -d [目录] Hello.java\ncd 目录\njava cn.itcast.chapter01.Hello\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-jobfhyw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-jobfhyw"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "import"
				}
			]
		},
		{
			"ID": "20210707214341-jkc893s",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-jkc893s"
			},
			"Children": [
				{
					"ID": "20210707214341-uo5fljs",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-uo5fljs"
					},
					"Children": [
						{
							"ID": "20210707214341-fwa9lz2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-fwa9lz2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "为使用定义在不同包中的 Java 类，需用 import 语句来引入指定包层次下所需要的类或全部类(.*"
								},
								{
									"Type": "NodeText",
									"Data": ")。import 语句告诉编译器到哪里去寻找类。import 一般出现在 package 后，类定义之前"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-b870006",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-b870006"
					},
					"Children": [
						{
							"ID": "20210707214341-224hdcg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-224hdcg"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "注意："
								}
							]
						},
						{
							"ID": "20210707214341-x2i18ma",
							"Type": "NodeList",
							"ListData": {
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707214341-x2i18ma"
							},
							"Children": [
								{
									"ID": "20210707214341-xaohzq7",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-xaohzq7"
									},
									"Children": [
										{
											"ID": "20210707214341-wo24esj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-wo24esj"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在源文件中使用 import 显式的导入指定包下的类或接口"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-kc9bre7",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-kc9bre7"
									},
									"Children": [
										{
											"ID": "20210707214341-ft8ru6m",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-ft8ru6m"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "声明在包的声明和类的声明之间。"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-loawgtz",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-loawgtz"
									},
									"Children": [
										{
											"ID": "20210707214341-zbijipl",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-zbijipl"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果需要导入多个类或接口，那么就并列显式多个 import 语句即可"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-qrgutkq",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-qrgutkq"
									},
									"Children": [
										{
											"ID": "20210707214341-5d4ngd6",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-5d4ngd6"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果在代码中使用不同包下的同名的类。那么就需要使用类的全类名的方式指明调用的是哪个类。"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-rqfu8e2",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-rqfu8e2"
									},
									"Children": [
										{
											"ID": "20210707214341-0z9021u",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-0z9021u"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "已经导入 java.lang 包下的类。那么如果需要使用其子包下的类的话，仍然需要导入"
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-lz78usi",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707214341-lz78usi"
									},
									"Children": [
										{
											"ID": "20210707214341-5z1y275",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-5z1y275"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "静态导入"
												},
												{
													"Type": "NodeText",
													"Data": "（static import）：调用指定类或接口下的静态的"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "属性或方法"
												},
												{
													"Type": "NodeText",
													"Data": "，之后可以直接使用而"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "无需写类名"
												}
											]
										},
										{
											"ID": "20210707214341-cwmqqez",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"CodeBlockFenceChar": 96,
											"CodeBlockFenceLen": 3,
											"CodeBlockOpenFence": "YGBg",
											"CodeBlockInfo": "amF2YQ==",
											"CodeBlockCloseFence": "YGBg",
											"Properties": {
												"id": "20210707214341-cwmqqez"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "amF2YQ=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "// 如下仅为示例\nimport static com.example.demo.Tools.add;\n\npublic static void main(String[] args) {\n  int add = add(1, 2);\n}\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-wkmxmn5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-wkmxmn5"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "权限修饰符"
				}
			]
		},
		{
			"ID": "20210707214341-a750618",
			"Type": "NodeTable",
			"Data": "|   访问范围   | private | default | protected | public |\n| :----------: | :-----: | :-----: | :-------: | :----: |\n|    同一类    |    √    |    √    |     √     |   √    |\n|    同一包    |         |    √    |     √     |   √    |\n| 不同包的子类 |         |         |     √     |   √    |\n|   同一工程   |         |         |           |   √    |",
			"TableAligns": [
				2,
				2,
				2,
				2,
				2
			],
			"Properties": {
				"id": "20210707214341-a750618"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Children": [
								{
									"Type": "NodeTableCell",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "访问范围"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "private"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "default"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "protected"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "public"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						2,
						2,
						2,
						2,
						2
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "同一类"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "√"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "√"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "√"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "√"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						2,
						2,
						2,
						2,
						2
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "同一包"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "√"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "√"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "√"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						2,
						2,
						2,
						2,
						2
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不同包的子类"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "√"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "√"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						2,
						2,
						2,
						2,
						2
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "同一工程"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2
						},
						{
							"Type": "NodeTableCell",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "√"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-dcaieqn",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-dcaieqn"
			},
			"Children": [
				{
					"ID": "20210707214341-l7ol370",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-l7ol370"
					},
					"Children": [
						{
							"ID": "20210707214341-h93i9uk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-h93i9uk"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "private"
								},
								{
									"Type": "NodeText",
									"Data": "（类访问级别）：除了"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "类本身和类内部的成员"
								},
								{
									"Type": "NodeText",
									"Data": "，外界无法"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "直接访问"
								},
								{
									"Type": "NodeText",
									"Data": "该元素。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "private"
								},
								{
									"Type": "NodeText",
									"Data": " 是类和调用者之间的屏障。任何试图访问私有成员的行为都会报编译时错误；"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-ykzuuz5",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-ykzuuz5"
					},
					"Children": [
						{
							"ID": "20210707214341-wmwkoes",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-wmwkoes"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "default"
								},
								{
									"Type": "NodeText",
									"Data": "（包访问级别）："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "类或类成员"
								},
								{
									"Type": "NodeText",
									"Data": "没有修饰符为默认访问级别，该权限下的资源可以被"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "同一包（库组件）中其他类的成员访问"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-xaksrw2",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-xaksrw2"
					},
					"Children": [
						{
							"ID": "20210707214341-l29zqcz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-l29zqcz"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "protected"
								},
								{
									"Type": "NodeText",
									"Data": "（子类访问级别）：被修饰的类成员能被"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "本包中其他类"
								},
								{
									"Type": "NodeText",
									"Data": "、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "不同包中该类子类"
								},
								{
									"Type": "NodeText",
									"Data": "访问"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-168a3h0",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-168a3h0"
					},
					"Children": [
						{
							"ID": "20210707214341-26bhqmx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-26bhqmx"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "public"
								},
								{
									"Type": "NodeText",
									"Data": "（公共访问级别）："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "类或类成员"
								},
								{
									"Type": "NodeText",
									"Data": "能被所有都能访问"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-wdy283y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-wdy283y"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "::: tip"
				}
			]
		},
		{
			"ID": "20210707214341-8i47bx5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-8i47bx5"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "外部类即 class 的修饰符只能是 public 或 默认"
				},
				{
					"Type": "NodeText",
					"Data": "；"
				}
			]
		},
		{
			"ID": "20210707214341-pgumbxu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-pgumbxu"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类的成员（属性、方法、构造器、内部类）的权限修饰符可以是以上四种"
				}
			]
		},
		{
			"ID": "20210707214341-pooiwo7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-pooiwo7"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个 Java 文件中可以有多个类，但是 public 修饰的只能有一个，且类名和文件名一致！"
				}
			]
		},
		{
			"ID": "20210707214341-ht6297m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-ht6297m"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": ":::"
				}
			]
		},
		{
			"ID": "20210707214341-j78j51w",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-j78j51w"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "jar"
				}
			]
		},
		{
			"ID": "20210707214341-fe2cz1l",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-fe2cz1l"
			},
			"Children": [
				{
					"ID": "20210707214341-52adm6x",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-52adm6x"
					},
					"Children": [
						{
							"ID": "20210707214341-gqxjb1r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-gqxjb1r"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java Archive File，Java 档案文件，是一种压缩文件，独立于任何操作系统。操作步骤如下："
								}
							]
						},
						{
							"ID": "20210707214341-pne1edc",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1,
								"Start": 1,
								"Delimiter": 46,
								"Padding": 3,
								"Marker": "MQ==",
								"Num": 1
							},
							"Properties": {
								"id": "20210707214341-pne1edc"
							},
							"Children": [
								{
									"ID": "20210707214341-bnufvfz",
									"Type": "NodeListItem",
									"Data": "1",
									"ListData": {
										"Typ": 1,
										"Start": 1,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "MQ==",
										"Num": 1
									},
									"Properties": {
										"id": "20210707214341-bnufvfz"
									},
									"Children": [
										{
											"ID": "20210707214341-qxo03zc",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-qxo03zc"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "编译生成"
												},
												{
													"Type": "NodeText",
													"Data": "与包名对应目录的"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "class 文件"
												}
											]
										},
										{
											"ID": "20210707214341-5hjutka",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"CodeBlockFenceChar": 96,
											"CodeBlockFenceLen": 3,
											"CodeBlockOpenFence": "YGBg",
											"CodeBlockInfo": "YmFzaA==",
											"CodeBlockCloseFence": "YGBg",
											"Properties": {
												"id": "20210707214341-5hjutka"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YmFzaA=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "java -d . Hello.java\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-0s5o624",
									"Type": "NodeListItem",
									"Data": "2",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 2,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "Mg==",
										"Num": 2
									},
									"Properties": {
										"id": "20210707214341-0s5o624"
									},
									"Children": [
										{
											"ID": "20210707214341-ufpp45z",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-ufpp45z"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "利用"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "jar 命令"
												},
												{
													"Type": "NodeText",
													"Data": "将 cn 及其目录下的文件都"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "压缩成 jar 包"
												}
											]
										},
										{
											"ID": "20210707214341-0oxkpx1",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"CodeBlockFenceChar": 96,
											"CodeBlockFenceLen": 3,
											"CodeBlockOpenFence": "YGBg",
											"CodeBlockInfo": "YmFzaA==",
											"CodeBlockCloseFence": "YGBg",
											"Properties": {
												"id": "20210707214341-0oxkpx1"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YmFzaA=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "jar -cvf Hello.jar cn\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-tsvzs0y",
									"Type": "NodeListItem",
									"Data": "3",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 3,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "Mw==",
										"Num": 3
									},
									"Properties": {
										"id": "20210707214341-tsvzs0y"
									},
									"Children": [
										{
											"ID": "20210707214341-ym225eq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-ym225eq"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "由于目前 jar 包中没有"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "主清单属性"
												},
												{
													"Type": "NodeText",
													"Data": "，修改 jar 包"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "META-INF"
												},
												{
													"Type": "NodeText",
													"Data": "中"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "MANIFEST.MF"
												},
												{
													"Type": "NodeText",
													"Data": "文件，"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "指定 main 方法所在类"
												}
											]
										},
										{
											"ID": "20210707214341-5gyw1sd",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"CodeBlockFenceChar": 96,
											"CodeBlockFenceLen": 3,
											"CodeBlockOpenFence": "YGBg",
											"CodeBlockInfo": "YmFzaA==",
											"CodeBlockCloseFence": "YGBg",
											"Properties": {
												"id": "20210707214341-5gyw1sd"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YmFzaA=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "Main-Class: cn.itcast.chapter01.Hello\t//注意“:”后有空格\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-20m0f66",
									"Type": "NodeListItem",
									"Data": "4",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 4,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "NA==",
										"Num": 4
									},
									"Properties": {
										"id": "20210707214341-20m0f66"
									},
									"Children": [
										{
											"ID": "20210707214341-2857kuq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-2857kuq"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "运行 jar 包"
												}
											]
										},
										{
											"ID": "20210707214341-die6nxz",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"CodeBlockFenceChar": 96,
											"CodeBlockFenceLen": 3,
											"CodeBlockOpenFence": "YGBg",
											"CodeBlockInfo": "YmFzaA==",
											"CodeBlockCloseFence": "YGBg",
											"Properties": {
												"id": "20210707214341-die6nxz"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YmFzaA=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "java -jar Hello.jar\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												}
											]
										}
									]
								},
								{
									"ID": "20210707214341-a43cr0m",
									"Type": "NodeListItem",
									"Data": "5",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 5,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "NQ==",
										"Num": 5
									},
									"Properties": {
										"id": "20210707214341-a43cr0m"
									},
									"Children": [
										{
											"ID": "20210707214341-bsoebh0",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707214341-bsoebh0"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "解压 jar 包"
												}
											]
										},
										{
											"ID": "20210707214341-nn1wsvi",
											"Type": "NodeCodeBlock",
											"IsFencedCodeBlock": true,
											"CodeBlockFenceChar": 96,
											"CodeBlockFenceLen": 3,
											"CodeBlockOpenFence": "YGBg",
											"CodeBlockInfo": "YmFzaA==",
											"CodeBlockCloseFence": "YGBg",
											"Properties": {
												"id": "20210707214341-nn1wsvi"
											},
											"Children": [
												{
													"Type": "NodeCodeBlockFenceOpenMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												},
												{
													"Type": "NodeCodeBlockFenceInfoMarker",
													"CodeBlockInfo": "YmFzaA=="
												},
												{
													"Type": "NodeCodeBlockCode",
													"Data": "jar -xvf Hello.jar\n"
												},
												{
													"Type": "NodeCodeBlockFenceCloseMarker",
													"Data": "```",
													"CodeBlockFenceLen": 3
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-s6p6xwo",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707214341-s6p6xwo"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "习题"
				}
			]
		},
		{
			"ID": "20210707214341-3zehyzl",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-3zehyzl"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "值传递习题 1"
				}
			]
		},
		{
			"ID": "20210707214341-7zrclfn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-7zrclfn"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class TransferTest {\n  public static void main(String args[]) {\n    TransferTest test = new TransferTest();\n    test.first();\n  }\n  public void first() {\n    int i = 5;\n    Value v = new Value();\n    v.i = 25;\n    second(v, i);\n    System.out.println(v.i);// 20\n  }\n  public void second(Value v, int i) {\n    i = 0;\n    v.i = 20;\n    Value val = new Value();\n    v = val;\n    System.out.println(v.i + \" \" + i);// 15,0\n  }\n}\n\nclass Value {\n  int i = 15;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-3p830jp",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-3p830jp"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "非值传递习题"
				}
			]
		},
		{
			"ID": "20210707214341-usd0w1p",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-usd0w1p"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Test {\n  public static void main(String[] args){\n    int a = 10;\n    int b = 10;\n    method(a,b);// 需要在method方法被调用后，仅打印出a=100，b=200，完成method的编码\n    System.out.println(\"a=\" + a);\n    System.out.println(\"b=\" + b);\n  }\n\n  // 方法编写处\n  // 方法1。直接输出并exit\n  public static void method(int a,int b){\n    System.out.println(\"a=\" + a*10);\n    System.out.println(\"b=\" + b*20);\n    System.exit(0);\n  }\n\n  // 方法2，重写打印流\n  private static void method(int a, int b) {\n    PrintStream printStream = new PrintStream(System.out){\n      @Override\n      public void println(String s) {\n        if (\"a=10\".equals(s)){\n          s = \"a=100\";\n        } else if (\"b=10\".equals(s)){\n          s = \"b=200\";\n        }\n        super.println(s);\n      }\n    };\n    System.setOut(printStream);\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-wj2ebr1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-wj2ebr1"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "递归简单练习"
				}
			]
		},
		{
			"ID": "20210707214341-ajxht1t",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-ajxht1t"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public int sum(int num){\n  if(num == 1){\n    return 1;\n  }\n  else{\n    return num + sum(num - 1);\n  }\n}\n\n// 计算1-n之间所有自然数的乘积:n!\npublic int getSum1(int n) {\n\n\t\tif (n == 1) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn n * getSum1(n - 1);\n\t\t}\n\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-ym8n4bw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-ym8n4bw"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 已知有一个数列:f(0) = 1,f(1) = 4, f(n+2)=2*f(n+1) + f(n),其中n是大于0的整数，求f(10)的值。\npublic int f(int n){\n  if(n == 0){\n    return 1;\n  }else if(n == 1){\n    return 4;\n  }else{\n    return 2*f(n - 1) + f(n - 2);\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-ypp2h9w",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-ypp2h9w"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 已知一个数列:f(20) = 1,f(21) = 4,f(n+2) = 2*f(n+1)+f(n),其中n是大于0的整数，求f(10)的值。\npublic static int m1(int num){\n  if (num==21){\n    return 4;\n  } else if (num == 20){\n    return 1;\n  } else {\n    return m1(num+2)-2*m1(num+1);\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-z0fvnju",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-z0fvnju"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "递归练习"
				}
			]
		},
		{
			"ID": "20210707214341-p6a8y2o",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-p6a8y2o"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 递归调用的次数？若k为10，则？\nprivate static int count = 0;\n\npublic static int recursion(int k) {\n  count++;\n  System.out.println(\"count:\"+count+\" k:\"+k);\n  if (k\u003c=0){\n    return 0;\n  }\n  return recursion(k-1) + recursion(k-2);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-72nvvof",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-72nvvof"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "斐波那契数列"
				}
			]
		},
		{
			"ID": "20210707214341-gc32v1k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-gc32v1k"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 输入一个数据n，计算斐波那契数列(Fibonacci)的第n个值 1 1 2 3 5 8 13 21 34 55\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-zlgj0ar",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-zlgj0ar"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "汉诺塔"
				}
			]
		},
		{
			"ID": "20210707214341-ywsa4ie",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-ywsa4ie"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "递归"
				}
			]
		},
		{
			"ID": "20210707214341-0uexsay",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-0uexsay"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "快排"
				}
			]
		},
		{
			"ID": "20210707214341-aixxwln",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707214341-aixxwln"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "递归"
				}
			]
		},
		{
			"ID": "20210707214341-l613tdn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-l613tdn"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "多态练习 1"
				}
			]
		},
		{
			"ID": "20210707214341-xj9hjfs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-xj9hjfs"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class FieldMethodTest {\n  public static void main(String[] args) {\n    Sub s = new Sub();\n    System.out.println(s.count);//20\n    s.display();//20\n\n    Base b = s;//多态性\n    System.out.println(b == s);//true\n    System.out.println(b.count);//10\n    b.display();//20\n  }\n}\n\nclass Base {\n  int count = 10;\n\n  public void display() {\n    System.out.println(this.count);\n  }\n}\n\nclass Sub extends Base {\n  int count = 20;\n\n  public void display() {\n    System.out.println(this.count);\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-oi3xudh",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-oi3xudh"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "多态练习—可变参数重写"
				}
			]
		},
		{
			"ID": "20210707214341-1x18s4y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-1x18s4y"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class InterviewTest1 {\n\n  public static void main(String[] args) {\n    Base1 base = new Sub1();\n    base.add(1, 2, 3);// 此处父类引用调用方法，此方法被重写了，所以结果为sub_1\n\n    Sub1 s = (Sub1) base;\n    s.add(1, 2, 3);// 此处子类引用调用方法，直接调用确定的方法，所以结果为sub_2\n  }\n}\n\nclass Base1 {\n  public void add(int a, int... arr) {\n    System.out.println(\"base1\");\n  }\n}\n\nclass Sub1 extends Base1 {\n\n  // @Override //就是重写了\n  public void add(int a, int[] arr) {\n    System.out.println(\"sub_1\");\n  }\n\n  // 不是这个方法重写父类！！！\n  public void add(int a, int b, int c) {\n    System.out.println(\"sub_2\");\n  }\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-0krrxn8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-0krrxn8"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "如何证明多态是运行时绑定的？"
				}
			]
		},
		{
			"ID": "20210707214341-7ugrehf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-7ugrehf"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Animal  {\n  protected void eat() {\n    System.out.println(\"animal eat food\");\n  }\n}\n\nclass Cat  extends Animal  {\n  protected void eat() {\n    System.out.println(\"cat eat fish\");\n  }\n}\n\nclass Dog  extends Animal  {\n  public void eat() {\n    System.out.println(\"Dog eat bone\");\n  }\n}\n\nclass Sheep  extends Animal  {\n  public void eat() {\n    System.out.println(\"Sheep eat grass\");\n  }\n}\n\npublic class InterviewTest {\n\n  public static Animal  getInstance(int key) {\n    switch (key) {\n      case 0:\n        return new Cat ();\n      case 1:\n        return new Dog ();\n      default:\n        return new Sheep ();\n    }\n  }\n\n  public static void main(String[] args) {\n    int key = new Random().nextInt(3);\n    System.out.println(key);\n    Animal  animal = getInstance(key);\n    animal.eat();\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-s6iqi3p",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-s6iqi3p"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "接口、抽象类问题 1"
				}
			]
		},
		{
			"ID": "20210707214341-hw80fm9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-hw80fm9"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "interface A {\n    int x = 0;\n}\nclass B {\n    int x = 1;\n}\nclass C extends B implements A {\n    public void pX() {\n        // 编译不通过，因为x不明确。可以写super.x 和 A.x来调用类中和接口中的x\n        System.out.println(x);\n        //\n    }\n    public static void main(String[] args) {\n        new C().pX();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-zo9b8i7",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-zo9b8i7"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "接口、抽象类问题 2"
				}
			]
		},
		{
			"ID": "20210707214341-djwr8q6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707214341-djwr8q6"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "interface Playable {\n    void play();\n}\ninterface Bounceable {\n    void play();\n}\ninterface Rollable extends Playable,Bounceable {\n    Ball ball = new Ball(\"PingPang\");\n}\n\nclass Ball implements Rollable {\n    private String name;\n    public String getName() {\n        return name;\n    }\n    public Ball(String name) {\n        this.name = name;\n    }\n    public void play() {\n        // 接口中已定义了该常量，且默认为public static final，此处重新赋值则编译报错\n        ball = new Ball(\"Football\");\n        System.out.println(ball.getName());\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707214341-000y4eb",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-000y4eb"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "接口和抽象类的对比"
				}
			]
		},
		{
			"ID": "20210707214341-7be4bkd",
			"Type": "NodeTable",
			"Data": "| No. | 区别点       | 抽象类                                                             | 接口                                        |\n| --- | ------------ | ------------------------------------------------------------------ | ------------------------------------------- |\n| 1   | 定义         | 包含抽象方法的类                                                   | 主要是抽象方法和全局常量的集合 `            |\n| 2   | 组成         | 构造方法、抽象方法、普通方法、 常量、变量                          | 常量、抽象方法、(jdk8.0:默认方法、静态方法) |\n| 3   | 使用         | 子类继承抽象类(extends)                                            | 子类实现接口(implements)                    |\n| 4   | 关系         | 抽象类可以实现多个接口                                             | 接口不能继承抽象类，但允许继承多个接口      |\n| 5   | 常见设计模式 | 模板方法                                                           | 简单工厂、工厂方法、代理模式                |\n| 6   | 对象         | 都通过对象的多态性产生实例化对象                                   |                                             |\n| 7   | 局限         | 抽象类有单继承的局限                                               | 接口没有此局限                              |\n| 8   | 实际         | 作为一个模板                                                       | 是作为一个标准或是表示一种能力              |\n| 9   | 选择         | 如果抽象类和接口都可以使用的话，优先使用接口，因为避免单继承的局限 |                                             |",
			"TableAligns": [
				0,
				0,
				0,
				0
			],
			"Properties": {
				"id": "20210707214341-7be4bkd"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "No."
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "区别点"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "抽象类"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "接口"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "定义"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "包含抽象方法的类"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "主要是抽象方法和全局常量的集合 `"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "组成"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造方法、抽象方法、普通方法、 常量、变量"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "常量、抽象方法、(jdk8.0:默认方法、静态方法)"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "3"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "子类继承抽象类(extends)"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "子类实现接口(implements)"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "4"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "关系"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "抽象类可以实现多个接口"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "接口不能继承抽象类，但允许继承多个接口"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "5"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "常见设计模式"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "模板方法"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "简单工厂、工厂方法、代理模式"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "6"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对象"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "都通过对象的多态性产生实例化对象"
								}
							]
						},
						{
							"Type": "NodeTableCell"
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "7"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "局限"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "抽象类有单继承的局限"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "接口没有此局限"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "8"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "实际"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "作为一个模板"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "是作为一个标准或是表示一种能力"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "9"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "选择"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果抽象类和接口都可以使用的话，优先使用接口，因为避免单继承的局限"
								}
							]
						},
						{
							"Type": "NodeTableCell"
						}
					]
				}
			]
		},
		{
			"ID": "20210707214341-blkudw2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707214341-blkudw2"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "定义一个类的时候，权限修饰符规则"
				}
			]
		},
		{
			"ID": "20210707214341-vcmgu2f",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707214341-vcmgu2f"
			},
			"Children": [
				{
					"ID": "20210707214341-hqopg78",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-hqopg78"
					},
					"Children": [
						{
							"ID": "20210707214341-yxwxpqc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-yxwxpqc"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "外部类：public / (default)"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-778rgad",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-778rgad"
					},
					"Children": [
						{
							"ID": "20210707214341-pdezrbx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-pdezrbx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "成员内部类：public / protected / (default) / private"
								}
							]
						}
					]
				},
				{
					"ID": "20210707214341-otvk7sk",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707214341-otvk7sk"
					},
					"Children": [
						{
							"ID": "20210707214341-k7r4gm5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707214341-k7r4gm5"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "局部内部类"
								},
								{
									"Type": "NodeText",
									"Data": "：什么都不能写"
								}
							]
						},
						{
							"ID": "20210707214341-tbqhre2",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707214341-tbqhre2"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class Demo {\n    public static void main(String[] args) {\n        new Demo(){ //匿名对象，匿名内部类\n            void show(){\n                System.out.println(\"hello\");\n            }\n        }.show();//hello\n        //若是给对象起名，并用该名调用show方法，则编译不通过，因为父类中没有此方法，当前所属方法才能使用它\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				}
			]
		}
	]
}