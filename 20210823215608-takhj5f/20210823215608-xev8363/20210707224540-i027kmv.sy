{
	"ID": "20210707224540-i027kmv",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20210707224540-i027kmv",
		"title": "9001.并发设计模式",
		"type": "doc"
	},
	"Children": [
		{
			"ID": "20210707224540-kuw37zw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224540-kuw37zw"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "两阶段终止—Two Phase Termination"
				}
			]
		},
		{
			"ID": "20210707224540-1lgfz4k",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-1lgfz4k"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "用处"
				}
			]
		},
		{
			"ID": "20210707224540-9070ayy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-9070ayy"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在一个线程 T1 中如何“优雅”终止线程 T2？这里的【优雅】指的是给 T2 一个料理后事的机会。"
				}
			]
		},
		{
			"ID": "20210707224540-b1tkuqa",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-b1tkuqa"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "错误思路"
				}
			]
		},
		{
			"ID": "20210707224540-vxoxl6y",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-vxoxl6y"
			},
			"Children": [
				{
					"ID": "20210707224540-ol6v4wm",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-ol6v4wm"
					},
					"Children": [
						{
							"ID": "20210707224540-nnsihcn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-nnsihcn"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用线程对象的 stop() 方法停止线程"
								}
							]
						},
						{
							"ID": "20210707224540-tilqj5l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-tilqj5l"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "stop 方法会真正杀死线程，如果这时线程"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "锁"
								},
								{
									"Type": "NodeText",
									"Data": "住了共享资源，那么当它被杀死后就再也没有机会释放锁，其它线程将永远无法获取锁"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-d5zpcyn",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-d5zpcyn"
					},
					"Children": [
						{
							"ID": "20210707224540-nfbnz13",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-nfbnz13"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用 System.exit(int) 方法停止线程"
								}
							]
						},
						{
							"ID": "20210707224540-0p6vquq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-0p6vquq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "目的仅是停止一个线程，但这种做法会让整个程序都停止"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-2pss387",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-2pss387"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "两阶段终止模式"
				}
			]
		},
		{
			"ID": "20210707224540-7hrltz9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "bWVybWFpZA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-7hrltz9"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bWVybWFpZA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "graph TD\nw(\"while(true)\") --\u003e a\na(有没有被打断?) -- 是 --\u003e b(料理后事)\nb --\u003e c((结束循环))\na -- 否 --\u003e d(\"睡眠2s(sleep、join、wait中被打断的会抛异常)\")\nd -- 无异常 --\u003e e(设置监控记录)\nd -- 有异常 --\u003e i(重新设置打断标记)\ni --\u003e w\ne --\u003e w\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-p4qvopq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-p4qvopq"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "interrupt 实现 🔥"
				}
			]
		},
		{
			"ID": "20210707224540-w8hf03u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-w8hf03u"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Slf4j(topic = \"TwoPhaseTermination\")\npublic class TwoPhaseTermination {\n\n\n    /* 监控线程 */\n    private Thread monitor;\n\n    /**\n     * 启动监控线程\n     */\n    public void start(){\n        monitor = new Thread(()-\u003e{\n            Thread currentThread = Thread.currentThread();\n            while (true){\n                boolean flag = currentThread.isInterrupted();\n                if (flag){\n                    log.debug(\"料理后事，优雅停机\");\n                    break;\n                }\n\n                try {\n                    // 1 正常情况，被打断无需额外处理\n                    log.debug(\"执行监控记录\");\n                    // 2 非正常情况，在 sleep、join、wait 中被中断\n                    // 每1秒执行一次，释放CPU，所以sleep\n                    TimeUnit.SECONDS.sleep(1);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                    // 由于 catch InterruptedException 后会清除中断标志，所以需要重设中断标志\n                    currentThread.interrupt();\n                }\n\n            }\n        });\n\n        monitor.start();\n    }\n\n    /**\n     * 优雅停止监控线程\n     */\n    public void stop(){\n        monitor.interrupt();\n    }\n\n\n    public static void main(String[] args) throws InterruptedException {\n        TwoPhaseTermination tpt = new TwoPhaseTermination();\n        tpt.start();\n        TimeUnit.SECONDS.sleep(3);\n        tpt.stop();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-tziiz5e",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-tziiz5e"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "volitile 实现 🔥"
				}
			]
		},
		{
			"ID": "20210707224540-7ui77kp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-7ui77kp"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-xb4indk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224540-xb4indk"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "同步模式—保护（监控）性暂停—Guarded Suspension"
				}
			]
		},
		{
			"ID": "20210707224540-6hm7gid",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-6hm7gid"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "定义"
				}
			]
		},
		{
			"ID": "20210707224540-egun77i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-egun77i"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "即 Guarded（监控） Suspension（暂停），用在一个线程等待另一个线程的执行结果"
				}
			]
		},
		{
			"ID": "20210707224540-jtqnobr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-jtqnobr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要点："
				}
			]
		},
		{
			"ID": "20210707224540-ytawnqa",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-ytawnqa"
			},
			"Children": [
				{
					"ID": "20210707224540-riky1kv",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-riky1kv"
					},
					"Children": [
						{
							"ID": "20210707224540-2syyxq5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-2syyxq5"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "有一个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "结果需要从一个线程传递到另一个线程"
								},
								{
									"Type": "NodeText",
									"Data": "，让他们关联同一个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Guarded（监控）"
								},
								{
									"Type": "NodeText",
									"Data": " Object"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-1z64exy",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-1z64exy"
					},
					"Children": [
						{
							"ID": "20210707224540-uma1kc1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-uma1kc1"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果有结果"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "不断"
								},
								{
									"Type": "NodeText",
									"Data": "从一个线程到另一个线程那么可以使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "消息队列（见生产者/消费者）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-wt3y34n",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-wt3y34n"
					},
					"Children": [
						{
							"ID": "20210707224540-qxyaexc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-qxyaexc"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JDK 中，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "join 的实现、Future 的实现，采用的就是此模式"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-wwd3xej",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-wwd3xej"
					},
					"Children": [
						{
							"ID": "20210707224540-0o8fh74",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-0o8fh74"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "因为要"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "等待"
								},
								{
									"Type": "NodeText",
									"Data": "另一方的结果，因此归类到"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "同步模式"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-1sfuquo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-1sfuquo"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "对比 join 实现好处"
				}
			]
		},
		{
			"ID": "20210707224540-stj5j8i",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-stj5j8i"
			},
			"Children": [
				{
					"ID": "20210707224540-44krcen",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-44krcen"
					},
					"Children": [
						{
							"ID": "20210707224540-uslvgo4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-uslvgo4"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "下载线程执行完毕后还可以做其他事，因为已经有 notifyAll 通知了"
								},
								{
									"Type": "NodeText",
									"Data": "；而"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "join 则必须等待线程执行完毕"
								},
								{
									"Type": "NodeText",
									"Data": "！"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-vaxbuik",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "bWVybWFpZA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-vaxbuik"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "bWVybWFpZA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "graph TD\n\tsubgraph \"Guarded Object\"\n    go[response]\n    end\n    t1 --wait response 有值--\u003e go\n    t2 --\"任务完成，为response赋值，通知t1\"--\u003e go\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-93xbls8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-93xbls8"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "实现—简单 🔥"
				}
			]
		},
		{
			"ID": "20210707224540-rck43hd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-rck43hd"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Slf4j(topic = \"GuardedObject\")\npublic class GuardedObject {\n\n    // 结果\n    private Object response;\n\n    /**\n     * 获取结果\n     *\n     * @return response\n     */\n    public Object get() {\n        synchronized (this) {\n            while (response == null) {\n                try {\n                    this.wait();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n            return response;\n        }\n    }\n\n    /**\n     * 产生结果\n     *\n     * @param response response\n     */\n    public void complete(Object response) {\n        synchronized (this) {\n            // 给结果成员变量赋值，并唤醒等待线程\n            this.response = response;\n            this.notifyAll();\n        }\n    }\n\n\n    public static void main(String[] args) {\n        test1();\n    }\n\n    private static void test1(){\n        // // 模拟线程1等待线程2下载结果\n        GuardedObject guardedObject = new GuardedObject();\n\n        new Thread(() -\u003e {\n            // 子线程下载\n            try {\n                List\u003cString\u003e download = Downloader.download();\n                log.debug(\"download complete...\");\n                guardedObject.complete(download);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }, \"download-thread\").start();\n\n        log.debug(\"waiting...\");\n        // 主线程阻塞等待\n        Object response = guardedObject.get();\n        log.debug(\"get response: [{}] lines\", ((List\u003cString\u003e) response).size());\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-u1ctjgt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-u1ctjgt"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下载工具类："
				}
			]
		},
		{
			"ID": "20210707224540-er90th0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-er90th0"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Downloader {\n\n    public static List\u003cString\u003e download() throws IOException {\n        URL url = new URL(\"https://www.qq.com/\");\n        URLConnection conn = url.openConnection();\n\n        ArrayList\u003cString\u003e lines = new ArrayList\u003c\u003e();\n        try (\n                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))\n        ) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                lines.add(line);\n            }\n        }\n        return lines;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-4g4kaek",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-4g4kaek"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "执行结果："
				}
			]
		},
		{
			"ID": "20210707224540-3j0swn2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-3j0swn2"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "17:03:36.977 [main] DEBUG GuardedObject - waiting...\n17:03:37.473 [download-thread] DEBUG GuardedObject - download complete...\n17:03:37.473 [main] DEBUG GuardedObject - get response: [1805] lines\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-07m2xg9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-07m2xg9"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "实现—超时 🔥"
				}
			]
		},
		{
			"ID": "20210707224540-fxkzjit",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-fxkzjit"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Slf4j(topic = \"GuardedObject\")\npublic class GuardedObject {\n\n    // 结果\n    private Object response;\n\n    /**\n     * 获取结果\n     *\n     * @param timeout 等待毫秒\n     * @return response\n     */\n    public Object get(long timeout) {\n        synchronized (this) {\n            // 开始时间\n            long beginTime = System.currentTimeMillis();\n            // 经历时间\n            long passTime = 0;\n            while (response == null) {\n                // 这一轮循环实际还需要等待的时间\n                long waitTime = timeout - passTime;\n                // 经历时间超过了设置的等待最大时间，则退出循环。优化为还需等待的时间是否小于等于0\n                if (waitTime \u003c= 0) {\n                    break;\n                }\n                try {\n                    // 这里只是等待timeout时间，等待完后又执行循环，需处理\n                    // 并且若是虚假提前唤醒，则此时应该再等的时长应该少于timeout！！！用timeout减去已经cost的时长\n                    this.wait(waitTime);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                passTime = System.currentTimeMillis() - beginTime;// 计算经历时间\n            }\n            return response;\n        }\n    }\n\n    /**\n     * 产生结果\n     *\n     * @param response response\n     */\n    public void complete(Object response) {\n        synchronized (this) {\n            // 给结果成员变量赋值，并唤醒等待线程\n            this.response = response;\n            this.notifyAll();\n        }\n    }\n\n\n    public static void main(String[] args) {\n        test2();\n    }\n\n    private static void test2(){\n        // // 模拟线程1等待线程2下载结果\n        GuardedObject guardedObject = new GuardedObject();\n\n        new Thread(() -\u003e {\n            // 子线程下载\n            try {\n                TimeUnit.SECONDS.sleep(5);// 模拟下载时间过长，超时了\n                List\u003cString\u003e download = Downloader.download();\n                log.debug(\"download complete...\");\n                guardedObject.complete(download);// 这里如果传值为null，且不处理waitTime，则会多等一会\n            } catch (IOException | InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"download-thread\").start();\n\n        log.debug(\"waiting...\");\n        // 主线程阻塞等待\n        Object response = guardedObject.get(2000);\n        log.debug(\"get response: {}\", response);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-xoa0mwl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-xoa0mwl"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "执行结果："
				}
			]
		},
		{
			"ID": "20210707224540-enfeeum",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-enfeeum"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "17:46:32.233 [main] DEBUG GuardedObject - waiting...\n17:46:34.237 [main] DEBUG GuardedObject - get response: null\n17:46:37.608 [download-thread] DEBUG GuardedObject - download complete...\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-rwddsy7",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-rwddsy7"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "实现—多任务版（实例不太恰当） 🔥"
				}
			]
		},
		{
			"ID": "20210707224540-66ov9l8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-66ov9l8"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "还是一对一关系，不是生产者消费者的多对多"
				}
			]
		},
		{
			"ID": "20210707224540-bztkszm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-bztkszm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "图中 Futures 就好比居民楼一层的信箱（每个信箱有房间编号），左侧的 t0，t2，t4 就好比等待邮件的居民，右侧的 t1，t3，t5 就好比邮递员。"
				}
			]
		},
		{
			"ID": "20210707224540-0v1nsxw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-0v1nsxw"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果需要在多个类之间使用 GuardedObject 对象，作为参数传递不是很方便，因此设计一个用来解耦的中间类，这样不仅能够解耦【结果等待者】和【结果生产者】，还能够同时支持多个任务的管理。"
				}
			]
		},
		{
			"ID": "20210707224540-gr2cfqc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-gr2cfqc"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "image-20210221213713212"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "../assets/image-20210221213713212.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-p4xa1y0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-p4xa1y0"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如下用邮箱的例子不是特别恰当，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "因为实际中不是一对一"
				},
				{
					"Type": "NodeText",
					"Data": "，应该邮递员少，并且用户实际是在不断等待信件的"
				}
			]
		},
		{
			"ID": "20210707224540-hjau7ki",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-hjau7ki"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Slf4j(topic = \"GuardedObject\")\npublic class GuardedObject {\n\n    // 标识 guarded object\n    private int id;\n\n    // 结果\n    private Object response;\n\n    public GuardedObject() { }\n\n    public GuardedObject(int id) {\n        this.id = id;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    /**\n     * 获取结果\n     *\n     * @return response\n     */\n    public Object get() {\n        synchronized (this) {\n            while (response == null) {\n                try {\n                    this.wait();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n            return response;\n        }\n    }\n\n    /**\n     * 获取结果\n     *\n     * @param timeout 等待毫秒\n     * @return response\n     */\n    public Object get(long timeout) {\n        synchronized (this) {\n            // 开始时间\n            long beginTime = System.currentTimeMillis();\n            // 经历时间\n            long passTime = 0;\n            while (response == null) {\n                // 这一轮循环实际还需要等待的时间\n                long waitTime = timeout - passTime;\n                // 经历时间超过了设置的等待最大时间，则退出循环。优化为还需等待的时间是否小于等于0\n                if (waitTime \u003c= 0) {\n                    break;\n                }\n                try {\n                    // 这里只是等待timeout时间，等待完后又执行循环，需处理\n                    // 并且若是虚假提前唤醒，则此时应该再等的时长应该少于timeout！！！用timeout减去已经cost的时长\n                    this.wait(waitTime);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                passTime = System.currentTimeMillis() - beginTime;// 计算经历时间\n            }\n            return response;\n        }\n    }\n\n    /**\n     * 产生结果\n     *\n     * @param response response\n     */\n    public void complete(Object response) {\n        synchronized (this) {\n            // 给结果成员变量赋值，并唤醒等待线程\n            this.response = response;\n            this.notifyAll();\n        }\n    }\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-fqaft7q",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-fqaft7q"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Mailboxes {\n\n    // 初始化邮箱（多少户订阅，第一个订阅的id为1，类推）\n    public Mailboxes(int capacity) {\n        this.createGuardedObjects(capacity);\n    }\n\n    // 产生唯一id（在这里防止Person、Postman创建重复）\n    private static int i = 1;\n    private static synchronized int generateId(){\n        return i++;\n    }\n\n\n    // 对 GuardedObject 的创建、删除\n    private static Map\u003cInteger, GuardedObject\u003e boxes = new Hashtable\u003c\u003e();\n\n\n    /**\n     * 初始化总订阅\n     */\n    private void createGuardedObjects(int capacity){\n        for (int i1 = 0; i1 \u003c capacity; i1++) {\n            GuardedObject guardedObject = new GuardedObject(generateId());\n            boxes.put(guardedObject.getId(), guardedObject);\n        }\n    }\n\n    public static GuardedObject getGuardedObject(int id){\n        // 递送完就销毁，但是不能调用 remove，会有 ConcurrentModificationException\n        return boxes.get(id);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-ynnhwpo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-ynnhwpo"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Slf4j(topic = \"TestMailboxes\")\npublic class TestMailboxes {\n\n    public static void main(String[] args) throws InterruptedException {\n\n        // 邮局\n\n        // 5户人家需要订阅邮箱\n        final int CAPACITY = 5;\n        new Mailboxes(CAPACITY);\n\n        // 5户人家需要收信\n        for (int i = 1; i \u003c= CAPACITY; i++) {\n            // 给用户分配id，并让他们等着收信就完事了\n            new Person(i).start();\n        }\n\n        TimeUnit.SECONDS.sleep(1);\n\n        // 生产信，派送（目前是邮递员和用户一一对应）\n        for (int i = 1; i \u003c= CAPACITY; i++) {\n            new Postman(i, \"内容\" + i).start();\n        }\n    }\n}\n\n@Slf4j(topic = \"Person\")\nclass Person extends Thread {\n\n    // 分配的 guardedObject id\n    private final int guardedObjectId;\n\n    public Person(int guardedObjectId) {\n        this.guardedObjectId = guardedObjectId;\n    }\n\n    @Override\n    public void run() {\n        // 收信。收信人有门口邮箱号\n        log.debug(\"等待信件 id:{}\", guardedObjectId);\n        GuardedObject guardedObject = Mailboxes.getGuardedObject(guardedObjectId);\n\n        // 不断等着收信就完事了\n        Object mail = guardedObject.get(5000);\n        log.debug(\"收到信 id:{}, 内容:{}\", guardedObjectId, mail);\n    }\n}\n\n\n/**\n * 邮局调用邮递员来派送邮件\n */\n@Slf4j(topic = \"Postman\")\nclass Postman extends Thread {\n\n    // 信件上面都有目的地（这里用 guardedObject 的 id 表示）、信件内容\n    private int id;\n    private String mail;\n\n    public Postman(int id, String mail) {\n        this.id = id;\n        this.mail = mail;\n    }\n\n    @Override\n    public void run() {\n        GuardedObject guardedObject = Mailboxes.getGuardedObject(id);\n        log.debug(\"送信 id:{}, 内容:{}\", id, mail);\n        guardedObject.complete(mail);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-359x6zk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-359x6zk"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结果如下："
				}
			]
		},
		{
			"ID": "20210707224540-dvt1tbd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-dvt1tbd"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "23:14:37.927 [Thread-3] DEBUG Person - 等待信件 id:4\n23:14:37.927 [Thread-0] DEBUG Person - 等待信件 id:1\n23:14:37.927 [Thread-1] DEBUG Person - 等待信件 id:2\n23:14:37.927 [Thread-4] DEBUG Person - 等待信件 id:5\n23:14:37.927 [Thread-2] DEBUG Person - 等待信件 id:3\n23:14:38.929 [Thread-6] DEBUG Postman - 送信 id:2, 内容:内容2\n23:14:38.929 [Thread-5] DEBUG Postman - 送信 id:1, 内容:内容1\n23:14:38.929 [Thread-7] DEBUG Postman - 送信 id:3, 内容:内容3\n23:14:38.929 [Thread-0] DEBUG Person - 收到信 id:1, 内容:内容1\n23:14:38.929 [Thread-1] DEBUG Person - 收到信 id:2, 内容:内容2\n23:14:38.929 [Thread-2] DEBUG Person - 收到信 id:3, 内容:内容3\n23:14:38.929 [Thread-8] DEBUG Postman - 送信 id:4, 内容:内容4\n23:14:38.929 [Thread-9] DEBUG Postman - 送信 id:5, 内容:内容5\n23:14:38.929 [Thread-3] DEBUG Person - 收到信 id:4, 内容:内容4\n23:14:38.930 [Thread-4] DEBUG Person - 收到信 id:5, 内容:内容5\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-937bjp6",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707224540-937bjp6"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "异步模式—生产者消费者 🔥"
				}
			]
		},
		{
			"ID": "20210707224540-5mb0egd",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-5mb0egd"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "定义"
				}
			]
		},
		{
			"ID": "20210707224540-5ga62dl",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707224540-5ga62dl"
			},
			"Children": [
				{
					"ID": "20210707224540-5uvpkjd",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-5uvpkjd"
					},
					"Children": [
						{
							"ID": "20210707224540-mco38i4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-mco38i4"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "与前面的保护性暂停中的 GuardObject 不同，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "不需要产生结果和消费结果的线程一一对应"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-yc23w3c",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-yc23w3c"
					},
					"Children": [
						{
							"ID": "20210707224540-v8hgdy0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-v8hgdy0"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "消费队列可以用来"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "平衡生产和消费的线程资源"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-vm3n357",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-vm3n357"
					},
					"Children": [
						{
							"ID": "20210707224540-cv8llgo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-cv8llgo"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "生产者仅负责产生结果数据，不关心数据该如何处理，而消费者专心处理结果数据"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-xb6oh64",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-xb6oh64"
					},
					"Children": [
						{
							"ID": "20210707224540-z9v1y8f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-z9v1y8f"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "消息队列是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "有容量限制"
								},
								{
									"Type": "NodeText",
									"Data": "的，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "满时不会再加入数据，空时不会再消耗数据"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-f1mv1ms",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707224540-f1mv1ms"
					},
					"Children": [
						{
							"ID": "20210707224540-s6lgk6k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-s6lgk6k"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JDK 中各种"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "阻塞队列"
								},
								{
									"Type": "NodeText",
									"Data": "，采用的就是这种模式"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-89yf3k8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-89yf3k8"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "image-20210221232338159"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "../assets/image-20210221232338159.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-urlrwqc",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-urlrwqc"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "实现—消息队列—sync 版 🔥"
				}
			]
		},
		{
			"ID": "20210707224540-49ueipq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-49ueipq"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 消息队列，不同于MQ。本类是线程间的，MQ是进程间的\n */\n@Slf4j(topic = \"MessageQueue\")\npublic class MessageQueue {\n\n    // 消息队列容器\n    private final LinkedList\u003cMessage\u003e messages = new LinkedList\u003c\u003e();\n\n    // 消息队列容量\n    private int capacity;\n\n    public MessageQueue(int capacity) {\n        this.capacity = capacity;\n    }\n\n    /**\n     * 生产存入消息\n     */\n    public void put(Message message){\n        // 不断生产消息\n        while (true) {\n            synchronized (messages) {\n                // 检查队列是否满了\n                while (messages.size() == capacity) {\n                    try {\n                        log.debug(\"队列已满，生产者线程等待\");\n                        messages.wait();\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n                messages.addLast(message);\n                log.debug(\"已生产消息, {},\", message);\n                messages.notifyAll();// 有消息了，唤醒等待的消费线程\n            }\n\n            try {\n                // 生产完一个休息一下\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n\n    /**\n     * 消费消息\n     *\n     * @return\n     */\n    public Message take() {\n\n        synchronized (messages) {\n            // 检查队列是否为空\n            while (messages.isEmpty()) {\n                try {\n                    log.debug(\"队列为空，消费者线程等待\");\n                    messages.wait();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n            Message message = messages.removeFirst();\n            log.debug(\"已消费消息, {},\", message);\n            messages.notifyAll();// 已经被消费了，唤醒等待的生产者线程\n            return message;\n        }\n    }\n\n}\n\n\nclass Message {\n    // 目前id没啥意义\n    private int id;\n\n    private Object value;\n\n    public Message(int id, Object value) {\n        this.id = id;\n        this.value = value;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public Object getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return \"Message{\" +\n                \"id=\" + id +\n                \", value=\" + value +\n                '}';\n    }\n}\n\n\nclass TestMessageQueue {\n    public static void main(String[] args) {\n\n\n        MessageQueue messageQueue = new MessageQueue(5);\n\n        for (int i = 0; i \u003c 2; i++) {\n            int finalI = i;\n            new Thread(() -\u003e {\n                messageQueue.put(new Message(finalI, \"值\" + finalI));\n            }, \"生产者\" + i).start();\n        }\n\n        // 一天就5个人来消费\n        for (int i = 0; i \u003c 5; i++) {\n            new Thread(() -\u003e {\n                try {\n                    TimeUnit.SECONDS.sleep(1);\n                    Message message = messageQueue.take();\n\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n\n            }, \"消费者\" + i).start();\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-ixb2mbh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-ixb2mbh"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结果如下："
				}
			]
		},
		{
			"ID": "20210707224540-wfvk067",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-wfvk067"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "00:09:17.234 [生产者0] DEBUG MessageQueue - 已生产消息, Message{id=0, value=值0},\n00:09:17.238 [生产者1] DEBUG MessageQueue - 已生产消息, Message{id=1, value=值1},\n00:09:18.236 [消费者4] DEBUG MessageQueue - 已消费消息, Message{id=0, value=值0},\n00:09:18.237 [消费者1] DEBUG MessageQueue - 已消费消息, Message{id=1, value=值1},\n00:09:18.237 [消费者2] DEBUG MessageQueue - 队列为空，消费者线程等待\n00:09:18.237 [消费者0] DEBUG MessageQueue - 队列为空，消费者线程等待\n00:09:18.237 [消费者3] DEBUG MessageQueue - 队列为空，消费者线程等待\n00:09:18.240 [生产者0] DEBUG MessageQueue - 已生产消息, Message{id=0, value=值0},\n00:09:18.240 [消费者3] DEBUG MessageQueue - 已消费消息, Message{id=0, value=值0},\n00:09:18.240 [消费者0] DEBUG MessageQueue - 队列为空，消费者线程等待\n00:09:18.240 [消费者2] DEBUG MessageQueue - 队列为空，消费者线程等待\n00:09:18.241 [生产者1] DEBUG MessageQueue - 已生产消息, Message{id=1, value=值1},\n00:09:18.241 [消费者2] DEBUG MessageQueue - 已消费消息, Message{id=1, value=值1},\n00:09:18.241 [消费者0] DEBUG MessageQueue - 队列为空，消费者线程等待\n00:09:19.245 [生产者0] DEBUG MessageQueue - 已生产消息, Message{id=0, value=值0},\n00:09:19.245 [消费者0] DEBUG MessageQueue - 已消费消息, Message{id=0, value=值0},\n00:09:19.245 [生产者1] DEBUG MessageQueue - 已生产消息, Message{id=1, value=值1},\n00:09:20.246 [生产者1] DEBUG MessageQueue - 已生产消息, Message{id=1, value=值1},\n00:09:20.247 [生产者0] DEBUG MessageQueue - 已生产消息, Message{id=0, value=值0},\n00:09:21.247 [生产者1] DEBUG MessageQueue - 已生产消息, Message{id=1, value=值1},\n00:09:21.247 [生产者0] DEBUG MessageQueue - 已生产消息, Message{id=0, value=值0},\n00:09:22.247 [生产者1] DEBUG MessageQueue - 队列已满，生产者线程等待\n00:09:22.247 [生产者0] DEBUG MessageQueue - 队列已满，生产者线程等待\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-z4eyblf",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707224540-z4eyblf"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "实现—生产消费 🔥"
				}
			]
		},
		{
			"ID": "20210707224540-euphjdz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-euphjdz"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "生产者（Productor）将产品交给店员（Clerk），而消费者（Consumer）从店员处取走产品，店员一次只能持有固定数量的产品（比如 20），如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。"
				}
			]
		},
		{
			"ID": "20210707224540-i8l9w56",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707224540-i8l9w56"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "分析："
				}
			]
		},
		{
			"ID": "20210707224540-4gtl2f9",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 4,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210707224540-4gtl2f9"
			},
			"Children": [
				{
					"ID": "20210707224540-a5yyiq2",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210707224540-a5yyiq2"
					},
					"Children": [
						{
							"ID": "20210707224540-7kiej43",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-7kiej43"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "是否是多线程问题？是，生产者线程，消费者线程"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-8p7wh2i",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210707224540-8p7wh2i"
					},
					"Children": [
						{
							"ID": "20210707224540-37q5yfa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-37q5yfa"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "是否有共享数据？是，店员（或产品）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707224540-oshvvu5",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20210707224540-oshvvu5"
					},
					"Children": [
						{
							"ID": "20210707224540-u68pcr8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707224540-u68pcr8"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "是否涉及线程的通信？是"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707224540-lyeexsu",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210707224540-lyeexsu"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "sync 版"
				}
			]
		},
		{
			"ID": "20210707224540-zmkaxm3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-zmkaxm3"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Productor implements Runnable {\n\n    private final Product product;\n\n    public Productor(Product product) {\n        this.product = product;\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            synchronized (product) {\n                // while 和 wait 一起使用；不能单独使用 if，可能会缺少一次判断\n                // 不能使用 if...else，会导致 wait 唤醒后即使满足条件也不能生产或消费，浪费了 OS 资源\n                while (product.productNum \u003e= 20) {\n                    try {\n                        product.wait();\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n\n                product.productNum++;\n                System.out.println(Thread.currentThread().getName() + \"：生产第\" + product.productNum + \"个产品\");\n\n                product.notifyAll();\n            }\n            try {\n                // 放在同步外更合理，其他线程可以此时抢占资源\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n\nclass Consumer implements Runnable {\n\n    private final Product product;\n\n    public Consumer(Product product) {\n        this.product = product;\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            synchronized (product) {\n                // while 和 wait 一起使用；不能单独使用 if，可能会缺少一次判断\n                // 不能使用 if...else，会导致 wait 唤醒后即使满足条件也不能生产或消费，浪费了 OS 资源\n                while (product.productNum \u003c= 0) {\n                    try {\n                        product.wait();\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n\n                System.out.println(Thread.currentThread().getName() + \"：消费第\" + product.productNum + \"个产品\");\n                product.productNum--;\n\n                product.notifyAll();\n            }\n            // 放在同步外更合理，其他线程可以此时抢占资源\n            try {\n                Thread.sleep(200);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\nclass Product {\n    // 产品数量\n    int productNum = 0;\n}\n\n\npublic class PCTest {\n    public static void main(String[] args) {\n        Product product = new Product();\n        new Thread(new Productor(product), \"生产者1\").start();\n        new Thread(new Productor(product), \"生产者2\").start();\n        new Thread(new Consumer(product), \"消费者1\").start();\n        new Thread(new Consumer(product), \"消费者2\").start();\n        new Thread(new Consumer(product), \"消费者3\").start();\n        new Thread(new Consumer(product), \"消费者4\").start();\n        new Thread(new Consumer(product), \"消费者5\").start();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-dpqet0c",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210707224540-dpqet0c"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "Lock 版本"
				}
			]
		},
		{
			"ID": "20210707224540-ww939ak",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707224540-ww939ak"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Productor implements Runnable {\n\n    private final Product product;\n\n    public Productor(Product product) {\n        this.product = product;\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n\n            try {\n                product.lock.lock();\n                // while 和 wait 一起使用；不能单独使用 if，可能会缺少一次判断\n                // 不能使用 if...else，会导致 wait 唤醒后即使满足条件也不能生产或消费，浪费了 OS 资源\n                while (product.productNum \u003e= 20) {\n                    try {\n                        product.productor.await();\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n\n                product.productNum++;\n                System.out.println(Thread.currentThread().getName() + \"：生产第\" + product.productNum + \"个产品\");\n\n                product.consumer.signalAll();\n            } finally {\n                product.lock.unlock();\n            }\n\n\n            try {\n                // 放在同步外更合理，其他线程可以此时抢占资源\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n\nclass Consumer implements Runnable {\n\n    private final Product product;\n\n    public Consumer(Product product) {\n        this.product = product;\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n\n            try {\n                product.lock.lock();\n                // while 和 wait 一起使用；不能单独使用 if，可能会缺少一次判断\n                // 不能使用 if...else，会导致 wait 唤醒后即使满足条件也不能生产或消费，浪费了 OS 资源\n                while (product.productNum \u003c= 0) {\n                    try {\n                        product.consumer.await();\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n\n                System.out.println(Thread.currentThread().getName() + \"：消费第\" + product.productNum + \"个产品\");\n                product.productNum--;\n\n                product.productor.signalAll();\n            } finally {\n                product.lock.unlock();\n            }\n\n            // 放在同步外更合理，其他线程可以此时抢占资源\n            try {\n                Thread.sleep(200);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\nclass Product {\n    // 产品数量\n    int productNum = 0;\n\n    Lock lock = new ReentrantLock();\n    Condition productor = lock.newCondition();\n    Condition consumer = lock.newCondition();\n}\n\n\npublic class PCTest {\n    public static void main(String[] args) {\n        Product product = new Product();\n        new Thread(new Productor(product), \"生产者1\").start();\n        new Thread(new Productor(product), \"生产者2\").start();\n        new Thread(new Consumer(product), \"消费者1\").start();\n        new Thread(new Consumer(product), \"消费者2\").start();\n        new Thread(new Consumer(product), \"消费者3\").start();\n        new Thread(new Consumer(product), \"消费者4\").start();\n        new Thread(new Consumer(product), \"消费者5\").start();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707224540-dmufs1g",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210707224540-dmufs1g"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "JUC 版本"
				}
			]
		}
	]
}