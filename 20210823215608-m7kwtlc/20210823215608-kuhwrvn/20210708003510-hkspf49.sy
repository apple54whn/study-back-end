{
	"ID": "20210708003510-hkspf49",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20210708003510-hkspf49",
		"title": "110.存储程序",
		"type": "doc"
	},
	"Children": [
		{
			"ID": "20210708003510-5cxztws",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210708003510-5cxztws"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "简介"
				}
			]
		},
		{
			"ID": "20210708003510-835ffb6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-835ffb6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有时候为了完成一个常用的功能需要执行许多条语句，每次都在客户端里一条一条的去输入这么多语句是很烦的。设计"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "的大叔非常贴心的给我们提供了一种称之为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储程序"
				},
				{
					"Type": "NodeText",
					"Data": "的东东，这个所谓的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储程序"
				},
				{
					"Type": "NodeText",
					"Data": "可以封装一些语句，然后给用户提供一种简单的方式来调用这个存储程序，从而间接地执行这些语句。根据调用方式的不同，我们可以把"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储程序"
				},
				{
					"Type": "NodeText",
					"Data": "分为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储例程"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "触发器"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "事件"
				},
				{
					"Type": "NodeText",
					"Data": "这几种类型。其中"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储例程"
				},
				{
					"Type": "NodeText",
					"Data": "需要我们去手动调用，而"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "触发器"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "事件"
				},
				{
					"Type": "NodeText",
					"Data": "都是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "服务器在特定条件下自己调用的。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储例程"
				},
				{
					"Type": "NodeText",
					"Data": "又可以被细分为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储函数"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储过程"
				},
				{
					"Type": "NodeText",
					"Data": "。我们画个图表示一下："
				}
			]
		},
		{
			"ID": "20210708003510-wp6qlw5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-wp6qlw5"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "img"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "../assets/16ce116e5cb5079c.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-3rzspoz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210708003510-3rzspoz"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "自定义变量简介"
				}
			]
		},
		{
			"ID": "20210708003510-qj36e6f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-qj36e6f"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "生活中我们经常会遇到一些固定不变的值，比如数字"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "100"
				},
				{
					"Type": "NodeText",
					"Data": "、字符串"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "'你好呀'"
				},
				{
					"Type": "NodeText",
					"Data": "，我们把这些值固定不变的东东称之为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "常量"
				},
				{
					"Type": "NodeText",
					"Data": "。可是有时候为了方便，我们会使用某一个符号来代表一个值，它代表的值是可以变化的。比方说我们规定符号"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "a"
				},
				{
					"Type": "NodeText",
					"Data": "代表数字"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "1"
				},
				{
					"Type": "NodeText",
					"Data": "，之后我们又可以让符号"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "a"
				},
				{
					"Type": "NodeText",
					"Data": "代表数字"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "2"
				},
				{
					"Type": "NodeText",
					"Data": "，我们把这种值可以发生变化的东东称之为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "变量"
				},
				{
					"Type": "NodeText",
					"Data": "，其中符号"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "a"
				},
				{
					"Type": "NodeText",
					"Data": "就称为这个变量的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "变量名"
				},
				{
					"Type": "NodeText",
					"Data": "。在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "中，我们可以通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SET"
				},
				{
					"Type": "NodeText",
					"Data": "语句来自定义一些我们自己的变量，比方说这样："
				}
			]
		},
		{
			"ID": "20210708003510-ydtmah9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-ydtmah9"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SET @a = 1;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-uoo61gt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-uoo61gt"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上边的语句就表明我们定义了一个称之为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "a"
				},
				{
					"Type": "NodeText",
					"Data": "的变量，并且把整数"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "1"
				},
				{
					"Type": "NodeText",
					"Data": "赋值给了这个变量。不过大家需要注意一下，设计 MySQL 的大叔规定，在我们的自定义变量前边必须加一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@"
				},
				{
					"Type": "NodeText",
					"Data": "符号（虽然有点儿怪，但这就是人家规定的，大家遵守就好了）。"
				}
			]
		},
		{
			"ID": "20210708003510-03e62iu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-03e62iu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果我们之后想查看这个变量的值的话，使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SELECT"
				},
				{
					"Type": "NodeText",
					"Data": "语句就好了，不过仍然需要在变量名称前加一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@"
				},
				{
					"Type": "NodeText",
					"Data": "符号："
				}
			]
		},
		{
			"ID": "20210708003510-9hfb683",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-9hfb683"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SELECT @a;\n+------+\n| @a   |\n+------+\n|    1 |\n+------+\n1 row in set (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-d3njywb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-d3njywb"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "同一个变量也可以存储存储不同类型的值，比方说我们再把一个字符串值赋值给变量"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "a"
				},
				{
					"Type": "NodeText",
					"Data": "："
				}
			]
		},
		{
			"ID": "20210708003510-5ewyaa4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-5ewyaa4"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SET @a = '哈哈哈';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql\u003e SELECT @a;\n+-----------+\n| @a        |\n+-----------+\n| 哈哈哈    |\n+-----------+\n1 row in set (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-wxjd0fa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-wxjd0fa"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "除了把一个常量赋值给一个变量以外，我们还可以把一个变量赋值给另一个变量："
				}
			]
		},
		{
			"ID": "20210708003510-a47xrbu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-a47xrbu"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SET @b = @a;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e select @b;\n+-----------+\n| @b        |\n+-----------+\n| 哈哈哈    |\n+-----------+\n1 row in set (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-ae4nvvq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-ae4nvvq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这样变量"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "a"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "b"
				},
				{
					"Type": "NodeText",
					"Data": "就有了相同的值"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "'哇哈哈'"
				},
				{
					"Type": "NodeText",
					"Data": "！"
				}
			]
		},
		{
			"ID": "20210708003510-5qcfas4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-5qcfas4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们还可以将某个查询的结果赋值给一个变量，前提是这个查询的结果只有一个值："
				}
			]
		},
		{
			"ID": "20210708003510-95l5ldf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-95l5ldf"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SET @a = (SELECT m1 FROM t1 LIMIT 1);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-2u06ba8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-2u06ba8"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "还可以用另一种形式的语句来将查询的结果赋值给一个变量："
				}
			]
		},
		{
			"ID": "20210708003510-g8t5ayc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-g8t5ayc"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SELECT n1 FROM t1 LIMIT 1 INTO @b;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-s7o02gh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-s7o02gh"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为语句"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SELECT m1 FROM t1 LIMIT 1"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SELECT n1 FROM t1 LIMIT 1"
				},
				{
					"Type": "NodeText",
					"Data": "的查询结果都只有一个值，所以它们可以直接赋值给变量"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "a"
				},
				{
					"Type": "NodeText",
					"Data": "或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "b"
				},
				{
					"Type": "NodeText",
					"Data": "。我们查看一下这两个变量的值："
				}
			]
		},
		{
			"ID": "20210708003510-mnurcq9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-mnurcq9"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SELECT @a, @b;\n+------+------+\n| @a   | @b   |\n+------+------+\n|    1 | a    |\n+------+------+\n1 row in set (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-98p2zet",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-98p2zet"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果我们的查询结果是一条记录，该记录中有多个列的值的话，我们想把这几个值分别赋值到不同的变量中，只能使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "INTO"
				},
				{
					"Type": "NodeText",
					"Data": "语句了："
				}
			]
		},
		{
			"ID": "20210708003510-q2148q4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-q2148q4"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SELECT m1, n1 FROM t1 LIMIT 1 INTO @a, @b;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-sxpwi8k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-sxpwi8k"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这条查询语句的结果集中只包含一条记录，我们把这条记录的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "m1"
				},
				{
					"Type": "NodeText",
					"Data": "列的值赋值到了变量"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "a"
				},
				{
					"Type": "NodeText",
					"Data": "中，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "n1"
				},
				{
					"Type": "NodeText",
					"Data": "列的值赋值到了变量"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "b"
				},
				{
					"Type": "NodeText",
					"Data": "中。"
				}
			]
		},
		{
			"ID": "20210708003510-i2fezan",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210708003510-i2fezan"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "语句结束分隔符"
				}
			]
		},
		{
			"ID": "20210708003510-6e92fdm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-6e92fdm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "客户端的交互界面处，当我们完成键盘输入并按下回车键时，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "客户端会检测我们输入的内容中是否包含"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ";"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\\g"
				},
				{
					"Type": "NodeText",
					"Data": "或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\\G"
				},
				{
					"Type": "NodeText",
					"Data": "这三个符号之一，如果有的话，会把我们输入的内容发送到服务器。这样一来，如果我们想一次性给服务器发送多条的话，就需要把这些语句写到一行中，比如这样："
				}
			]
		},
		{
			"ID": "20210708003510-vif651m",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-vif651m"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SELECT * FROM t1 LIMIT 1;SELECT * FROM t2 LIMIT 1;SELECT * FROM t3 LIMIT 1;\n+------+------+\n| m1   | n1   |\n+------+------+\n|    1 | a    |\n+------+------+\n1 row in set (0.00 sec)\n\n+------+------+\n| m2   | n2   |\n+------+------+\n|    2 | b    |\n+------+------+\n1 row in set (0.00 sec)\n\n+------+------+\n| m3   | n3   |\n+------+------+\n|    3 | c    |\n+------+------+\n1 row in set (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-gmzcsy2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-gmzcsy2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "造成这一不便的原因在于，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "客户端检测输入结束用的符号和分隔各个语句的符号是一样的！其实我们也可以用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "delimiter"
				},
				{
					"Type": "NodeText",
					"Data": "命令来自定义"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "的检测语句输入结束的符号，也就是所谓的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "语句结束分隔符"
				},
				{
					"Type": "NodeText",
					"Data": "，比如这样："
				}
			]
		},
		{
			"ID": "20210708003510-48jrch7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-48jrch7"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e delimiter $\nmysql\u003e SELECT * FROM t1 LIMIT 1;\n    -\u003e SELECT * FROM t2 LIMIT 1;\n    -\u003e SELECT * FROM t3 LIMIT 1;\n    -\u003e $\n+------+------+\n| m1   | n1   |\n+------+------+\n|    1 | a    |\n+------+------+\n1 row in set (0.00 sec)\n\n+------+------+\n| m2   | n2   |\n+------+------+\n|    2 | b    |\n+------+------+\n1 row in set (0.00 sec)\n\n+------+------+\n| m3   | n3   |\n+------+------+\n|    3 | c    |\n+------+------+\n1 row in set (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-nxjaa93",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-nxjaa93"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "delimiter $"
				},
				{
					"Type": "NodeText",
					"Data": "命令意味着修改语句结束分隔符为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "$"
				},
				{
					"Type": "NodeText",
					"Data": "，也就是说之后"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "客户端检测用户语句输入结束的符号为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "$"
				},
				{
					"Type": "NodeText",
					"Data": "。上边例子中我们虽然连续输入了 3 个以分号"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ";"
				},
				{
					"Type": "NodeText",
					"Data": "结尾的查询语句并且按了回车键，但是输入的内容并没有被提交，直到敲下"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "$"
				},
				{
					"Type": "NodeText",
					"Data": "符号并回车，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "客户端才会将我们输入的内容提交到服务器，此时我们输入的内容里已经包含了 3 个独立的查询语句了，所以返回了 3 个结果集。"
				}
			]
		},
		{
			"ID": "20210708003510-iuoenv1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-iuoenv1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们也可以将"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "语句结束分隔符"
				},
				{
					"Type": "NodeText",
					"Data": "重新定义为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "$"
				},
				{
					"Type": "NodeText",
					"Data": "以外的其他包含单个或多个字符的字符串，比方说这样："
				}
			]
		},
		{
			"ID": "20210708003510-rdasx85",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-rdasx85"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e delimiter EOF\nmysql\u003e SELECT * FROM t1 LIMIT 1;\n    -\u003e SELECT * FROM t2 LIMIT 1;\n    -\u003e SELECT * FROM t3 LIMIT 1;\n    -\u003e EOF\n+------+------+\n| m1   | n1   |\n+------+------+\n|    1 | a    |\n+------+------+\n1 row in set (0.00 sec)\n\n+------+------+\n| m2   | n2   |\n+------+------+\n|    2 | b    |\n+------+------+\n1 row in set (0.00 sec)\n\n+------+------+\n| m3   | n3   |\n+------+------+\n|    3 | c    |\n+------+------+\n1 row in set (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-ab94bti",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-ab94bti"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们这里采用了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "EOF"
				},
				{
					"Type": "NodeText",
					"Data": "作为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "客户端检测输入结束的符号，是不是很 easy 啊！当然，这个只是为了方便我们一次性输入多个语句，在输入完成之后最好还是改回我们常用的分号"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ";"
				},
				{
					"Type": "NodeText",
					"Data": "吧："
				}
			]
		},
		{
			"ID": "20210708003510-m6pph57",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-m6pph57"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e delimiter ;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-ndxhxzs",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20210708003510-ndxhxzs"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e "
				},
				{
					"ID": "20210708003510-cm8au1w",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210708003510-cm8au1w"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "小贴士： 我们应该避免使用反斜杠（\\）字符作为语句结束分隔符，因为这是 MySQL 的转义字符。"
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-4ge6k4y",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210708003510-4ge6k4y"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "存储函数"
				}
			]
		},
		{
			"ID": "20210708003510-zatwnwb",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-zatwnwb"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "创建存储函数"
				}
			]
		},
		{
			"ID": "20210708003510-4675qot",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-4675qot"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储函数"
				},
				{
					"Type": "NodeText",
					"Data": "其实就是一种"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "函数"
				},
				{
					"Type": "NodeText",
					"Data": "，只不过在这个函数里可以执行"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "的语句而已。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "函数"
				},
				{
					"Type": "NodeText",
					"Data": "的概念大家都应该不陌生，它可以把处理某个问题的过程封装起来，之后我们直接调用函数就可以去解决这个问题了，简单方便又环保。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "中定义"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储函数"
				},
				{
					"Type": "NodeText",
					"Data": "的语句如下："
				}
			]
		},
		{
			"ID": "20210708003510-2xs157k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-2xs157k"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE FUNCTION 存储函数名称([参数列表])\nRETURNS 返回值类型\nBEGIN\n    函数体内容\nEND\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-vt9xdkc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-vt9xdkc"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从这里我们可以看出，定义一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储函数"
				},
				{
					"Type": "NodeText",
					"Data": "需要指定函数名称、参数列表、返回值类型以及函数体内容。如果该函数不需要参数，那参数列表可以被省略，函数体内容可以包括一条或多条语句，每条语句都要以分号"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ";"
				},
				{
					"Type": "NodeText",
					"Data": "结尾。上边语句中的制表符和换行仅仅是为了好看，如果你觉得烦，完全可以把存储函数的定义都写在一行里，用一个或多个空格把上述几个部分分隔开就好！ 光看定义理解的不深刻，我们先写一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储函数"
				},
				{
					"Type": "NodeText",
					"Data": "开开眼："
				}
			]
		},
		{
			"ID": "20210708003510-442tzjh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-442tzjh"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e delimiter $\nmysql\u003e CREATE FUNCTION avg_score(s VARCHAR(100))\n    -\u003e RETURNS DOUBLE\n    -\u003e BEGIN\n    -\u003e     RETURN (SELECT AVG(score) FROM student_score WHERE subject = s);\n    -\u003e END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e delimiter ;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-jo7r3vu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-jo7r3vu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们定义了一个名叫"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "avg_score"
				},
				{
					"Type": "NodeText",
					"Data": "的函数，它接收一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "VARCHAR(100)"
				},
				{
					"Type": "NodeText",
					"Data": "类型的参数，声明的返回值类型是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DOUBLE"
				},
				{
					"Type": "NodeText",
					"Data": "，需要注意的是，我们在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "RETURN"
				},
				{
					"Type": "NodeText",
					"Data": "语句后边写了一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SELECT"
				},
				{
					"Type": "NodeText",
					"Data": "语句，表明这个函数的返回结果就是根据这个查询语句产生的，也就是返回了指定科目的平均成绩。"
				}
			]
		},
		{
			"ID": "20210708003510-kb10o17",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-kb10o17"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "存储函数的调用"
				}
			]
		},
		{
			"ID": "20210708003510-sxrbn6o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-sxrbn6o"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们自定义的函数和系统内置函数的使用方式是一样的，都是在函数名后加小括号"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "()"
				},
				{
					"Type": "NodeText",
					"Data": "表示函数调用，调用有参数的函数时可以把参数写到小括号里边。函数调用可以放到查询列表或者作为搜索条件，或者和别的操作数一起组成更复杂的表达式，我们现在来调用一下刚刚写好的这个名为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "avg_score"
				},
				{
					"Type": "NodeText",
					"Data": "的函数吧："
				}
			]
		},
		{
			"ID": "20210708003510-ui9exgo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-ui9exgo"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SELECT avg_score('母猪的产后护理');\n+------------------------------------+\n| avg_score('母猪的产后护理')        |\n+------------------------------------+\n|                                 73 |\n+------------------------------------+\n1 row in set (0.00 sec)\n\nmysql\u003e SELECT avg_score('论萨达姆的战争准备');\n+------------------------------------------+\n| avg_score('论萨达姆的战争准备')          |\n+------------------------------------------+\n|                                    73.25 |\n+------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-80p1qpf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-80p1qpf"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过调用函数的方式而不是直接写查询语句的方式来获取某门科目的平均成绩看起来就简介多了。"
				}
			]
		},
		{
			"ID": "20210708003510-jhouxs1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-jhouxs1"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "查看和删除存储函数"
				}
			]
		},
		{
			"ID": "20210708003510-eso8744",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-eso8744"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果我们想查看我们已经定义了多少个存储函数，可以使用下边这个语句："
				}
			]
		},
		{
			"ID": "20210708003510-ncair6s",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-ncair6s"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SHOW FUNCTION STATUS [LIKE 需要匹配的函数名]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-sv4kkax",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-sv4kkax"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由于这个命令得到的结果太多，我们就不演示了哈，大家可以自己试试。如果我们想查看某个函数的具体是怎么定义的，可以使用这个语句："
				}
			]
		},
		{
			"ID": "20210708003510-ttw3lvg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-ttw3lvg"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SHOW CREATE FUNCTION 函数名\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-7e2ubnr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-7e2ubnr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如这样："
				}
			]
		},
		{
			"ID": "20210708003510-y9vvz2k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-y9vvz2k"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SHOW CREATE FUNCTION avg_score\\G\n*************************** 1. row ***************************\n            Function: avg_score\n            sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n     Create Function: CREATE DEFINER=`root`@`localhost` FUNCTION `avg_score`(s VARCHAR(100)) RETURNS double\nBEGIN\n        RETURN (SELECT AVG(score) FROM student_score WHERE subject = s);\n    END\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n  Database Collation: utf8_general_ci\n1 row in set (0.01 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-khjumlw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-khjumlw"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "虽然展示出很多内容，但是我们只要聚焦于名叫"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Create Function"
				},
				{
					"Type": "NodeText",
					"Data": "的那部分信息，该部分信息展示了这个存储函数的定义语句是什么样的（可以看到"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "服务器为我们自动添加了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DEFINER="
				},
				{
					"Type": "NodeText",
					"Data": "root"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@"
				},
				{
					"Type": "NodeText",
					"Data": "localhost``，大家可以把这个内容先忽略掉）。"
				}
			]
		},
		{
			"ID": "20210708003510-fug9bze",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-fug9bze"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果想删除某个存储函数，使用这个语句："
				}
			]
		},
		{
			"ID": "20210708003510-7f170cr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-7f170cr"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "DROP FUNCTION 函数名\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-k8269px",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-k8269px"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如我们来删掉"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "avg_score"
				},
				{
					"Type": "NodeText",
					"Data": "这个函数："
				}
			]
		},
		{
			"ID": "20210708003510-9buccot",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-9buccot"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e DROP FUNCTION avg_score;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-rpah19c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-rpah19c"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "什么？你以为到这里"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储函数"
				},
				{
					"Type": "NodeText",
					"Data": "就唠叨完了么？那怎么可能～ 到现在为止我们只是勾勒出一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储函数"
				},
				{
					"Type": "NodeText",
					"Data": "的大致轮廓，下边我们来详细说一下"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "定义函数体时支持的一些语句。"
				}
			]
		},
		{
			"ID": "20210708003510-djmb07y",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-djmb07y"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "函数体的定义"
				}
			]
		},
		{
			"ID": "20210708003510-vqvzfyr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-vqvzfyr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上边定义的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "avg_score"
				},
				{
					"Type": "NodeText",
					"Data": "的函数体里边只包含一条语句，如果只为了节省书写一条语句的时间而定义一个存储函数，其实也不是很值～ 其实存储函数的函数体中可以包含多条语句，并且支持一些特殊的语法来供我们使用，下边一起看看呗～"
				}
			]
		},
		{
			"ID": "20210708003510-k5i3k1s",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210708003510-k5i3k1s"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "在函数体中定义局部变量"
				}
			]
		},
		{
			"ID": "20210708003510-8ph0sil",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-8ph0sil"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们在前边说过使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SET"
				},
				{
					"Type": "NodeText",
					"Data": "语句来自定义变量的方式，可以不用声明就为变量赋值。而在存储函数的函数体中使用变量前必须先声明这个变量，声明方式如下："
				}
			]
		},
		{
			"ID": "20210708003510-ijdatss",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-ijdatss"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "DECLARE 变量名1, 变量名2, ... 数据类型 [DEFAULT 默认值];\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-vim0bm1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-vim0bm1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这些在函数体内声明的变量只在该函数体内有用，当存储函数执行完成后，就不能访问到这些变量了，所以这些变量也被称为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "局部"
				},
				{
					"Type": "NodeText",
					"Data": "变量。我们可以在一条语句中声明多个相同数据类型的变量。不过需要特别留心的是，函数体中的局部变量名不允许加"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@"
				},
				{
					"Type": "NodeText",
					"Data": "前缀，这一点和我们之前直接使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SET"
				},
				{
					"Type": "NodeText",
					"Data": "语句自定义变量的方式是截然不同的，特别注意一下。在声明了这个局部变量之后，才可以使用它，就像这样："
				}
			]
		},
		{
			"ID": "20210708003510-yaqe56o",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-yaqe56o"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e delimiter $;\nmysql\u003e CREATE FUNCTION var_demo()\n-\u003e RETURNS INT\n-\u003e BEGIN\n-\u003e     DECLARE c INT;\n-\u003e     SET c = 5;\n-\u003e     RETURN c;\n-\u003e END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e delimiter ;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-qg4mxlx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-qg4mxlx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们定义了一个名叫"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "var_demo"
				},
				{
					"Type": "NodeText",
					"Data": "而且不需要参数的函数，然后在函数体中声明了一个名称为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "c"
				},
				{
					"Type": "NodeText",
					"Data": "的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "INT"
				},
				{
					"Type": "NodeText",
					"Data": "类型的局部变量，之后我们调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SET"
				},
				{
					"Type": "NodeText",
					"Data": "语句为这个局部变量赋值了整数"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "5"
				},
				{
					"Type": "NodeText",
					"Data": "，并且把局部变量"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "c"
				},
				{
					"Type": "NodeText",
					"Data": "当作函数结果返回。我们调用一下这个函数："
				}
			]
		},
		{
			"ID": "20210708003510-hjwkidw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-hjwkidw"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e select var_demo();\n+------------+\n| var_demo() |\n+------------+\n|          5 |\n+------------+\n1 row in set (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-xoncwwa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-xoncwwa"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果我们不对声明的局部变量赋值的话，它的默认值就是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "NULL"
				},
				{
					"Type": "NodeText",
					"Data": "，当然我们也可以通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DEFAULT"
				},
				{
					"Type": "NodeText",
					"Data": "子句来显式的指定局部变量的默认值，比如这样："
				}
			]
		},
		{
			"ID": "20210708003510-4ejcbfy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-4ejcbfy"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e delimiter $\nmysql\u003e CREATE FUNCTION var_default_demo()\n-\u003e RETURNS INT\n-\u003e BEGIN\n-\u003e     DECLARE c INT DEFAULT 1;\n-\u003e     RETURN c;\n-\u003e END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e delimiter ;\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-nzfwk0t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-nzfwk0t"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在新创建的这个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "var_default_demo"
				},
				{
					"Type": "NodeText",
					"Data": "函数中，我们声明了一个局部变量"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "c"
				},
				{
					"Type": "NodeText",
					"Data": "，并且指定了它的默认值为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "1"
				},
				{
					"Type": "NodeText",
					"Data": "，然后看一下该函数的调用结果："
				}
			]
		},
		{
			"ID": "20210708003510-rlnudv6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-rlnudv6"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SELECT var_default_demo();\n+--------------------+\n| var_default_demo() |\n+--------------------+\n|                  1 |\n+--------------------+\n1 row in set (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-jkjvqjl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-jkjvqjl"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "得到的结果是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "1"
				},
				{
					"Type": "NodeText",
					"Data": "，说明了我们指定的局部变量默认值生效了！另外，特别需要注意一下我们可以将某个查询语句的结果赋值给局部变量的情况，比如我们改写一下前边的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "avg_score"
				},
				{
					"Type": "NodeText",
					"Data": "函数："
				}
			]
		},
		{
			"ID": "20210708003510-pkavu4k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-pkavu4k"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE FUNCTION avg_score(s VARCHAR(100))\nRETURNS DOUBLE\nBEGIN\n    DECLARE a DOUBLE;\n    SET a = (SELECT AVG(score) FROM student_score WHERE subject = s);\n    return a;\nEND\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-p41viu2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-p41viu2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们先把一个查询语句的结果赋值给了局部变量"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "a"
				},
				{
					"Type": "NodeText",
					"Data": "，然后再返回了这个变量。"
				}
			]
		},
		{
			"ID": "20210708003510-jg7wsg9",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20210708003510-jg7wsg9"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e "
				},
				{
					"ID": "20210708003510-fmqocxl",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210708003510-fmqocxl"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "小贴士： 在存储函数的函数体中，DECLARE 语句必须放到其他语句的前边。"
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-9wb7ofb",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210708003510-9wb7ofb"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "在函数体中使用自定义变量"
				}
			]
		},
		{
			"ID": "20210708003510-t8e7dut",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-t8e7dut"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "除了局部变量外，也可以在函数体中使用我们之前用过的自定义变量，比方说这样："
				}
			]
		},
		{
			"ID": "20210708003510-qbewxgb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-qbewxgb"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e delimiter $\nmysql\u003e\nmysql\u003e CREATE FUNCTION user_defined_var_demo()\n    -\u003e RETURNS INT\n    -\u003e BEGIN\n    -\u003e     SET @abc = 10;\n    -\u003e     return @abc;\n    -\u003e END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e\nmysql\u003e delimiter ;\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-eoriuwk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-eoriuwk"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们定义了一个名叫"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "user_defined_var_demo"
				},
				{
					"Type": "NodeText",
					"Data": "的存储函数，函数体内直接使用了自定义变量"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "abc"
				},
				{
					"Type": "NodeText",
					"Data": "，我们来调用一下这个函数："
				}
			]
		},
		{
			"ID": "20210708003510-ds3lic7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-ds3lic7"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SELECT user_defined_var_demo();\n+-------------------------+\n| user_defined_var_demo() |\n+-------------------------+\n|                      10 |\n+-------------------------+\n1 row in set (0.01 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-vvb0gxp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-vvb0gxp"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "虽然现在存储函数执行完了，但是由于在该函数执行过程中为自定义变量"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "abc"
				},
				{
					"Type": "NodeText",
					"Data": "赋值了，那么在该函数执行完之后我们仍然可以访问到该自定义变量的值，就像这样："
				}
			]
		},
		{
			"ID": "20210708003510-o1xgnc1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-o1xgnc1"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SELECT @abc;\n+------+\n| @abc |\n+------+\n|   10 |\n+------+\n1 row in set (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-xmq0mi2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-xmq0mi2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这一点和在函数体中使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DECLARE"
				},
				{
					"Type": "NodeText",
					"Data": "声明的局部变量有明显区别，大家注意一下。"
				}
			]
		},
		{
			"ID": "20210708003510-w33zk6s",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210708003510-w33zk6s"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "存储函数的参数"
				}
			]
		},
		{
			"ID": "20210708003510-2ijh306",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-2ijh306"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在定义存储函数的时候，可以指定多个参数，每个参数都要指定对应的数据类型，就像这样："
				}
			]
		},
		{
			"ID": "20210708003510-a1u59l2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-a1u59l2"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "参数名 数据类型\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-41a1xds",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-41a1xds"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如我们上边编写的这个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "avg_score"
				},
				{
					"Type": "NodeText",
					"Data": "函数："
				}
			]
		},
		{
			"ID": "20210708003510-pq75woy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-pq75woy"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE FUNCTION avg_score(s VARCHAR(100))\nRETURNS DOUBLE\nBEGIN\n    RETURN (SELECT AVG(score) FROM student_score WHERE subject = s);\nEND\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-wcho0jg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-wcho0jg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个函数只需要一个类型为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "VARCHAR(100)"
				},
				{
					"Type": "NodeText",
					"Data": "参数，我们这里给这个参数起的名称是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "s"
				},
				{
					"Type": "NodeText",
					"Data": "，不过这个参数名不要和函数体语句中的其他变量名、列名啥的冲突，比如上边的例子中如果把变量名"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "s"
				},
				{
					"Type": "NodeText",
					"Data": "改为为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "subject"
				},
				{
					"Type": "NodeText",
					"Data": "，它就与下边用到"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "WHERE"
				},
				{
					"Type": "NodeText",
					"Data": "子句中的列名冲突了。"
				}
			]
		},
		{
			"ID": "20210708003510-r6f8563",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-r6f8563"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "另外，函数参数不可以指定默认值，我们在调用函数的时候，必须显式的指定所有的参数，并且参数类型也一定要匹配，比方说我们在调用函数"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "avg_score"
				},
				{
					"Type": "NodeText",
					"Data": "时，必须指定我们要查询的课程名，不然会报错的："
				}
			]
		},
		{
			"ID": "20210708003510-4uj2lmb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-4uj2lmb"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e select avg_score();\nERROR 1318 (42000): Incorrect number of arguments for FUNCTION xiaohaizi.avg_score; expected 1, got 0\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-tr8gb57",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210708003510-tr8gb57"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "判断语句的编写"
				}
			]
		},
		{
			"ID": "20210708003510-sstglsy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-sstglsy"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "像其他的编程语言一样，在存储函数的函数体里也可以使用判断的语句，语法格式如下："
				}
			]
		},
		{
			"ID": "20210708003510-5qflj9r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-5qflj9r"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "IF 表达式 THEN\n    处理语句列表\n[ELSEIF 表达式 THEN\n    处理语句列表]\n... # 这里可以有多个ELSEIF语句\n[ELSE\n    处理语句列表]\nEND IF;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-2liyu0x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-2liyu0x"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "处理语句列表"
				},
				{
					"Type": "NodeText",
					"Data": "中可以包含多条语句，每条语句以分号"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": ";"
				},
				{
					"Type": "NodeText",
					"Data": "结尾就好。"
				}
			]
		},
		{
			"ID": "20210708003510-euqhcbg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-euqhcbg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们举一个包含"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IF"
				},
				{
					"Type": "NodeText",
					"Data": "语句的存储函数的例子："
				}
			]
		},
		{
			"ID": "20210708003510-nmthgn8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-nmthgn8"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e delimiter $\nmysql\u003e CREATE FUNCTION condition_demo(i INT)\n-\u003e RETURNS VARCHAR(10)\n-\u003e BEGIN\n-\u003e     DECLARE result VARCHAR(10);\n-\u003e     IF i = 1 THEN\n-\u003e         SET result = '结果是1';\n-\u003e     ELSEIF i = 2 THEN\n-\u003e         SET result = '结果是2';\n-\u003e     ELSEIF i = 3 THEN\n-\u003e         SET result = '结果是3';\n-\u003e     ELSE\n-\u003e         SET result = '非法参数';\n-\u003e     END IF;\n-\u003e     RETURN result;\n-\u003e END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e delimiter ;\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-8etggyw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-8etggyw"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在我们定义的函数"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "condition_demo"
				},
				{
					"Type": "NodeText",
					"Data": "中，它接收一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "INT"
				},
				{
					"Type": "NodeText",
					"Data": "类型的参数，这个函数的处理逻辑如下："
				}
			]
		},
		{
			"ID": "20210708003510-uz34gw8",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Tight": true,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 4,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210708003510-uz34gw8"
			},
			"Children": [
				{
					"ID": "20210708003510-hepuqod",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210708003510-hepuqod"
					},
					"Children": [
						{
							"ID": "20210708003510-avyj2xg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-avyj2xg"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果这个参数的值是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "1"
								},
								{
									"Type": "NodeText",
									"Data": "，就把"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "result"
								},
								{
									"Type": "NodeText",
									"Data": "变量的值设置为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "'结果是1'"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-25h9aac",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210708003510-25h9aac"
					},
					"Children": [
						{
							"ID": "20210708003510-9e5dykt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-9e5dykt"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "否则如果这个这个参数的值是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "2"
								},
								{
									"Type": "NodeText",
									"Data": "，就把"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "result"
								},
								{
									"Type": "NodeText",
									"Data": "变量的值设置为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "'结果是2'"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-9jadv28",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20210708003510-9jadv28"
					},
					"Children": [
						{
							"ID": "20210708003510-2en1q9f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-2en1q9f"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "否则如果这个这个参数的值是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "3"
								},
								{
									"Type": "NodeText",
									"Data": "，就把"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "result"
								},
								{
									"Type": "NodeText",
									"Data": "变量的值设置为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "'结果是3'"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-niw7hf3",
					"Type": "NodeListItem",
					"Data": "4",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 4,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "NA==",
						"Num": 4
					},
					"Properties": {
						"id": "20210708003510-niw7hf3"
					},
					"Children": [
						{
							"ID": "20210708003510-h66j7pl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-h66j7pl"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "否则就把"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "result"
								},
								{
									"Type": "NodeText",
									"Data": "变量的值设置为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "'非法参数'"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-46c85yq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-46c85yq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当然了，我们举的这个例子还是比较白痴的啦，只是为了说明语法怎么用而已。我们现在调用一下这个函数："
				}
			]
		},
		{
			"ID": "20210708003510-ihz0htb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-ihz0htb"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SELECT condition_demo(2);\n+-------------------+\n| condition_demo(2) |\n+-------------------+\n| 结果是2           |\n+-------------------+\n1 row in set (0.00 sec)\n\nmysql\u003e SELECT condition_demo(5);\n+-------------------+\n| condition_demo(5) |\n+-------------------+\n| 非法参数          |\n+-------------------+\n1 row in set (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-cgsgvc2",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210708003510-cgsgvc2"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "循环语句的编写"
				}
			]
		},
		{
			"ID": "20210708003510-coy8mx1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-coy8mx1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "除了判断语句，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "还支持循环语句的编写，不过提供了 3 种形式的循环语句，我们一一道来："
				}
			]
		},
		{
			"ID": "20210708003510-j1ouvpm",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708003510-j1ouvpm"
			},
			"Children": [
				{
					"ID": "20210708003510-5u32h82",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-5u32h82"
					},
					"Children": [
						{
							"ID": "20210708003510-xpdb6sa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-xpdb6sa"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "WHILE"
								},
								{
									"Type": "NodeText",
									"Data": "循环语句："
								}
							]
						},
						{
							"ID": "20210708003510-jspfjlt",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-jspfjlt"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "WHILE 表达式 DO\n    处理语句列表\nEND WHILE;\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-ah636ax",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-ah636ax"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这个语句的意思是：如果满足给定的表达式，则执行处理语句，否则退出循环。比如我们想定义一个计算从"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "1"
								},
								{
									"Type": "NodeText",
									"Data": "到"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "n"
								},
								{
									"Type": "NodeText",
									"Data": "这"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "n"
								},
								{
									"Type": "NodeText",
									"Data": "个数的和（假设"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "n"
								},
								{
									"Type": "NodeText",
									"Data": "大于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "0"
								},
								{
									"Type": "NodeText",
									"Data": "）的存储函数，可以这么写："
								}
							]
						},
						{
							"ID": "20210708003510-f6zjao1",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-f6zjao1"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "mysql\u003e delimiter $\nmysql\u003e CREATE FUNCTION sum_all(n INT UNSIGNED)\n-\u003e RETURNS INT\n-\u003e BEGIN\n-\u003e     DECLARE result INT DEFAULT 0;\n-\u003e     DECLARE i INT DEFAULT 1;\n-\u003e     WHILE i \u003c= n DO\n-\u003e         SET result = result + i;\n-\u003e         SET i = i + 1;\n-\u003e     END WHILE;\n-\u003e     RETURN result;\n-\u003e END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e delimiter ;\nmysql\u003e\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-8d9j6ac",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-8d9j6ac"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在函数"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "sum_all"
								},
								{
									"Type": "NodeText",
									"Data": "中，我们接收一个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "INT UNSIGNED"
								},
								{
									"Type": "NodeText",
									"Data": "类型的参数，声明了两个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "INT"
								},
								{
									"Type": "NodeText",
									"Data": "类型的变量"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "i"
								},
								{
									"Type": "NodeText",
									"Data": "和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "result"
								},
								{
									"Type": "NodeText",
									"Data": "。我们先测试一下这个函数："
								}
							]
						},
						{
							"ID": "20210708003510-p2rn66m",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-p2rn66m"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "mysql\u003e SELECT sum_all(3);\n+------------+\n| sum_all(3) |\n+------------+\n|          6 |\n+------------+\n1 row in set (0.00 sec)\n\nmysql\u003e\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-ngo9gcu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-ngo9gcu"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "分析一下这个结果是怎么产生的，初始的情况下"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "result"
								},
								{
									"Type": "NodeText",
									"Data": "的值默认是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "0"
								},
								{
									"Type": "NodeText",
									"Data": "，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "i"
								},
								{
									"Type": "NodeText",
									"Data": "的值默认是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "1"
								},
								{
									"Type": "NodeText",
									"Data": "，给定的参数"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "n"
								},
								{
									"Type": "NodeText",
									"Data": "的值是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "3"
								},
								{
									"Type": "NodeText",
									"Data": "。这个存储函数的运行过程就是："
								}
							]
						},
						{
							"ID": "20210708003510-trimovu",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1,
								"Tight": true,
								"Start": 1,
								"Delimiter": 46,
								"Padding": 4,
								"Marker": "MQ==",
								"Num": 1
							},
							"Properties": {
								"id": "20210708003510-trimovu"
							},
							"Children": [
								{
									"ID": "20210708003510-tjqfplx",
									"Type": "NodeListItem",
									"Data": "1",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 1,
										"Delimiter": 46,
										"Padding": 4,
										"Marker": "MQ==",
										"Num": 1
									},
									"Properties": {
										"id": "20210708003510-tjqfplx"
									},
									"Children": [
										{
											"ID": "20210708003510-56wglto",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708003510-56wglto"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "先判断"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "i \u0026lt;= n"
												},
												{
													"Type": "NodeText",
													"Data": "是否成立，也就是"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "1 \u0026lt;= 3"
												},
												{
													"Type": "NodeText",
													"Data": "是否成立，显然成立，然后执行处理语句，将"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "result"
												},
												{
													"Type": "NodeText",
													"Data": "的值设置为"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "1"
												},
												{
													"Type": "NodeText",
													"Data": "（"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "result + i"
												},
												{
													"Type": "NodeText",
													"Data": " = "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "0 + 1"
												},
												{
													"Type": "NodeText",
													"Data": "），"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "i"
												},
												{
													"Type": "NodeText",
													"Data": "的值设置为"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "2"
												},
												{
													"Type": "NodeText",
													"Data": "（"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "i + 1"
												},
												{
													"Type": "NodeText",
													"Data": " = "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "1 + 1"
												},
												{
													"Type": "NodeText",
													"Data": "）。"
												}
											]
										}
									]
								},
								{
									"ID": "20210708003510-99nlb5i",
									"Type": "NodeListItem",
									"Data": "2",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 2,
										"Delimiter": 46,
										"Padding": 4,
										"Marker": "Mg==",
										"Num": 2
									},
									"Properties": {
										"id": "20210708003510-99nlb5i"
									},
									"Children": [
										{
											"ID": "20210708003510-tjedsa3",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708003510-tjedsa3"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "再判断"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "i \u0026lt;= n"
												},
												{
													"Type": "NodeText",
													"Data": "是否成立，也就是"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "2 \u0026lt;= 3"
												},
												{
													"Type": "NodeText",
													"Data": "是否成立，显然成立，然后执行处理语句，将"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "result"
												},
												{
													"Type": "NodeText",
													"Data": "的值设置为"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "3"
												},
												{
													"Type": "NodeText",
													"Data": "（"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "result + i"
												},
												{
													"Type": "NodeText",
													"Data": " = "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "1 + 2"
												},
												{
													"Type": "NodeText",
													"Data": "），"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "i"
												},
												{
													"Type": "NodeText",
													"Data": "的值设置为"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "3"
												},
												{
													"Type": "NodeText",
													"Data": "（"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "i + 1"
												},
												{
													"Type": "NodeText",
													"Data": " = "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "2 + 1"
												},
												{
													"Type": "NodeText",
													"Data": "）。"
												}
											]
										}
									]
								},
								{
									"ID": "20210708003510-ivdn3x5",
									"Type": "NodeListItem",
									"Data": "3",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 3,
										"Delimiter": 46,
										"Padding": 4,
										"Marker": "Mw==",
										"Num": 3
									},
									"Properties": {
										"id": "20210708003510-ivdn3x5"
									},
									"Children": [
										{
											"ID": "20210708003510-gfrb0vj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708003510-gfrb0vj"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "再判断"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "i \u0026lt;= n"
												},
												{
													"Type": "NodeText",
													"Data": "是否成立，也就是"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "3 \u0026lt;= 3"
												},
												{
													"Type": "NodeText",
													"Data": "是否成立，显然成立，然后执行处理语句，将"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "result"
												},
												{
													"Type": "NodeText",
													"Data": "的值设置为"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "6"
												},
												{
													"Type": "NodeText",
													"Data": "（"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "result + i"
												},
												{
													"Type": "NodeText",
													"Data": " = "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "3 + 3"
												},
												{
													"Type": "NodeText",
													"Data": "），"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "i"
												},
												{
													"Type": "NodeText",
													"Data": "的值设置为"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "4"
												},
												{
													"Type": "NodeText",
													"Data": "（"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "i + 1"
												},
												{
													"Type": "NodeText",
													"Data": " = "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "3 + 1"
												},
												{
													"Type": "NodeText",
													"Data": "）。"
												}
											]
										}
									]
								},
								{
									"ID": "20210708003510-j0y4j7a",
									"Type": "NodeListItem",
									"Data": "4",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 4,
										"Delimiter": 46,
										"Padding": 4,
										"Marker": "NA==",
										"Num": 4
									},
									"Properties": {
										"id": "20210708003510-j0y4j7a"
									},
									"Children": [
										{
											"ID": "20210708003510-twbs2sc",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708003510-twbs2sc"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "再判断"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "i \u0026lt;= n"
												},
												{
													"Type": "NodeText",
													"Data": "是否成立，也就是"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "4 \u0026lt;= 3"
												},
												{
													"Type": "NodeText",
													"Data": "是否成立，显然不成立，退出循环。"
												}
											]
										}
									]
								}
							]
						},
						{
							"ID": "20210708003510-8doqc21",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-8doqc21"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "所以最后返回的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "result"
								},
								{
									"Type": "NodeText",
									"Data": "的值就是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "6"
								},
								{
									"Type": "NodeText",
									"Data": "，也就是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "1"
								},
								{
									"Type": "NodeText",
									"Data": "、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "2"
								},
								{
									"Type": "NodeText",
									"Data": "、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "3"
								},
								{
									"Type": "NodeText",
									"Data": "这三个数的和。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-4rga1vk",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-4rga1vk"
					},
					"Children": [
						{
							"ID": "20210708003510-ho433de",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-ho433de"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "REPEAT"
								},
								{
									"Type": "NodeText",
									"Data": "循环语句"
								}
							]
						},
						{
							"ID": "20210708003510-tykd4fv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-tykd4fv"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "REPEAT"
								},
								{
									"Type": "NodeText",
									"Data": "循环语句和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "WHILE"
								},
								{
									"Type": "NodeText",
									"Data": "循环语句类似，只是形式上变了一下："
								}
							]
						},
						{
							"ID": "20210708003510-kpvvd1q",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-kpvvd1q"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "REPEAT\n    处理语句列表\nUNTIL 表达式 END REPEAT;\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-q5dfsvw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-q5dfsvw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "先执行处理语句，再判断"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "表达式"
								},
								{
									"Type": "NodeText",
									"Data": "是否成立，如果成立则退出循环，否则继续执行处理语句。与"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "WHILE"
								},
								{
									"Type": "NodeText",
									"Data": "循环语句不同的一点是：WHILE 循环语句先判断表达式的值，再执行处理语句，REPEAT 循环语句先执行处理语句，再判断表达式的值，所以至少执行一次处理语句，所以如果"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "sum_all"
								},
								{
									"Type": "NodeText",
									"Data": "函数用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "REPEAT"
								},
								{
									"Type": "NodeText",
									"Data": "循环改写，可以写成这样："
								}
							]
						},
						{
							"ID": "20210708003510-w0zr4n7",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-w0zr4n7"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "CREATE FUNCTION sum_all(n INT UNSIGNED)\nRETURNS INT\nBEGIN\n    DECLARE result INT DEFAULT 0;\n    DECLARE i INT DEFAULT 1;\n    REPEAT\n        SET result = result + i;\n        SET i = i + 1;\n    UNTIL i \u003e n END REPEAT;\n    RETURN result;\nEND\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-umq6n0f",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-umq6n0f"
					},
					"Children": [
						{
							"ID": "20210708003510-2817hfg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-2817hfg"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "LOOP"
								},
								{
									"Type": "NodeText",
									"Data": "循环语句"
								}
							]
						},
						{
							"ID": "20210708003510-o3vwe23",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-o3vwe23"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这只是另一种形式的循环语句："
								}
							]
						},
						{
							"ID": "20210708003510-ontkjqs",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-ontkjqs"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "LOOP\n    处理语句列表\nEND LOOP;\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-3yn80kh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-3yn80kh"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不过这种循环语句有一点比较奇特，它没有判断循环终止的条件？那这个循环语句怎么停止下来呢？其实可以把循环终止的条件写到处理语句列表中然后使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "RETURN"
								},
								{
									"Type": "NodeText",
									"Data": "语句直接让函数结束就可以达到停止循环的效果，比方说我们可以这样改写"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "sum_all"
								},
								{
									"Type": "NodeText",
									"Data": "函数："
								}
							]
						},
						{
							"ID": "20210708003510-pz4wheu",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-pz4wheu"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "CREATE FUNCTION sum_all(n INT UNSIGNED)\nRETURNS INT\nBEGIN\n    DECLARE result INT DEFAULT 0;\n    DECLARE i INT DEFAULT 1;\n    LOOP\n        IF i \u003e n THEN\n            RETURN result;\n        END IF;\n        SET result = result + i;\n        SET i = i + 1;\n    END LOOP;\nEND\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-6swyswx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-6swyswx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果我们仅仅想结束循环，而不是使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "RETURN"
								},
								{
									"Type": "NodeText",
									"Data": "语句直接将函数返回，那么可以使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "LEAVE"
								},
								{
									"Type": "NodeText",
									"Data": "语句。不过使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "LEAVE"
								},
								{
									"Type": "NodeText",
									"Data": "时，需要先在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "LOOP"
								},
								{
									"Type": "NodeText",
									"Data": "语句前边放置一个所谓的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "标记"
								},
								{
									"Type": "NodeText",
									"Data": "，比方说我们使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "LEAVE"
								},
								{
									"Type": "NodeText",
									"Data": "语句再改写"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "sum_all"
								},
								{
									"Type": "NodeText",
									"Data": "函数："
								}
							]
						},
						{
							"ID": "20210708003510-0odfdnt",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-0odfdnt"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "CREATE FUNCTION sum_all(n INT UNSIGNED)\nRETURNS INT\nBEGIN\n    DECLARE result INT DEFAULT 0;\n    DECLARE i INT DEFAULT 1;\n    flag:LOOP\n        IF i \u003e n THEN\n            LEAVE flag;\n        END IF;\n        SET result = result + i;\n        SET i = i + 1;\n    END LOOP flag;\n    RETURN result;\nEND\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-2u0bdiz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-2u0bdiz"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可以看到，我们在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "LOOP"
								},
								{
									"Type": "NodeText",
									"Data": "语句前加了一个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "flag:"
								},
								{
									"Type": "NodeText",
									"Data": "这样的东东，相当于为这个循环打了一个名叫"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "flag"
								},
								{
									"Type": "NodeText",
									"Data": "的标记，然后在对应的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "END LOOP"
								},
								{
									"Type": "NodeText",
									"Data": "语句后边也把这个标记名"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "flag"
								},
								{
									"Type": "NodeText",
									"Data": "给写上了。在存储函数的函数体中使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "LEAVE flag"
								},
								{
									"Type": "NodeText",
									"Data": "语句来结束"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "flag"
								},
								{
									"Type": "NodeText",
									"Data": "这个标记所代表的循环。"
								}
							]
						},
						{
							"ID": "20210708003510-ok1yfaz",
							"Type": "NodeBlockquote",
							"Properties": {
								"id": "20210708003510-ok1yfaz"
							},
							"Children": [
								{
									"Type": "NodeBlockquoteMarker",
									"Data": "\u003e "
								},
								{
									"ID": "20210708003510-pwk3nkc",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20210708003510-pwk3nkc"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "小贴士： 其实也可以在 BEGIN ... END、REPEAT 和 WHILE 这些语句上打标记，标记主要是为了在这些语句发生嵌套时可以跳到指定的语句中使用的。"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-0fuuxnw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210708003510-0fuuxnw"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "存储过程"
				}
			]
		},
		{
			"ID": "20210708003510-v1txr7v",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-v1txr7v"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "创建存储过程"
				}
			]
		},
		{
			"ID": "20210708003510-kvbbo20",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-kvbbo20"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储函数"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储过程"
				},
				{
					"Type": "NodeText",
					"Data": "都属于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储例程"
				},
				{
					"Type": "NodeText",
					"Data": "，都是对某些语句的一个封装。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储函数"
				},
				{
					"Type": "NodeText",
					"Data": "侧重于执行这些语句并返回一个值，而"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储过程"
				},
				{
					"Type": "NodeText",
					"Data": "更侧重于单纯的去执行这些语句。先看一下"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储过程"
				},
				{
					"Type": "NodeText",
					"Data": "的定义语句："
				}
			]
		},
		{
			"ID": "20210708003510-gumi2hf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-gumi2hf"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE PROCEDURE 存储过程名称([参数列表])\nBEGIN\n    需要执行的语句\nEND\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-tcej7ju",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-tcej7ju"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "与"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储函数"
				},
				{
					"Type": "NodeText",
					"Data": "最直观的不同点就是，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储过程"
				},
				{
					"Type": "NodeText",
					"Data": "的定义不需要声明"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "返回值类型"
				},
				{
					"Type": "NodeText",
					"Data": "。我们先定义一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储过程"
				},
				{
					"Type": "NodeText",
					"Data": "看看："
				}
			]
		},
		{
			"ID": "20210708003510-qjlzb43",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-qjlzb43"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e delimiter $\nmysql\u003e CREATE PROCEDURE t1_operation(\n    -\u003e     m1_value INT,\n    -\u003e     n1_value CHAR(1)\n    -\u003e )\n    -\u003e BEGIN\n    -\u003e     SELECT * FROM t1;\n    -\u003e     INSERT INTO t1(m1, n1) VALUES(m1_value, n1_value);\n    -\u003e     SELECT * FROM t1;\n    -\u003e END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e delimiter ;\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-o9fnov6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-o9fnov6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们建立了一个名叫"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "t1_operation"
				},
				{
					"Type": "NodeText",
					"Data": "的存储过程，它接收两个参数，一个是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "INT"
				},
				{
					"Type": "NodeText",
					"Data": "类型的，一个是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CHAR(1)"
				},
				{
					"Type": "NodeText",
					"Data": "类型的。这个存储过程做了 3 件事儿，一件是查询一下"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "t1"
				},
				{
					"Type": "NodeText",
					"Data": "表中的数据，第二件是根据接收的参数来向"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "t1"
				},
				{
					"Type": "NodeText",
					"Data": "表中插入一条语句，第三件是再次查询一下"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "t1"
				},
				{
					"Type": "NodeText",
					"Data": "表中的数据。"
				}
			]
		},
		{
			"ID": "20210708003510-ypqg0wk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-ypqg0wk"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "存储过程的调用"
				}
			]
		},
		{
			"ID": "20210708003510-4iyuzez",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-4iyuzez"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储函数"
				},
				{
					"Type": "NodeText",
					"Data": "执行语句并返回一个值，所以常用在表达式中。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储过程"
				},
				{
					"Type": "NodeText",
					"Data": "偏向于执行某些语句，并不能用在表达式中，我们需要显式的使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CALL"
				},
				{
					"Type": "NodeText",
					"Data": "语句来调用一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储过程"
				},
				{
					"Type": "NodeText",
					"Data": "："
				}
			]
		},
		{
			"ID": "20210708003510-xdkx3oc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-xdkx3oc"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CALL 存储过程([参数列表]);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-rae2tn1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-rae2tn1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比方说我们调用一下"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "t1_operation"
				},
				{
					"Type": "NodeText",
					"Data": "存储过程可以这么写："
				}
			]
		},
		{
			"ID": "20210708003510-lvbzhgz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-lvbzhgz"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e CALL t1_operation(4, 'd');\n+------+------+\n| m1   | n1   |\n+------+------+\n|    1 | a    |\n|    2 | b    |\n|    3 | c    |\n+------+------+\n3 rows in set (0.00 sec)\n\n+------+------+\n| m1   | n1   |\n+------+------+\n|    1 | a    |\n|    2 | b    |\n|    3 | c    |\n|    4 | d    |\n+------+------+\n4 rows in set (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-2t8xim1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-2t8xim1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从执行结果中可以看到，存储过程在执行中产生的所有结果集，全部将会被显示到客户端。"
				}
			]
		},
		{
			"ID": "20210708003510-m8nfezy",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20210708003510-m8nfezy"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e "
				},
				{
					"ID": "20210708003510-bbbw447",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210708003510-bbbw447"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "小贴士： 只有查询语句才会产生结果集，其他语句是不产生结果集的。"
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-3qca9i2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-3qca9i2"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "查看和删除存储过程"
				}
			]
		},
		{
			"ID": "20210708003510-cs078t0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-cs078t0"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "与"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储函数"
				},
				{
					"Type": "NodeText",
					"Data": "类似，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储过程"
				},
				{
					"Type": "NodeText",
					"Data": "也有相似的查看和删除语句，我们下边只列举一下相关语句，就不举例子了。"
				}
			]
		},
		{
			"ID": "20210708003510-gjrwg7y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-gjrwg7y"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看当前数据库中创建的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储过程"
				},
				{
					"Type": "NodeText",
					"Data": "都有哪些的语句："
				}
			]
		},
		{
			"ID": "20210708003510-39krt9z",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-39krt9z"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SHOW PROCEDURE STATUS [LIKE 需要匹配的存储过程名称]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-a97m5qz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-a97m5qz"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看某个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储过程"
				},
				{
					"Type": "NodeText",
					"Data": "具体是怎么定义的语句："
				}
			]
		},
		{
			"ID": "20210708003510-nkheojd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-nkheojd"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SHOW CREATE PROCEDURE 存储过程名称\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-q0o0bau",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-q0o0bau"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "删除"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储过程"
				},
				{
					"Type": "NodeText",
					"Data": "的语句："
				}
			]
		},
		{
			"ID": "20210708003510-uxwndo7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-uxwndo7"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "DROP PROCEDURE 存储过程名称\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-gyxakr7",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-gyxakr7"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "存储过程中的语句"
				}
			]
		},
		{
			"ID": "20210708003510-ea2q2i6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-ea2q2i6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上边在唠叨"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储函数"
				},
				{
					"Type": "NodeText",
					"Data": "中使用到的各种语句，包括变量的使用、判断、循环结构都可以被用在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储过程"
				},
				{
					"Type": "NodeText",
					"Data": "中，这里就不再赘述了。"
				}
			]
		},
		{
			"ID": "20210708003510-qt3hvey",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-qt3hvey"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "存储过程的参数前缀"
				}
			]
		},
		{
			"ID": "20210708003510-139gfk4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-139gfk4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储函数"
				},
				{
					"Type": "NodeText",
					"Data": "强大的一点是，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储过程"
				},
				{
					"Type": "NodeText",
					"Data": "在定义参数的时候可以选择添加一些前缀，就像是这个样子："
				}
			]
		},
		{
			"ID": "20210708003510-v3x0rbe",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-v3x0rbe"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "参数类型 [IN | OUT | INOUT] 参数名 数据类型\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-gnnx672",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-gnnx672"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到可选的前缀有下边 3 种："
				}
			]
		},
		{
			"ID": "20210708003510-zwm97iy",
			"Type": "NodeTable",
			"Data": "| 前缀    | 实际参数是否必须是变量 | 描述                                                                                                          |\n| ------- | ---------------------- | ------------------------------------------------------------------------------------------------------------- |\n| `IN`    | 否                     | 用于调用者向存储过程传递数据，如果 IN 参数在过程中被修改，调用者不可见。                                      |\n| `OUT`   | 是                     | 用于把存储过程运行过程中产生的数据赋值给 OUT 参数，存储过程执行结束后，调用者可以访问到 OUT 参数。            |\n| `INOUT` | 是                     | 综合`IN`和`OUT`的特点，既可以用于调用者向存储过程传递数据，也可以用于存放存储过程中产生的数据以供调用者使用。 |",
			"TableAligns": [
				0,
				0,
				0
			],
			"Properties": {
				"id": "20210708003510-zwm97iy"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "前缀"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "实际参数是否必须是变量"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "IN"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "否"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于调用者向存储过程传递数据，如果 IN 参数在过程中被修改，调用者不可见。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OUT"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "是"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于把存储过程运行过程中产生的数据赋值给 OUT 参数，存储过程执行结束后，调用者可以访问到 OUT 参数。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "INOUT"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "是"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "综合"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "IN"
								},
								{
									"Type": "NodeText",
									"Data": "和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OUT"
								},
								{
									"Type": "NodeText",
									"Data": "的特点，既可以用于调用者向存储过程传递数据，也可以用于存放存储过程中产生的数据以供调用者使用。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-xf3zbn5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-xf3zbn5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这么直接描述有些生硬哈，我们来举例子分别仔细分析一下："
				}
			]
		},
		{
			"ID": "20210708003510-qeznzlj",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708003510-qeznzlj"
			},
			"Children": [
				{
					"ID": "20210708003510-9zr347d",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-9zr347d"
					},
					"Children": [
						{
							"ID": "20210708003510-750rr8u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-750rr8u"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "IN"
								},
								{
									"Type": "NodeText",
									"Data": "参数"
								}
							]
						},
						{
							"ID": "20210708003510-6pg4q1o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-6pg4q1o"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "先定义一个参数前缀是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "IN"
								},
								{
									"Type": "NodeText",
									"Data": "的存储过程"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "p_in"
								},
								{
									"Type": "NodeText",
									"Data": "："
								}
							]
						},
						{
							"ID": "20210708003510-gi7bqol",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-gi7bqol"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "mysql\u003e delimiter $\nmysql\u003e CREATE PROCEDURE p_in (\n-\u003e     IN arg INT\n-\u003e )\n-\u003e BEGIN\n-\u003e     SELECT arg;\n-\u003e     SET arg = 123;\n-\u003e END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e delimiter ;\nmysql\u003e\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-qc6lq31",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-qc6lq31"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "p_in"
								},
								{
									"Type": "NodeText",
									"Data": "存储过程只有一个参数"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "arg"
								},
								{
									"Type": "NodeText",
									"Data": "，它的前缀是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "IN"
								},
								{
									"Type": "NodeText",
									"Data": "。这个存储过程实际执行两个语句，第一个语句是用来读取参数"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "arg"
								},
								{
									"Type": "NodeText",
									"Data": "的值，第二个语句是给参数"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "arg"
								},
								{
									"Type": "NodeText",
									"Data": "赋值。我们调用一下"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "p_in"
								},
								{
									"Type": "NodeText",
									"Data": "："
								}
							]
						},
						{
							"ID": "20210708003510-35fmmsq",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-35fmmsq"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "mysql\u003e SET @a = 1;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e CALL p_in(@a);\n+------+\n| arg  |\n+------+\n|    1 |\n+------+\n1 row in set (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e SELECT @a;\n+------+\n| @a   |\n+------+\n|    1 |\n+------+\n1 row in set (0.00 sec)\n\nmysql\u003e\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-pbohyqw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-pbohyqw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们定义了一个变量"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "a"
								},
								{
									"Type": "NodeText",
									"Data": "并把整数"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "1"
								},
								{
									"Type": "NodeText",
									"Data": "赋值赋值给它，因为它是在客户端定义的，所以需要加"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "@"
								},
								{
									"Type": "NodeText",
									"Data": "前缀，然后把它当作参数传给"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "p_in"
								},
								{
									"Type": "NodeText",
									"Data": "存储过程。从结果中可以看出，第一个读取语句被成功执行，虽然第二个语句没有报错，但是在存储过程执行完毕后，再次查看变量"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "a"
								},
								{
									"Type": "NodeText",
									"Data": "的值却并没有改变，这也就是说：IN 参数只能被用于读取，对它赋值是不会被调用者看到的。"
								}
							]
						},
						{
							"ID": "20210708003510-n87xsnv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-n87xsnv"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "另外，因为我们只是想在存储过程执行中使用 IN 参数，并不需要把执行过程中产生的数据存储到它里边，所以其实在调用存储过程时，将常量作为参数也是可以的，比如这样："
								}
							]
						},
						{
							"ID": "20210708003510-ou143l8",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-ou143l8"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "mysql\u003e CALL p_in(1);\n+------+\n| arg  |\n+------+\n|    1 |\n+------+\n1 row in set (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-mqy5khe",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-mqy5khe"
					},
					"Children": [
						{
							"ID": "20210708003510-1z491hg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-1z491hg"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OUT"
								},
								{
									"Type": "NodeText",
									"Data": "参数"
								}
							]
						},
						{
							"ID": "20210708003510-9n3n52y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-9n3n52y"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "先定义一个前缀是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OUT"
								},
								{
									"Type": "NodeText",
									"Data": "的存储过程"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "p_out"
								},
								{
									"Type": "NodeText",
									"Data": "："
								}
							]
						},
						{
							"ID": "20210708003510-u0odggx",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-u0odggx"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "mysql\u003e delimiter $\nmysql\u003e CREATE PROCEDURE p_out (\n-\u003e     OUT arg INT\n-\u003e )\n-\u003e BEGIN\n-\u003e     SELECT arg;\n-\u003e     SET arg = 123;\n-\u003e END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e delimiter ;\nmysql\u003e\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-ty5icva",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-ty5icva"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "p_out"
								},
								{
									"Type": "NodeText",
									"Data": "存储过程只有一个参数"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "arg"
								},
								{
									"Type": "NodeText",
									"Data": "，它的前缀是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OUT"
								},
								{
									"Type": "NodeText",
									"Data": "，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "p_out"
								},
								{
									"Type": "NodeText",
									"Data": "存储过程也有两个语句，一个用于读取参数"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "arg"
								},
								{
									"Type": "NodeText",
									"Data": "的值，另一个用于为参数"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "arg"
								},
								{
									"Type": "NodeText",
									"Data": "赋值，我们调用一下"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "p_out"
								},
								{
									"Type": "NodeText",
									"Data": "："
								}
							]
						},
						{
							"ID": "20210708003510-wuue8xv",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-wuue8xv"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "mysql\u003e SET @b = 2;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e CALL p_out(@b);\n+------+\n| arg  |\n+------+\n| NULL |\n+------+\n1 row in set (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e SELECT @b;\n+------+\n| @b   |\n+------+\n|  123 |\n+------+\n1 row in set (0.00 sec)\n\nmysql\u003e\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-dd0tsg6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-dd0tsg6"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们定义了一个变量"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "b"
								},
								{
									"Type": "NodeText",
									"Data": "并把整数"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "2"
								},
								{
									"Type": "NodeText",
									"Data": "赋值赋值给它，然后把它当作参数传给"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "p_out"
								},
								{
									"Type": "NodeText",
									"Data": "存储过程。从结果中可以看出，第一个读取语句并没有获取到参数的值，也就是说 OUT 参数的值默认为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "NULL"
								},
								{
									"Type": "NodeText",
									"Data": "。在存储过程执行完毕之后，再次读取变量"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "b"
								},
								{
									"Type": "NodeText",
									"Data": "的值，发现它的值已经被设置成"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "123"
								},
								{
									"Type": "NodeText",
									"Data": "，说明在过程中对该变量的赋值对调用者是可见的！这也就是说：OUT 参数只能用于赋值，对它赋值是可以被调用者看到的。"
								}
							]
						},
						{
							"ID": "20210708003510-fctxmpc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-fctxmpc"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "另外，由于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OUT"
								},
								{
									"Type": "NodeText",
									"Data": "参数只是为了用于将存储过程执行过程中产生的数据赋值给它后交给调用者查看，那么在调用存储过程时，实际的参数就不允许是常量！"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-h39k1p6",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-h39k1p6"
					},
					"Children": [
						{
							"ID": "20210708003510-o657ycj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-o657ycj"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "INOUT"
								},
								{
									"Type": "NodeText",
									"Data": "参数"
								}
							]
						},
						{
							"ID": "20210708003510-xkq2582",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-xkq2582"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "知道了"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "IN"
								},
								{
									"Type": "NodeText",
									"Data": "参数和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OUT"
								},
								{
									"Type": "NodeText",
									"Data": "参数的意思，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "INOUT"
								},
								{
									"Type": "NodeText",
									"Data": "参数也就明白了，这种参数既可以在存储过程中被读取，也可以被赋值后被调用者看到，所以要求在调用存储过程时实际的参数必须是一个变量，不然还怎么赋值啊！"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "INOUT"
								},
								{
									"Type": "NodeText",
									"Data": "参数类型就不具体举例子了，大家可以自己试试哈～"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-15l4842",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-15l4842"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需要注意的是，如果我们不写明参数前缀的话，默认的前缀是 IN！"
				}
			]
		},
		{
			"ID": "20210708003510-p53n4gk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-p53n4gk"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由于存储过程可以传入多个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "OUT"
				},
				{
					"Type": "NodeText",
					"Data": "或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "INOUT"
				},
				{
					"Type": "NodeText",
					"Data": "类型的参数，所以我们可以在一个存储过程中获得多个结果，比如这样："
				}
			]
		},
		{
			"ID": "20210708003510-dcd8hf6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-dcd8hf6"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e delimiter $\nmysql\u003e CREATE PROCEDURE get_score_data(\n    -\u003e     OUT max_score DOUBLE,\n    -\u003e     OUT min_score DOUBLE,\n    -\u003e     OUT avg_score DOUBLE,\n    -\u003e     s VARCHAR(100)\n    -\u003e )\n    -\u003e BEGIN\n    -\u003e     SELECT MAX(score), MIN(score), AVG(score) FROM student_score WHERE subject = s INTO max_score, min_score, avg_score;\n    -\u003e END $\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql\u003e delimiter ;\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-gf4ekna",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-gf4ekna"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们定义的这个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get_score_data"
				},
				{
					"Type": "NodeText",
					"Data": "存储过程接受 4 个参数，前三个参数都是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "OUT"
				},
				{
					"Type": "NodeText",
					"Data": "参数，第四个参数没写前缀，默认就是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "IN"
				},
				{
					"Type": "NodeText",
					"Data": "参数。存储过程的内容是将指定学科的最高分、最低分、平均分分别赋值给三个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "OUT"
				},
				{
					"Type": "NodeText",
					"Data": "参数。在这个存储过程执行完之后，我们可以通过访问这几个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "OUT"
				},
				{
					"Type": "NodeText",
					"Data": "参数来获得相应的最高分、最低分以及平均分："
				}
			]
		},
		{
			"ID": "20210708003510-nk8cgyk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-nk8cgyk"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e CALL get_score_data(@a, @b, @c, '母猪的产后护理');\nQuery OK, 1 row affected (0.01 sec)\n\nmysql\u003e SELECT @a, @b, @c;\n+------+------+------+\n| @a   | @b   | @c   |\n+------+------+------+\n|  100 |   55 |   73 |\n+------+------+------+\n1 row in set (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-5p7fpra",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-5p7fpra"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "存储过程和存储函数的不同点"
				}
			]
		},
		{
			"ID": "20210708003510-1jnqqcn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-1jnqqcn"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储过程"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "存储函数"
				},
				{
					"Type": "NodeText",
					"Data": "非常类似，我们列举几个它们的不同点以加深大家的对这两者区别的印象："
				}
			]
		},
		{
			"ID": "20210708003510-f6cfppd",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708003510-f6cfppd"
			},
			"Children": [
				{
					"ID": "20210708003510-3l0joek",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-3l0joek"
					},
					"Children": [
						{
							"ID": "20210708003510-soxvkz7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-soxvkz7"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "存储函数在定义时需要显式用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "RETURNS"
								},
								{
									"Type": "NodeText",
									"Data": "语句标明返回的数据类型，而且在函数体中必须使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "RETURN"
								},
								{
									"Type": "NodeText",
									"Data": "语句来显式指定返回的值，存储过程不需要。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-g9fvbaj",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-g9fvbaj"
					},
					"Children": [
						{
							"ID": "20210708003510-4a91huf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-4a91huf"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "存储函数只支持"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "IN"
								},
								{
									"Type": "NodeText",
									"Data": "参数，而存储过程支持"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "IN"
								},
								{
									"Type": "NodeText",
									"Data": "参数、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OUT"
								},
								{
									"Type": "NodeText",
									"Data": "参数、和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "INOUT"
								},
								{
									"Type": "NodeText",
									"Data": "参数。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-ccyajb9",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-ccyajb9"
					},
					"Children": [
						{
							"ID": "20210708003510-qled48w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-qled48w"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "存储函数只能返回一个值，而存储过程可以通过设置多个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OUT"
								},
								{
									"Type": "NodeText",
									"Data": "参数或者"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "INOUT"
								},
								{
									"Type": "NodeText",
									"Data": "参数来返回多个结果。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-kvreg5k",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-kvreg5k"
					},
					"Children": [
						{
							"ID": "20210708003510-lldbvai",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-lldbvai"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "存储函数执行过程中产生的结果集并不会被显示到客户端，而存储过程执行过程中产生的结果集会被显示到客户端。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-2lzwpjz",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-2lzwpjz"
					},
					"Children": [
						{
							"ID": "20210708003510-769ng9j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-769ng9j"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "存储函数直接在表达式中调用，而存储过程只能通过"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "CALL"
								},
								{
									"Type": "NodeText",
									"Data": "语句来显式调用。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-6od5rqb",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210708003510-6od5rqb"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "触发器"
				}
			]
		},
		{
			"ID": "20210708003510-t0zr5ef",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-t0zr5ef"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "的过程中可能会有下边这些需求："
				}
			]
		},
		{
			"ID": "20210708003510-87ze784",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708003510-87ze784"
			},
			"Children": [
				{
					"ID": "20210708003510-2gm1mhv",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-2gm1mhv"
					},
					"Children": [
						{
							"ID": "20210708003510-w3giz31",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-w3giz31"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在向"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "t1"
								},
								{
									"Type": "NodeText",
									"Data": "表插入或更新数据之前对自动对数据进行校验，要求"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "m1"
								},
								{
									"Type": "NodeText",
									"Data": "列的值必须在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "1~10"
								},
								{
									"Type": "NodeText",
									"Data": "之间，校验规则如下："
								}
							]
						},
						{
							"ID": "20210708003510-4vs1cnq",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210708003510-4vs1cnq"
							},
							"Children": [
								{
									"ID": "20210708003510-tdx47ju",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708003510-tdx47ju"
									},
									"Children": [
										{
											"ID": "20210708003510-39yx07b",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708003510-39yx07b"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果插入的记录的"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "m1"
												},
												{
													"Type": "NodeText",
													"Data": "列的值小于"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "1"
												},
												{
													"Type": "NodeText",
													"Data": "，则按"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "1"
												},
												{
													"Type": "NodeText",
													"Data": "插入。"
												}
											]
										}
									]
								},
								{
									"ID": "20210708003510-3eeyn4g",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210708003510-3eeyn4g"
									},
									"Children": [
										{
											"ID": "20210708003510-4zkahok",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210708003510-4zkahok"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "m1"
												},
												{
													"Type": "NodeText",
													"Data": "列的值大于"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "10"
												},
												{
													"Type": "NodeText",
													"Data": "，则按"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "10"
												},
												{
													"Type": "NodeText",
													"Data": "插入。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-nhjhcf2",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-nhjhcf2"
					},
					"Children": [
						{
							"ID": "20210708003510-vwak1ns",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-vwak1ns"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在向"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "t1"
								},
								{
									"Type": "NodeText",
									"Data": "表中插入记录之后自动把这条记录插入到"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "t2"
								},
								{
									"Type": "NodeText",
									"Data": "表。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-rd76ij3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-rd76ij3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "也就是我们在对表中的记录做增、删、改操作前和后都可能需要让"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "服务器自动执行一些额外的语句，这个就是所谓的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "触发器"
				},
				{
					"Type": "NodeText",
					"Data": "的应用场景。"
				}
			]
		},
		{
			"ID": "20210708003510-m1ijzv8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-m1ijzv8"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "创建触发器"
				}
			]
		},
		{
			"ID": "20210708003510-gzanb1s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-gzanb1s"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们看一下定义"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "触发器"
				},
				{
					"Type": "NodeText",
					"Data": "的语句："
				}
			]
		},
		{
			"ID": "20210708003510-721gcf1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-721gcf1"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE TRIGGER 触发器名\n{BEFORE|AFTER}\n{INSERT|DELETE|UPDATE}\nON 表名\nFOR EACH ROW\nBEGIN\n    触发器内容\nEND\n小贴士：\n\n由大括号`{}`包裹并且内部用竖线`|`分隔的语句表示必须在给定的选项中选取一个值，比如`{BEFORE|AFTER}`表示必须在`BEFORE`、`AFTER`这两个之间选取一个。\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-cdqcmkx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-cdqcmkx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "{BEFORE|AFTER}"
				},
				{
					"Type": "NodeText",
					"Data": "表示触发器内容执行的时机，它们的含义如下："
				}
			]
		},
		{
			"ID": "20210708003510-6qe88eh",
			"Type": "NodeTable",
			"Data": "| 名称     | 描述                                           |\n| -------- | ---------------------------------------------- |\n| `BEFORE` | 表示在具体的语句执行之前就开始执行触发器的内容 |\n| `AFTER`  | 表示在具体的语句执行之后才开始执行触发器的内容 |",
			"TableAligns": [
				0,
				0
			],
			"Properties": {
				"id": "20210708003510-6qe88eh"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "名称"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BEFORE"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "表示在具体的语句执行之前就开始执行触发器的内容"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"TableAligns": [
						0,
						0
					],
					"Children": [
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "AFTER"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Children": [
								{
									"Type": "NodeText",
									"Data": "表示在具体的语句执行之后才开始执行触发器的内容"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-e9jbwzu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-e9jbwzu"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "{INSERT|DELETE|UPDATE}"
				},
				{
					"Type": "NodeText",
					"Data": "表示具体的语句，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "中目前只支持对"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "INSERT"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DELETE"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "UPDATE"
				},
				{
					"Type": "NodeText",
					"Data": "这三种类型的语句设置触发器。"
				}
			]
		},
		{
			"ID": "20210708003510-v5v2y1p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-v5v2y1p"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FOR EACH ROW BEGIN ... END"
				},
				{
					"Type": "NodeText",
					"Data": "表示对具体语句影响的每一条记录都执行我们自定义的触发器内容："
				}
			]
		},
		{
			"ID": "20210708003510-qwlcd01",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708003510-qwlcd01"
			},
			"Children": [
				{
					"ID": "20210708003510-1rlfd17",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-1rlfd17"
					},
					"Children": [
						{
							"ID": "20210708003510-kpu6jrk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-kpu6jrk"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "INSERT"
								},
								{
									"Type": "NodeText",
									"Data": "语句来说，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "FOR EACH ROW"
								},
								{
									"Type": "NodeText",
									"Data": "影响的记录就是我们准备插入的那些新记录。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-8gaa14g",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-8gaa14g"
					},
					"Children": [
						{
							"ID": "20210708003510-n2tethn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-n2tethn"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "DELETE"
								},
								{
									"Type": "NodeText",
									"Data": "语句和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "UPDATE"
								},
								{
									"Type": "NodeText",
									"Data": "语句来说，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "FOR EACH ROW"
								},
								{
									"Type": "NodeText",
									"Data": "影响的记录就是符合"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "WHERE"
								},
								{
									"Type": "NodeText",
									"Data": "条件的那些记录（如果语句中没有"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "WHERE"
								},
								{
									"Type": "NodeText",
									"Data": "条件，那就是代表全部的记录）。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-o2wi1cw",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20210708003510-o2wi1cw"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e "
				},
				{
					"ID": "20210708003510-w344zlp",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210708003510-w344zlp"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "小贴士： 如果触发器内容只包含一条语句，那也可以省略 BEGN、END 这两个词儿。"
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-gge78qv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-gge78qv"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "服务器会对某条语句影响的所有记录依次调用我们自定义的触发器内容，所以针对每一条受影响的记录，我们需要一种访问该记录中的内容的方式，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "提供了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "NEW"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "OLD"
				},
				{
					"Type": "NodeText",
					"Data": "两个单词来分别代表新记录和旧记录，它们在不同语句中的含义不同："
				}
			]
		},
		{
			"ID": "20210708003510-jfjhhvg",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708003510-jfjhhvg"
			},
			"Children": [
				{
					"ID": "20210708003510-epsi0wn",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-epsi0wn"
					},
					"Children": [
						{
							"ID": "20210708003510-61eyb5z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-61eyb5z"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "INSERT"
								},
								{
									"Type": "NodeText",
									"Data": "语句设置的触发器来说，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "NEW"
								},
								{
									"Type": "NodeText",
									"Data": "代表准备插入的记录，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OLD"
								},
								{
									"Type": "NodeText",
									"Data": "无效。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-2vf1upe",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-2vf1upe"
					},
					"Children": [
						{
							"ID": "20210708003510-yfzigj5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-yfzigj5"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "DELETE"
								},
								{
									"Type": "NodeText",
									"Data": "语句设置的触发器来说，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OLD"
								},
								{
									"Type": "NodeText",
									"Data": "代表删除前的记录，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "NEW"
								},
								{
									"Type": "NodeText",
									"Data": "无效。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-xz3g74h",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-xz3g74h"
					},
					"Children": [
						{
							"ID": "20210708003510-yltwsut",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-yltwsut"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "UPDATE"
								},
								{
									"Type": "NodeText",
									"Data": "语句设置的触发器来说，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "NEW"
								},
								{
									"Type": "NodeText",
									"Data": "代表修改后的记录，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OLD"
								},
								{
									"Type": "NodeText",
									"Data": "代表修改前的记录。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-08i2uvo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-08i2uvo"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在我们可以正式定义一个触发器了："
				}
			]
		},
		{
			"ID": "20210708003510-76ywa24",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-76ywa24"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e delimiter $\nmysql\u003e CREATE TRIGGER bi_t1\n    -\u003e BEFORE INSERT ON t1\n    -\u003e FOR EACH ROW\n    -\u003e BEGIN\n    -\u003e     IF NEW.m1 \u003c 1 THEN\n    -\u003e         SET NEW.m1 = 1;\n    -\u003e     ELSEIF NEW.m1 \u003e 10 THEN\n    -\u003e         SET NEW.m1 = 10;\n    -\u003e     END IF;\n    -\u003e END $\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql\u003e delimiter ;\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-qkmwmyo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-qkmwmyo"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们对"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "t1"
				},
				{
					"Type": "NodeText",
					"Data": "表定义了一个名叫"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bi_t1"
				},
				{
					"Type": "NodeText",
					"Data": "的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "触发器"
				},
				{
					"Type": "NodeText",
					"Data": "，它的意思就是在对"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "t1"
				},
				{
					"Type": "NodeText",
					"Data": "表插入新记录之前，对准备插入的每一条记录都会执行"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BEGIN ... END"
				},
				{
					"Type": "NodeText",
					"Data": "之间的语句，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "NEW.列名"
				},
				{
					"Type": "NodeText",
					"Data": "表示当前待插入记录指定列的值。现在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "t1"
				},
				{
					"Type": "NodeText",
					"Data": "表中一共有 4 条记录："
				}
			]
		},
		{
			"ID": "20210708003510-l51444k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-l51444k"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SELECT * FROM t1;\n+------+------+\n| m1   | n1   |\n+------+------+\n|    1 | a    |\n|    2 | b    |\n|    3 | c    |\n|    4 | d    |\n+------+------+\n4 rows in set (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-zpp6qtj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-zpp6qtj"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们现在执行一下插入语句并再次查看一下"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "t1"
				},
				{
					"Type": "NodeText",
					"Data": "表的内容："
				}
			]
		},
		{
			"ID": "20210708003510-qj202fp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-qj202fp"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e INSERT INTO t1(m1, n1) VALUES(5, 'e'), (100, 'z');\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql\u003e SELECT * FROM t1;\n+------+------+\n| m1   | n1   |\n+------+------+\n|    1 | a    |\n|    2 | b    |\n|    3 | c    |\n|    4 | d    |\n|    5 | e    |\n|   10 | z    |\n+------+------+\n6 rows in set (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-y5ttg7c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-y5ttg7c"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "INSERT"
				},
				{
					"Type": "NodeText",
					"Data": "语句影响的记录有两条，分别是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "(5, 'e')"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "(100, 'z')"
				},
				{
					"Type": "NodeText",
					"Data": "，这两条记录将分别执行我们自定义的触发器内容。很显然"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "(5, 'e')"
				},
				{
					"Type": "NodeText",
					"Data": "被成功的插入到了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "t1"
				},
				{
					"Type": "NodeText",
					"Data": "表中，而"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "(100, 'z')"
				},
				{
					"Type": "NodeText",
					"Data": "插入到表中后却变成了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "(10, 'z')"
				},
				{
					"Type": "NodeText",
					"Data": "，这个就说明我们的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bi_t1"
				},
				{
					"Type": "NodeText",
					"Data": "触发器生效了！"
				}
			]
		},
		{
			"ID": "20210708003510-4q2jetx",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20210708003510-4q2jetx"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e "
				},
				{
					"ID": "20210708003510-is79nw7",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210708003510-is79nw7"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "小贴士： 我们上边定义的触发器名"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "bi_t1"
						},
						{
							"Type": "NodeText",
							"Data": "的"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "bi"
						},
						{
							"Type": "NodeText",
							"Data": "是"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "before insert"
						},
						{
							"Type": "NodeText",
							"Data": "的首字母缩写，"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "t1"
						},
						{
							"Type": "NodeText",
							"Data": "是表名。虽然对于触发器的命名并没有什么特殊的要求，但是习惯上还是建议大家把它定义我上边例子中的形式，也就是"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "bi_表名"
						},
						{
							"Type": "NodeText",
							"Data": "、"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "bd_表名"
						},
						{
							"Type": "NodeText",
							"Data": "、"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "bu_表名"
						},
						{
							"Type": "NodeText",
							"Data": "、"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "ai_表名"
						},
						{
							"Type": "NodeText",
							"Data": "、"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "ad_表名"
						},
						{
							"Type": "NodeText",
							"Data": "、"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "au_表名"
						},
						{
							"Type": "NodeText",
							"Data": "的形式。"
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-92svol1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-92svol1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上边只是举了一个对"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "INSERT"
				},
				{
					"Type": "NodeText",
					"Data": "语句设置"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BEFORE"
				},
				{
					"Type": "NodeText",
					"Data": "触发器的例子，对"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DELETE"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "UPDATE"
				},
				{
					"Type": "NodeText",
					"Data": "操作设置"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BEFORE"
				},
				{
					"Type": "NodeText",
					"Data": "或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AFTER"
				},
				{
					"Type": "NodeText",
					"Data": "触发器的过程是类似的，就不赘述了。"
				}
			]
		},
		{
			"ID": "20210708003510-8r2ka1v",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-8r2ka1v"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "查看和删除触发器"
				}
			]
		},
		{
			"ID": "20210708003510-09lo33g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-09lo33g"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看当前数据库中定义的所有触发器的语句："
				}
			]
		},
		{
			"ID": "20210708003510-1cdtlb0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-1cdtlb0"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SHOW TRIGGERS;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-7b8g5z8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-7b8g5z8"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看某个具体的触发器的定义："
				}
			]
		},
		{
			"ID": "20210708003510-whyfxgx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-whyfxgx"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SHOW CREATE TRIGGER 触发器名;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-ekeeevu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-ekeeevu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "删除触发器："
				}
			]
		},
		{
			"ID": "20210708003510-dpmv4dh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-dpmv4dh"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "DROP TRIGGER 触发器名;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-utbhinp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-utbhinp"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这几个命令太简单了，就不举例子了啊～"
				}
			]
		},
		{
			"ID": "20210708003510-0ladqk1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-0ladqk1"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "触发器使用注意事项"
				}
			]
		},
		{
			"ID": "20210708003510-bkfz1lq",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210708003510-bkfz1lq"
			},
			"Children": [
				{
					"ID": "20210708003510-d3o398i",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-d3o398i"
					},
					"Children": [
						{
							"ID": "20210708003510-p3s12ov",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-p3s12ov"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "触发器内容中不能有输出结果集的语句。"
								}
							]
						},
						{
							"ID": "20210708003510-tqrkfp8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-tqrkfp8"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "比方说："
								}
							]
						},
						{
							"ID": "20210708003510-p2t1d0p",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-p2t1d0p"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "mysql\u003e delimiter $\nmysql\u003e CREATE TRIGGER ai_t1\n    -\u003e AFTER INSERT ON t1\n    -\u003e FOR EACH ROW\n    -\u003e BEGIN\n    -\u003e     SELECT NEW.m1, NEW.n1;\n    -\u003e END $\nERROR 1415 (0A000): Not allowed to return a result set from a trigger\nmysql\u003e\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-9vicois",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-9vicois"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "显示的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "ERROR"
								},
								{
									"Type": "NodeText",
									"Data": "的意思就是不允许在触发器内容中返回结果集！"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-binujto",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-binujto"
					},
					"Children": [
						{
							"ID": "20210708003510-0a3106v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-0a3106v"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "触发器内容中 NEW 代表记录的列的值可以被更改，OLD 代表记录的列的值无法更改。"
								}
							]
						},
						{
							"ID": "20210708003510-cjbnhl6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-cjbnhl6"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "NEW"
								},
								{
									"Type": "NodeText",
									"Data": "代表新插入或着即将修改后的记录，修改它的列的值将影响 INSERT 和 UPDATE 语句执行后的结果，而"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OLD"
								},
								{
									"Type": "NodeText",
									"Data": "代表修改或删除之前的值，我们无法修改它。比方说如果我们非要这么写那就会报错的："
								}
							]
						},
						{
							"ID": "20210708003510-9hwqs1u",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-9hwqs1u"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "mysql\u003e delimiter $\nmysql\u003e CREATE TRIGGER bu_t1\n    -\u003e BEFORE UPDATE ON t1\n    -\u003e FOR EACH ROW\n    -\u003e BEGIN\n    -\u003e     SET OLD.m1 = 1;\n    -\u003e END $\nERROR 1362 (HY000): Updating of OLD row is not allowed in trigger\nmysql\u003e\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-7xv84pg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-7xv84pg"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可以看到提示的错误中显示在触发器中"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OLD"
								},
								{
									"Type": "NodeText",
									"Data": "代表的记录是不可被更改的。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-1mnx023",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-1mnx023"
					},
					"Children": [
						{
							"ID": "20210708003510-o59r35a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-o59r35a"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在 BEFORE 触发器中，我们可以使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "SET NEW.列名 = 某个值"
								},
								{
									"Type": "NodeText",
									"Data": "的形式来更改待插入记录或者待更新记录的某个列的值，但是这种操作不能在 AFTER 触发器中使用，因为在执行 AFTER 触发器的内容时记录已经被插入完成或者更新完成了。"
								}
							]
						},
						{
							"ID": "20210708003510-0ln59w6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-0ln59w6"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "比方说如果我们非要这么写那就会报错的："
								}
							]
						},
						{
							"ID": "20210708003510-p3zh9ov",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-p3zh9ov"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "mysql\u003e delimiter $\nmysql\u003e     CREATE TRIGGER ai_t1\n    -\u003e     AFTER INSERT ON t1\n    -\u003e     FOR EACH ROW\n    -\u003e     BEGIN\n    -\u003e         SET NEW.m1 = 1;\n    -\u003e     END $\nERROR 1362 (HY000): Updating of NEW row is not allowed in after trigger\nmysql\u003e\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-tkrttdi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-tkrttdi"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可以看到提示的错误中显示在 AFTER 触发器中是不允许更改"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "NEW"
								},
								{
									"Type": "NodeText",
									"Data": "代表的记录的。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-g5y8sf6",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210708003510-g5y8sf6"
					},
					"Children": [
						{
							"ID": "20210708003510-adsavzk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-adsavzk"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果我们的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "BEFORE"
								},
								{
									"Type": "NodeText",
									"Data": "触发器内容执行过程中遇到了错误，那这个触发器对应的具体语句将无法执行；如果具体的操作语句执行过程中遇到了错误，那与它对应的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "AFTER"
								},
								{
									"Type": "NodeText",
									"Data": "触发器的内容将无法执行。"
								}
							]
						},
						{
							"ID": "20210708003510-t4kzb2r",
							"Type": "NodeBlockquote",
							"Properties": {
								"id": "20210708003510-t4kzb2r"
							},
							"Children": [
								{
									"Type": "NodeBlockquoteMarker",
									"Data": "\u003e "
								},
								{
									"ID": "20210708003510-dsuh0zq",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20210708003510-dsuh0zq"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "小贴士： 对于支持事务的表，不论是执行触发器内容还是具体操作语句过程中出现了错误，会把这个过程中所有的语句都回滚。当然，作为小白的我们并不知道啥是个事务，啥是个回滚，这些进阶内容都在《MySQL 是怎样运行的：从根儿上理解 MySQL》中呢～"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-p8v0eay",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210708003510-p8v0eay"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "事件"
				}
			]
		},
		{
			"ID": "20210708003510-l93vdzx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-l93vdzx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有时候我们想让"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "服务器在某个时间点或者每隔一段时间自动地执行一些语句，这时候就需要去创建一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "事件"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210708003510-cjhv2x5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-cjhv2x5"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "创建事件"
				}
			]
		},
		{
			"ID": "20210708003510-pv3n6ly",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-pv3n6ly"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建事件的语法如下："
				}
			]
		},
		{
			"ID": "20210708003510-b7apgu2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-b7apgu2"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE EVENT 事件名\nON SCHEDULE\n{\n    AT 某个确定的时间点|\n    EVERY 期望的时间间隔 [STARTS datetime][END datetime]\n}\nDO\nBEGIN\n    具体的语句\nEND\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-0zaoy2b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-0zaoy2b"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "事件"
				},
				{
					"Type": "NodeText",
					"Data": "支持两种类型的自动执行方式："
				}
			]
		},
		{
			"ID": "20210708003510-54s2pyd",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 4,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210708003510-54s2pyd"
			},
			"Children": [
				{
					"ID": "20210708003510-0950w72",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210708003510-0950w72"
					},
					"Children": [
						{
							"ID": "20210708003510-wd35l65",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-wd35l65"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在某个确定的时间点执行。"
								}
							]
						},
						{
							"ID": "20210708003510-zuoabx2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-zuoabx2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "比方说："
								}
							]
						},
						{
							"ID": "20210708003510-gik7yl8",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-gik7yl8"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "CREATE EVENT insert_t1_event\nON SCHEDULE\nAT '2019-09-04 15:48:54'\nDO\nBEGIN\n    INSERT INTO t1(m1, n1) VALUES(6, 'f');\nEND\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-x959jl8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-x959jl8"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们在这个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "事件"
								},
								{
									"Type": "NodeText",
									"Data": "中指定了执行时间是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "'2019-09-04 15:48:54'"
								},
								{
									"Type": "NodeText",
									"Data": "，除了直接填某个时间常量，我们也可以填写一些表达式："
								}
							]
						},
						{
							"ID": "20210708003510-f3q14ho",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-f3q14ho"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "CREATE EVENT insert_t1\nON SCHEDULE\nAT DATE_ADD(NOW(), INTERVAL 2 DAY)\nDO\nBEGIN\n    INSERT INTO t1(m1, n1) VALUES(6, 'f');\nEND\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-zk38voi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-zk38voi"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "其中的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "DATE_ADD(NOW(), INTERVAL 2 DAY)"
								},
								{
									"Type": "NodeText",
									"Data": "表示该事件将在当前时间的两天后执行。"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-em6scua",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210708003510-em6scua"
					},
					"Children": [
						{
							"ID": "20210708003510-kxr6h1c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-kxr6h1c"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "每隔一段时间执行一次。"
								}
							]
						},
						{
							"ID": "20210708003510-25w6l4y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-25w6l4y"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "比方说："
								}
							]
						},
						{
							"ID": "20210708003510-3o9ufa1",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-3o9ufa1"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "CREATE EVENT insert_t1\nON SCHEDULE\nEVERY 1 HOUR\nDO\nBEGIN\n    INSERT INTO t1(m1, n1) VALUES(6, 'f');\nEND\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-vx46mpr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-vx46mpr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "其中的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "EVERY 1 HOUR"
								},
								{
									"Type": "NodeText",
									"Data": "表示该事件将每隔 1 个小时执行一次。默认情况下，采用这种每隔一段时间执行一次的方式将从创建事件的事件开始，无限制的执行下去。我们也可以指定该事件开始执行时间和截止时间："
								}
							]
						},
						{
							"ID": "20210708003510-ltulfa4",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210708003510-ltulfa4"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "CREATE EVENT insert_t1\nON SCHEDULE\nEVERY 1 HOUR STARTS '2019-09-04 15:48:54' ENDS '2019-09-16 15:48:54'\nDO\nBEGIN\n    INSERT INTO t1(m1, n1) VALUES(6, 'f');\nEND\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						},
						{
							"ID": "20210708003510-umudenn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-umudenn"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如上所示，该事件将从'2019-09-04 15:48:54'开始直到'2019-09-16 15:48:54'为止，中间每隔 1 个小时执行一次。"
								}
							]
						},
						{
							"ID": "20210708003510-81ahr0r",
							"Type": "NodeBlockquote",
							"Properties": {
								"id": "20210708003510-81ahr0r"
							},
							"Children": [
								{
									"Type": "NodeBlockquoteMarker",
									"Data": "\u003e "
								},
								{
									"ID": "20210708003510-gairobw",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20210708003510-gairobw"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "小贴士： 表示事件间隔的单位除了 HOUR，还可以用 YEAR、QUARTER、MONTH、DAY、HOUR、 MINUTE、WEEK、SECOND、YEAR_MONTH、DAY_HOUR、DAY_MINUTE、DAY_SECOND、HOUR_MINUTE、HOUR_SECOND、MINUTE_SECOND 这些单位，根据具体需求选用我们需要的时间间隔单位。"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-hf16fip",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-hf16fip"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在创建好"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "事件"
				},
				{
					"Type": "NodeText",
					"Data": "之后我们就不用管了，到了指定时间，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "服务器会帮我们自动执行的。"
				}
			]
		},
		{
			"ID": "20210708003510-zthewhd",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-zthewhd"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "查看和删除事件"
				}
			]
		},
		{
			"ID": "20210708003510-wnqend2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-wnqend2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看当前数据库中定义的所有事件的语句："
				}
			]
		},
		{
			"ID": "20210708003510-t5dialr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-t5dialr"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SHOW EVENTS;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-skyj4ln",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-skyj4ln"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查看某个具体的事件的定义："
				}
			]
		},
		{
			"ID": "20210708003510-sybhvkw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-sybhvkw"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SHOW CREATE EVENT 事件名;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-ecugthp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-ecugthp"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "删除事件："
				}
			]
		},
		{
			"ID": "20210708003510-6v1fvto",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-6v1fvto"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "DROP EVENT 事件名;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-y8hwpfr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-y8hwpfr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这几个命令太简单了，就不举例子了啊～"
				}
			]
		},
		{
			"ID": "20210708003510-rpe38ua",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-rpe38ua"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "事件使用注意事项"
				}
			]
		},
		{
			"ID": "20210708003510-ckm55jl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-ckm55jl"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认情况下，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "服务器并不会帮助我们执行事件，除非我们使用下边的语句手动开启该功能："
				}
			]
		},
		{
			"ID": "20210708003510-zlhldqx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-zlhldqx"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SET GLOBAL event_scheduler = ON;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-0cui7t9",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20210708003510-0cui7t9"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e "
				},
				{
					"ID": "20210708003510-3g8r3gn",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210708003510-3g8r3gn"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "小贴士： event_scheduler 其实是一个系统变量，它的值也可以在 MySQL 服务器启动的时候通过启动参数或者通过配置文件来设置 event_scheduler 的值。这些所谓的系统变量、启动参数、配置文件的各种东东并不是我们小白现在需要掌握的，大家忽略它们就好了～"
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-2awe8k7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210708003510-2awe8k7"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "游标"
				}
			]
		},
		{
			"ID": "20210708003510-r69iuxd",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-r69iuxd"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "游标简介"
				}
			]
		},
		{
			"ID": "20210708003510-1qml3kb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-1qml3kb"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "截止到现在为止，我们只能使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SELECT ... INTO ..."
				},
				{
					"Type": "NodeText",
					"Data": "语句将一条记录的各个列值赋值到多个变量里，比如在前边的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "get_score_data"
				},
				{
					"Type": "NodeText",
					"Data": "存储过程里有这样的语句："
				}
			]
		},
		{
			"ID": "20210708003510-tunsnw7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-tunsnw7"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT MAX(score), MIN(score), AVG(score) FROM student_score WHERE subject = s INTO max_score, min_score, avg_score;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-amalluy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-amalluy"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是如果某个查询语句的结果集中有多条记录的话，我们就无法把它们赋值给某些变量了～ 所以为了方便我们去访问这些有多条记录的结果集，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "中引入了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "游标"
				},
				{
					"Type": "NodeText",
					"Data": "的概念。"
				}
			]
		},
		{
			"ID": "20210708003510-aqpkxl8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-aqpkxl8"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们下边以对"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "t1"
				},
				{
					"Type": "NodeText",
					"Data": "表的查询为例来介绍一下"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "游标"
				},
				{
					"Type": "NodeText",
					"Data": "，比如我们有这样一个查询："
				}
			]
		},
		{
			"ID": "20210708003510-es63her",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-es63her"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e SELECT m1, n1 FROM t1;\n+------+------+\n| m1   | n1   |\n+------+------+\n|    1 | a    |\n|    2 | b    |\n|    3 | c    |\n|    4 | d    |\n+------+------+\n4 rows in set (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-1y7dyce",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-1y7dyce"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SELECT m1, n1 FROM t1"
				},
				{
					"Type": "NodeText",
					"Data": "查询语句对应的结果集有 4 条记录，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "游标"
				},
				{
					"Type": "NodeText",
					"Data": "其实就是用来标记结果集中我们正在访问的某一条记录。初始状态下它标记结果集中的第一条记录，就像这样："
				}
			]
		},
		{
			"ID": "20210708003510-v4z67ob",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-v4z67ob"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "img"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "../assets/16cf10d2c56518db.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-z49vcg4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-z49vcg4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们可以根据这个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "游标"
				},
				{
					"Type": "NodeText",
					"Data": "取出它对应记录的信息，随后再移动游标，让它执向下一条记录。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "游标"
				},
				{
					"Type": "NodeText",
					"Data": "既可以用在存储函数中，也可以用在存储过程中，我们下边以存储过程为例来说明"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "游标"
				},
				{
					"Type": "NodeText",
					"Data": "的使用方式，它的使用大致分成这么四个步骤："
				}
			]
		},
		{
			"ID": "20210708003510-7d0lck6",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Tight": true,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 4,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210708003510-7d0lck6"
			},
			"Children": [
				{
					"ID": "20210708003510-wiuhhj7",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210708003510-wiuhhj7"
					},
					"Children": [
						{
							"ID": "20210708003510-q8tx0db",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-q8tx0db"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建游标"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-jdtf7ty",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210708003510-jdtf7ty"
					},
					"Children": [
						{
							"ID": "20210708003510-j8n6x78",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-j8n6x78"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "打开游标"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-e84adsv",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20210708003510-e84adsv"
					},
					"Children": [
						{
							"ID": "20210708003510-6q8s5y0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-6q8s5y0"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过游标访问记录"
								}
							]
						}
					]
				},
				{
					"ID": "20210708003510-j1gttgc",
					"Type": "NodeListItem",
					"Data": "4",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 4,
						"Delimiter": 46,
						"Padding": 4,
						"Marker": "NA==",
						"Num": 4
					},
					"Properties": {
						"id": "20210708003510-j1gttgc"
					},
					"Children": [
						{
							"ID": "20210708003510-2yn5oqu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210708003510-2yn5oqu"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "关闭游标"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-5bdb05z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-5bdb05z"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下边来详细介绍这几个步骤的详细情况。"
				}
			]
		},
		{
			"ID": "20210708003510-im19evg",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-im19evg"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "创建游标"
				}
			]
		},
		{
			"ID": "20210708003510-t5crvy8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-t5crvy8"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在创建游标的时候，需要指定一下与"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "游标"
				},
				{
					"Type": "NodeText",
					"Data": "关联的查询语句，语法如下："
				}
			]
		},
		{
			"ID": "20210708003510-6rdffl9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-6rdffl9"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "DECLARE 游标名称 CURSOR FOR 查询语句;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-vqlyu1w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-vqlyu1w"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们定义一个存储过程试一试："
				}
			]
		},
		{
			"ID": "20210708003510-27egwum",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-27egwum"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE PROCEDURE cursor_demo()\nBEGIN\n    DECLARE t1_record_cursor CURSOR FOR SELECT m1, n1 FROM t1;\nEND\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-06b44rd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-06b44rd"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这样名叫"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "t1_record_cursor"
				},
				{
					"Type": "NodeText",
					"Data": "的游标就创建成功了。"
				}
			]
		},
		{
			"ID": "20210708003510-2dmy9bi",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20210708003510-2dmy9bi"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e "
				},
				{
					"ID": "20210708003510-rlge9an",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20210708003510-rlge9an"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "小贴士： 如果存储程序中也有声明局部变量的语句，创建游标的语句一定要放在局部变量声明后头。"
						}
					]
				}
			]
		},
		{
			"ID": "20210708003510-oznbbje",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-oznbbje"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "打开和关闭游标"
				}
			]
		},
		{
			"ID": "20210708003510-vevtsxy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-vevtsxy"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在创建完游标之后，我们需要手动打开和关闭游标，语法也简单："
				}
			]
		},
		{
			"ID": "20210708003510-yucp3fv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-yucp3fv"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "OPEN 游标名称;\n\nCLOSE 游标名称;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-4dr5pji",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-4dr5pji"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "打开游标"
				},
				{
					"Type": "NodeText",
					"Data": "意味着执行查询语句，创建一个该查询语句得到的结果集关联起来的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "游标"
				},
				{
					"Type": "NodeText",
					"Data": "，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "关闭游标"
				},
				{
					"Type": "NodeText",
					"Data": "意味着会释放该游标相关的资源，所以一旦我们使用完了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "游标"
				},
				{
					"Type": "NodeText",
					"Data": "，就要把它关闭掉。当然如果我们不显式的使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "CLOSE"
				},
				{
					"Type": "NodeText",
					"Data": "语句关闭游标的话，在该存储过程的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "END"
				},
				{
					"Type": "NodeText",
					"Data": "语句执行完之后会自动关闭的。"
				}
			]
		},
		{
			"ID": "20210708003510-l0ncwca",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-l0ncwca"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们再来修改一下上边的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "cursor_demo"
				},
				{
					"Type": "NodeText",
					"Data": "存储过程："
				}
			]
		},
		{
			"ID": "20210708003510-cj91vj4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-cj91vj4"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE PROCEDURE cursor_demo()\nBEGIN\n    DECLARE t1_record_cursor CURSOR FOR SELECT m1, n1 FROM t1;\n\n    OPEN t1_record_cursor;\n\n    CLOSE t1_record_cursor;\nEND\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-74mmum3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-74mmum3"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "使用游标获取记录"
				}
			]
		},
		{
			"ID": "20210708003510-2yi2xmf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-2yi2xmf"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在知道怎么打开和关闭游标之后，我们正式来唠叨一下如何使用游标来获取结果集中的记录，获取记录的语句长这样："
				}
			]
		},
		{
			"ID": "20210708003510-q0l0fcj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-q0l0fcj"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "FETCH 游标名 INTO 变量1, 变量2, ... 变量n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-qac0w0b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-qac0w0b"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个语句的意思就是把指定游标对应记录的各列的值依次赋值给"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "INTO"
				},
				{
					"Type": "NodeText",
					"Data": "后边的各个变量。我们来继续改写一下"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "cursor_demo"
				},
				{
					"Type": "NodeText",
					"Data": "存储过程："
				}
			]
		},
		{
			"ID": "20210708003510-9wnxo1l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-9wnxo1l"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE PROCEDURE cursor_demo()\nBEGIN\n    DECLARE m_value INT;\n    DECLARE n_value CHAR(1);\n\n    DECLARE t1_record_cursor CURSOR FOR SELECT m1, n1 FROM t1;\n\n    OPEN t1_record_cursor;\n\n    FETCH t1_record_cursor INTO m_value, n_value;\n    SELECT m_value, n_value;\n\n    CLOSE t1_record_cursor;\nEND $\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-c42wx1c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-c42wx1c"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们来调用一下这个存储过程："
				}
			]
		},
		{
			"ID": "20210708003510-4b8dt6r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-4b8dt6r"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e CALL cursor_demo();\n+---------+---------+\n| m_value | n_value |\n+---------+---------+\n|       1 | a       |\n+---------+---------+\n1 row in set (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-j3nx8d5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-j3nx8d5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "额，奇怪，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "t1"
				},
				{
					"Type": "NodeText",
					"Data": "表里有 4 条记录，我们这里只取出了第一条？是的，如果想获取多条记录，那需要把 FETCH 语句放到循环语句中，我们再来修改一下"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "cursor_demo"
				},
				{
					"Type": "NodeText",
					"Data": "存储过程："
				}
			]
		},
		{
			"ID": "20210708003510-k6d71bw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-k6d71bw"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE PROCEDURE cursor_demo()\nBEGIN\n    DECLARE m_value INT;\n    DECLARE n_value CHAR(1);\n    DECLARE record_count INT;\n    DECLARE i INT DEFAULT 0;\n\n    DECLARE t1_record_cursor CURSOR FOR SELECT m1, n1 FROM t1;\n\n    SELECT COUNT(*) FROM t1 INTO record_count;\n\n    OPEN t1_record_cursor;\n\n    WHILE i \u003c record_count DO\n        FETCH t1_record_cursor INTO m_value, n_value;\n        SELECT m_value, n_value;\n        SET i = i + 1;\n    END WHILE;\n\n    CLOSE t1_record_cursor;\nEND\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-11054zt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-11054zt"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这次我们又多使用了两个变量，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "record_count"
				},
				{
					"Type": "NodeText",
					"Data": "表示"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "t1"
				},
				{
					"Type": "NodeText",
					"Data": "表中的记录行数，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "i"
				},
				{
					"Type": "NodeText",
					"Data": "表示当前游标对应的记录位置。每调用一次 FETCH 语句，游标就移动到下一条记录的位置。看一下调用效果："
				}
			]
		},
		{
			"ID": "20210708003510-z8nqcnd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-z8nqcnd"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e CALL cursor_demo();\n+---------+---------+\n| m_value | n_value |\n+---------+---------+\n|       1 | a       |\n+---------+---------+\n1 row in set (0.00 sec)\n\n+---------+---------+\n| m_value | n_value |\n+---------+---------+\n|       2 | b       |\n+---------+---------+\n1 row in set (0.00 sec)\n\n+---------+---------+\n| m_value | n_value |\n+---------+---------+\n|       3 | c       |\n+---------+---------+\n1 row in set (0.00 sec)\n\n+---------+---------+\n| m_value | n_value |\n+---------+---------+\n|       4 | d       |\n+---------+---------+\n1 row in set (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-uitx42k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-uitx42k"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这回就把"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "t1"
				},
				{
					"Type": "NodeText",
					"Data": "表中全部的记录就都遍历完了。"
				}
			]
		},
		{
			"ID": "20210708003510-bnuj0cu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210708003510-bnuj0cu"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "遍历结束时的执行策略"
				}
			]
		},
		{
			"ID": "20210708003510-w3sdmsl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-w3sdmsl"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上边介绍的遍历方式需要我们首先获得查询语句结构集中记录的条数，也就是需要先执行下边这条语句："
				}
			]
		},
		{
			"ID": "20210708003510-wpkfkz4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-wpkfkz4"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT COUNT(*) FROM t1 INTO record_count;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-d9fyy4i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-d9fyy4i"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们之所以要获取结果集中记录的条数，是因为我们需要一个结束循环的条件，当调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FETCH"
				},
				{
					"Type": "NodeText",
					"Data": "语句的次数与结果集中记录条数相等时就结束循环。"
				}
			]
		},
		{
			"ID": "20210708003510-u9mga78",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-u9mga78"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其实在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FETCH"
				},
				{
					"Type": "NodeText",
					"Data": "语句获取不到记录的时候会触发一个事件，从而我们可以得知所有的记录都被获取过了，然后我们就可以去主动的停止循环。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "中响应这个事件的语句如下："
				}
			]
		},
		{
			"ID": "20210708003510-ksz1s8l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-ksz1s8l"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "DECLARE CONTINUE HANDLER FOR NOT FOUND 处理语句;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-wntzlx7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-wntzlx7"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "只要我们在存储过程中写了这个语句，那么在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FETCH"
				},
				{
					"Type": "NodeText",
					"Data": "语句获取不到记录的时候，服务器就会执行我们填写的处理语句。"
				}
			]
		},
		{
			"ID": "20210708003510-6ulb33g",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-6ulb33g"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "!小贴士：\n\n处理语句可以是简单的一条语句，也可以是由BEGIN ... END 包裹的多条语句。\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-1du6xwt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-1du6xwt"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们接下来再来改写一下"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "cursor_demo"
				},
				{
					"Type": "NodeText",
					"Data": "存储过程："
				}
			]
		},
		{
			"ID": "20210708003510-kgtvu3m",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-kgtvu3m"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE PROCEDURE cursor_demo()\nBEGIN\n    DECLARE m_value INT;\n    DECLARE n_value CHAR(1);\n    DECLARE not_done INT DEFAULT 1;\n\n    DECLARE t1_record_cursor CURSOR FOR SELECT m1, n1 FROM t1;\n\n    DECLARE CONTINUE HANDLER FOR NOT FOUND SET not_done = 0;\n\n    OPEN t1_record_cursor;\n\n    flag: LOOP\n        FETCH t1_record_cursor INTO m_value, n_value;\n        IF not_done = 0 THEN\n            LEAVE flag;\n        END IF;\n        SELECT m_value, n_value, not_done;\n    END LOOP flag;\n\n    CLOSE t1_record_cursor;\nEND\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-swcsu9f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-swcsu9f"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们声明了一个默认值为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "1"
				},
				{
					"Type": "NodeText",
					"Data": "的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "not_done"
				},
				{
					"Type": "NodeText",
					"Data": "变量和一个这样的语句："
				}
			]
		},
		{
			"ID": "20210708003510-vzqurs4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-vzqurs4"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "DECLARE CONTINUE HANDLER FOR NOT FOUND SET not_done = 0;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210708003510-cd5fb11",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-cd5fb11"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "not_done"
				},
				{
					"Type": "NodeText",
					"Data": "变量的值为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "1"
				},
				{
					"Type": "NodeText",
					"Data": "时表明遍历结果集的过程还没有结束，当"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "FETCH"
				},
				{
					"Type": "NodeText",
					"Data": "语句无法获取更多记录时，就会触发一个事件，从而导致"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MySQL"
				},
				{
					"Type": "NodeText",
					"Data": "服务器主动调用上边的这个语句将"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "not_done"
				},
				{
					"Type": "NodeText",
					"Data": "变量的值改为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "0"
				},
				{
					"Type": "NodeText",
					"Data": "。另外，我们把原先的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "WHILE"
				},
				{
					"Type": "NodeText",
					"Data": "语句替换成了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LOOP"
				},
				{
					"Type": "NodeText",
					"Data": "语句，直接在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "LOOP"
				},
				{
					"Type": "NodeText",
					"Data": "语句的循环体中判断"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "not_done"
				},
				{
					"Type": "NodeText",
					"Data": "变量的值，当它的值为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "0"
				},
				{
					"Type": "NodeText",
					"Data": "时就主动跳出循环。"
				}
			]
		},
		{
			"ID": "20210708003510-c0xljwu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210708003510-c0xljwu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "让我们调用一下这个存储过程看一下效果："
				}
			]
		},
		{
			"ID": "20210708003510-akys34y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210708003510-akys34y"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mysql\u003e call cursor_demo;\n+---------+---------+----------+\n| m_value | n_value | not_done |\n+---------+---------+----------+\n|       1 | a       |        1 |\n+---------+---------+----------+\n1 row in set (0.05 sec)\n\n+---------+---------+----------+\n| m_value | n_value | not_done |\n+---------+---------+----------+\n|       2 | b       |        1 |\n+---------+---------+----------+\n1 row in set (0.05 sec)\n\n+---------+---------+----------+\n| m_value | n_value | not_done |\n+---------+---------+----------+\n|       3 | c       |        1 |\n+---------+---------+----------+\n1 row in set (0.06 sec)\n\n+---------+---------+----------+\n| m_value | n_value | not_done |\n+---------+---------+----------+\n|       4 | d       |        1 |\n+---------+---------+----------+\n1 row in set (0.06 sec)\n\nQuery OK, 0 rows affected (0.07 sec)\n\nmysql\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		}
	]
}