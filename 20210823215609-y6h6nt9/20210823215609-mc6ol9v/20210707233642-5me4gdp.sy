{
	"ID": "20210707233642-5me4gdp",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20210707233642-5me4gdp",
		"title": "303.参数校验",
		"type": "doc"
	},
	"Children": [
		{
			"ID": "20210707233642-0s5hmey",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707233642-0s5hmey"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "文档"
				}
			]
		},
		{
			"ID": "20210707233642-tciq8t2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-tciq8t2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "参考"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://beanvalidation.org/",
					"TextMarkTextContent": "官网"
				}
			]
		},
		{
			"ID": "20210707233642-n3x4pdq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707233642-n3x4pdq"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "依赖引入"
				}
			]
		},
		{
			"ID": "20210707233642-zfode8b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-zfode8b"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 SpringBoot 2.3.x 以前 SpringBoot 包默认引入 spring-boot-starter-validation 包，而自 SpringBoot 2.3.x 以后官方将其排除，需要单独引入。"
				}
			]
		},
		{
			"ID": "20210707233642-fgeilf6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "eG1s",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-fgeilf6"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cdependency\u003e\n    \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e\n    \u003cartifactId\u003espring-boot-starter-validation\u003c/artifactId\u003e\n\u003c/dependency\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-1obuwaf",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707233642-1obuwaf"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "@Valid \u0026 @Validated 🔥"
				}
			]
		},
		{
			"ID": "20210707233642-mc5lpw1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-mc5lpw1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "参考"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/qq_27680317/article/details/79970590",
					"TextMarkTextContent": "博客"
				}
			]
		},
		{
			"ID": "20210707233642-sy2x7la",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707233642-sy2x7la"
			},
			"Children": [
				{
					"ID": "20210707233642-fwb5hpa",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-fwb5hpa"
					},
					"Children": [
						{
							"ID": "20210707233642-rw4xad6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-rw4xad6"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "javax提供了@Valid（标准JSR-303规范），配合BindingResult可以直接提供参数验证结果"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233642-ya5cmd8",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-ya5cmd8"
					},
					"Children": [
						{
							"ID": "20210707233642-p5xophw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-p5xophw"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Spring Validation验证框架对参数的验证机制提供了@Validated（Spring's JSR-303规范，是标准JSR-303的一个变种）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707233642-1cp6q7c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-1cp6q7c"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在检验Controller的入参是否符合规范时，使用@Validated或者@Valid在基本验证功能上没有太多区别。但分组、注解地方、嵌套验证等有所不同："
				}
			]
		},
		{
			"ID": "20210707233642-f88dem3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-f88dem3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "分组:"
				}
			]
		},
		{
			"ID": "20210707233642-havi2j0",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707233642-havi2j0"
			},
			"Children": [
				{
					"ID": "20210707233642-frmlpyj",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-frmlpyj"
					},
					"Children": [
						{
							"ID": "20210707233642-8ztczhs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-8ztczhs"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Valid：作为标准JSR-303规范，还没有吸收分组的功能。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233642-tcq0i2h",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-tcq0i2h"
					},
					"Children": [
						{
							"ID": "20210707233642-zp0ttr4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-zp0ttr4"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "@Validated"
								},
								{
									"Type": "NodeText",
									"Data": "：提供了一个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "分组"
								},
								{
									"Type": "NodeText",
									"Data": "功能，可以在入参验证时，根据不同的分组采用不同的验证机制"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707233642-2o1w8zi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-2o1w8zi"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注解地方"
				},
				{
					"Type": "NodeText",
					"Data": ":"
				}
			]
		},
		{
			"ID": "20210707233642-myctf7u",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707233642-myctf7u"
			},
			"Children": [
				{
					"ID": "20210707233642-294u7fe",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-294u7fe"
					},
					"Children": [
						{
							"ID": "20210707233642-5aawamu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-5aawamu"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "@Valid"
								},
								{
									"Type": "NodeText",
									"Data": "：可以用在构造函数、方法、方法参数和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "成员属性（字段）上"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233642-kuu5nku",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-kuu5nku"
					},
					"Children": [
						{
							"ID": "20210707233642-hvglate",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-hvglate"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Validated：可以用在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "类"
								},
								{
									"Type": "NodeText",
									"Data": "、方法和方法参数上。但是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "不能用在成员属性（字段）上"
								}
							]
						},
						{
							"ID": "20210707233642-tgs7f60",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-tgs7f60"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "两者是否能用于成员属性（字段）上直接影响能否提供嵌套验证的功能。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707233642-gjtkhl4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-gjtkhl4"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "嵌套（集联）验证"
				},
				{
					"Type": "NodeText",
					"Data": "（参考上面那个博客）"
				}
			]
		},
		{
			"ID": "20210707233642-umka0jc",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707233642-umka0jc"
			},
			"Children": [
				{
					"ID": "20210707233642-yjen54y",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-yjen54y"
					},
					"Children": [
						{
							"ID": "20210707233642-70ip93v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-70ip93v"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Validated和@Valid加在方法参数前，都不会自动对参数进行嵌套验证。能够用在成员属性（字段）上，提示验证框架进行嵌套验证"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707233642-c1t6qj2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-c1t6qj2"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "总结"
				},
				{
					"Type": "NodeText",
					"Data": "："
				}
			]
		},
		{
			"ID": "20210707233642-8drpjc0",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707233642-8drpjc0"
			},
			"Children": [
				{
					"ID": "20210707233642-gaep29a",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-gaep29a"
					},
					"Children": [
						{
							"ID": "20210707233642-b50pdre",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-b50pdre"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "非成员属性（字段）直接使用 @Validated，开启校验"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233642-io6f9eu",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-io6f9eu"
					},
					"Children": [
						{
							"ID": "20210707233642-7r1kg4z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-7r1kg4z"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "成员属性（字段）直接使用 @Valid，嵌套（集联）校验"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707233642-xmr71nb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-xmr71nb"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意，Validation 会"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "将所有需要的都校验"
				},
				{
					"Type": "NodeText",
					"Data": "，即使第一个参数不通过，还是校验其他参数。所以此时需要把所有的错误消息都返回。"
				}
			]
		},
		{
			"ID": "20210707233642-g2vmnd7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707233642-g2vmnd7"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "Spring Validation"
				}
			]
		},
		{
			"ID": "20210707233642-kvojqvl",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707233642-kvojqvl"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "@RequestParams 和 @PathVariables 参数的校验 🔥"
				}
			]
		},
		{
			"ID": "20210707233642-m0q914l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-m0q914l"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一般情况下，校验的注解只能在实体类上标记，否则不起作用，但其实是没有在 Controller 上写 Spring 提供的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@Validated"
				},
				{
					"Type": "NodeText",
					"Data": " 注解，该注解用于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "开启控制器中的 @RequestParams 和 @PathVariables 的验证"
				},
				{
					"Type": "NodeText",
					"Data": "，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "方法级别上的校验"
				}
			]
		},
		{
			"ID": "20210707233642-4d75kbs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-4d75kbs"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@RestController\n@RequestMapping(\"/hello\")\n@Validated\npublic class HelloController {\n\n\n    @PostMapping(\"/test/{id}\")\n    public ResponseEntity\u003cList\u003cUser\u003e\u003e test(\n        @PathVariable @Range(min = 1, max = 10, message = \"1~10哦！\") Integer id,\n        @RequestBody User user) {\n        List\u003cUser\u003e list = new ArrayList\u003c\u003e();\n        User user1 = User.builder()\n            .name(\"zhangsan\")\n            .age(3L)\n            .build();\n        list.add(user1);\n        System.out.println(\"test\");\n        return new ResponseEntity\u003c\u003e(list, HttpStatus.OK);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-4l7ha4x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-4l7ha4x"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "当查询参数和路径参数都不符合校验规则，同时body参数也不符合校验规则，只会出现body校验规则的错误信息。如果body参数全部符合规则才会出现查询参数和路径参数校验失败信息。"
				}
			]
		},
		{
			"ID": "20210707233642-16mvqzy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-16mvqzy"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意，它会抛出 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ConstraintViolationException"
				},
				{
					"Type": "NodeText",
					"Data": " 异常，可以在全局异常处理中捕获"
				}
			]
		},
		{
			"ID": "20210707233642-mp30e0x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-mp30e0x"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 参数校验异常 URL 及查询参数（JSON 格式）\n * 已经使用了 @ResponseStatus(HttpStatus.BAD_REQUEST) 所以无需返回 HttpEntity\n */\n@ExceptionHandler(ConstraintViolationException.class)\n@ResponseStatus(HttpStatus.BAD_REQUEST)\npublic UnifyResponse handleConstraintViolationException(ConstraintViolationException exception,\n                                                        HttpServletRequest request,\n                                                        HandlerMethod handlerMethod,\n                                                        HttpMethod httpMethod) {\n\n    Set\u003cConstraintViolation\u003c?\u003e\u003e constraintViolations = exception.getConstraintViolations();\n    String message = formatAllErrorsMessage(constraintViolations);\n    // String message = formatAllErrorsMessage(allErrors);\n    UnifyResponse unifyResponse = new UnifyResponse(10001, message, httpMethod + \" \" + request.getRequestURI());\n    log.warn(\"系统未知异常, 方法为：{}, 异常为：{}\", handlerMethod, exception);\n    return unifyResponse;\n}\n\n/**\n * 格式化参数校验错误信息\n */\nprivate String formatAllErrorsMessage(Set\u003cConstraintViolation\u003c?\u003e\u003e constraintViolations) {\n    StringJoiner stringJoiner = new StringJoiner(\";\");\n    constraintViolations.forEach(error -\u003e {\n        String format = String.format(\"['%s'无法通过校验, %s]\", error.getInvalidValue(), error.getMessage());\n        stringJoiner.add(format.toString());\n    });\n    return stringJoiner.toString();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-rzb1a4q",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707233642-rzb1a4q"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "表单提交，Bean 接收校验 🔥"
				}
			]
		},
		{
			"ID": "20210707233642-eklusfn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-eklusfn"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Data\npublic class User {\n\n    @NotNull(message = \"id不能为空\")\n    private Long id;\n  \n    @NotNull(message = \"年龄不能为空\")\n    @Max(value = 35, message = \"年龄不超过35\")\n    @Min(value = 18, message = \"年龄不小于18\")\n    private Integer age;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-4otkpkv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-4otkpkv"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Slf4j\n@RestController\npublic class UserController {\n\n    /**\n     * 如果都是用DTO包装参数，那么Controller可以不加@Validated（但建议还是都加上吧）\n     * 参数列表里用@Validated或@Valid都可以\n     *\n     * @param user\n     * @return\n     */\n    @GetMapping(\"getUser\")\n    public Result\u003cUser\u003e getUser(@Validated User user) {\n        System.out.println(\"进来了\");\n        return Result.success(null);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-qmkm3su",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-qmkm3su"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意，它会抛出 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BindException"
				},
				{
					"Type": "NodeText",
					"Data": " 异常，可以在全局异常处理中捕获"
				}
			]
		},
		{
			"ID": "20210707233642-vdsd7be",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-vdsd7be"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 表单提交，Bean 接收\n * 已经使用了 @ResponseStatus(HttpStatus.BAD_REQUEST) 所以无需返回 HttpEntity\n */\n@ExceptionHandler(BindException.class)\n@ResponseStatus(HttpStatus.BAD_REQUEST)\npublic UnifyResponse handleBindException(ConstraintViolationException exception,\n                                         HttpServletRequest request,\n                                         HandlerMethod handlerMethod,\n                                         HttpMethod httpMethod) {\n\n    Set\u003cConstraintViolation\u003c?\u003e\u003e constraintViolations = exception.getConstraintViolations();\n    String message = formatAllErrorsMessage(constraintViolations);\n\n    UnifyResponse unifyResponse = new UnifyResponse(10001, message, httpMethod + \" \" + request.getRequestURI());\n    log.warn(\"系统未知异常, 方法为：{}, 异常为：{}\", handlerMethod, exception);\n    return unifyResponse;\n}\n\n/**\n * 格式化参数校验错误信息\n */\nprivate String formatAllErrorsMessage(Set\u003cConstraintViolation\u003c?\u003e\u003e constraintViolations) {\n    StringJoiner stringJoiner = new StringJoiner(\";\");\n    constraintViolations.forEach(error -\u003e {\n        String format = String.format(\"['%s'无法通过校验, %s]\", error.getInvalidValue(), error.getMessage());\n        stringJoiner.add(format.toString());\n    });\n    return stringJoiner.toString();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-fhig8e6",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707233642-fhig8e6"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "@RequestBody 参数校验"
				}
			]
		},
		{
			"ID": "20210707233642-shz1z36",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-shz1z36"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@PostMapping(\"updateUser\")\npublic Result\u003cBoolean\u003e updateUser(@Validated @RequestBody User user) {\n    System.out.println(\"进来了\");\n    return Result.success(null);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-2umr6vd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-2umr6vd"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意，它会抛出 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "MethodArgumentNotValidException"
				},
				{
					"Type": "NodeText",
					"Data": " 异常，其实是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "BindException"
				},
				{
					"Type": "NodeText",
					"Data": "的子类，可以在全局异常处理中捕获"
				}
			]
		},
		{
			"ID": "20210707233642-ke55hrw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-ke55hrw"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 参数校验异常 （JSON 格式）。MethodArgumentNotValidException 其实是 BindException 的子类\n * 已经使用了 @ResponseStatus(HttpStatus.BAD_REQUEST) 所以无需返回 HttpEntity\n */\n@ExceptionHandler(MethodArgumentNotValidException.class)\n@ResponseStatus(HttpStatus.BAD_REQUEST)\npublic UnifyResponse handleMethodArgumentNotValidException(MethodArgumentNotValidException exception,\n                                                           HttpServletRequest request,\n                                                           HandlerMethod handlerMethod,\n                                                           HttpMethod httpMethod) {\n\n    // 日！这获取到的 error 还是随机顺序 ...\n    List\u003cObjectError\u003e allErrors = exception.getBindingResult().getAllErrors();\n    String message = formatAllErrorsMessage(allErrors);\n\n    UnifyResponse unifyResponse = new UnifyResponse(10001, message, httpMethod + \" \" + request.getRequestURI());\n    log.warn(\"系统未知异常, 方法为：{}, 异常为：{}\", handlerMethod, exception);\n    return unifyResponse;\n}\n\n/**\n * 格式化参数校验错误信息\n */\nprivate String formatAllErrorsMessage(Set\u003cConstraintViolation\u003c?\u003e\u003e constraintViolations) {\n    StringJoiner stringJoiner = new StringJoiner(\";\");\n    constraintViolations.forEach(error -\u003e {\n        String format = String.format(\"['%s'无法通过校验, %s]\", error.getInvalidValue(), error.getMessage());\n        stringJoiner.add(format.toString());\n    });\n    return stringJoiner.toString();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-0sfq6hw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707233642-0sfq6hw"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "常用注解 🔥"
				}
			]
		},
		{
			"ID": "20210707233642-k5zgqco",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707233642-k5zgqco"
			},
			"Children": [
				{
					"ID": "20210707233642-unf1b6a",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-unf1b6a"
					},
					"Children": [
						{
							"ID": "20210707233642-cuhzzgo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-cuhzzgo"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Range(min = 1, max = 10, message = \"数字应为1~10哦！\")：用于数字"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233642-6i52oaj",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-6i52oaj"
					},
					"Children": [
						{
							"ID": "20210707233642-qbr748e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-qbr748e"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@Length(min = 1, max = 10, message = \"字符串长度应在1~10哦！\")：用于字符串"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233642-mo2em41",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-mo2em41"
					},
					"Children": [
						{
							"ID": "20210707233642-wkueygt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-wkueygt"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "@Validated"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233642-4j8iu0u",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-4j8iu0u"
					},
					"Children": [
						{
							"ID": "20210707233642-barrru5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-barrru5"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "@NotNull"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233642-ke2lla3",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-ke2lla3"
					},
					"Children": [
						{
							"ID": "20210707233642-uojd7vj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-uojd7vj"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "@NotBlank"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233642-hyxgo8i",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-hyxgo8i"
					},
					"Children": [
						{
							"ID": "20210707233642-30to5j6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-30to5j6"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "@NotEmpty"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233642-0pqb65z",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-0pqb65z"
					},
					"Children": [
						{
							"ID": "20210707233642-kkuef8o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-kkuef8o"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "@Positive"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233642-y9iw6hk",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-y9iw6hk"
					},
					"Children": [
						{
							"ID": "20210707233642-5ho6059",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-5ho6059"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "@Max"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233642-69whr53",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-69whr53"
					},
					"Children": [
						{
							"ID": "20210707233642-4s140un",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-4s140un"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "@Min"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707233642-ees2pj9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707233642-ees2pj9"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "自定义校验注解 🔥"
				}
			]
		},
		{
			"ID": "20210707233642-uuvdia9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-uuvdia9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实体类"
				}
			]
		},
		{
			"ID": "20210707233642-9jyprfg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-9jyprfg"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Builder\n@Getter\n// @Setter\n// @NoArgsConstructor\n// @AllArgsConstructor\n@PasswordEqualValid\npublic class User {\n\n    @Length(min = 3, max = 7, message = \"字符串长度应在3~7哦！\")\n    private String name;\n\n    @NonNull\n    private  Long age;\n\n    @Length(min = 8, max = 16, message = \"密码长度应在8～16位哦！\")\n    private String password;\n\n    private String password2;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-ar0mgv0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-ar0mgv0"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自定义校验注解"
				}
			]
		},
		{
			"ID": "20210707233642-clm3w7l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-clm3w7l"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 校验两次密码是否相同，应放在类上（需要操作对象的两个字段），必须有 password、password2 字段\n */\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Constraint(validatedBy = PasswordEqualValidator.class)// 是数组，可以指定多个 validator。类似 @Import 关联模式\npublic @interface PasswordEqualValid {\n\n    String message() default \"密码不相同\";\n\n    /** 自定义校验注解必须加上的 */\n    Class\u003c?\u003e[] groups() default { };\n\n    /** 自定义校验注解必须加上的 */\n    Class\u003c? extends Payload\u003e[] payload() default { };\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-nygza3f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-nygza3f"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "校验器"
				}
			]
		},
		{
			"ID": "20210707233642-3q7yxbv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-3q7yxbv"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 泛型第二个参数用于该自定义注解修饰的目标类型，若是字段，则为字段的类型！\n * 无需使用 @Configuration 等注解\n */\npublic class PasswordEqualValidator implements ConstraintValidator\u003cPasswordEqualValid, User\u003e {\n\n    private PasswordEqualValid passwordEqualValid;\n\n    /**\n     * 获取初始化时校验注解的信息\n     * @param constraintAnnotation 约束注解\n     */\n    @Override\n    public void initialize(PasswordEqualValid constraintAnnotation) {\n        this.passwordEqualValid = constraintAnnotation;\n    }\n\n    @Override\n    public boolean isValid(User user, ConstraintValidatorContext constraintValidatorContext) {\n        String password = user.getPassword();\n        String password2 = user.getPassword2();\n        return password.equals(password2);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-61rrat2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-61rrat2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "测试"
				}
			]
		},
		{
			"ID": "20210707233642-98lz4hp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-98lz4hp"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@RestController\n@RequestMapping(\"/hello\")\n@Validated\npublic class HelloController {\n\n    @PostMapping(\"/test/{id}\")\n    public ResponseEntity\u003cList\u003cUser\u003e\u003e test(\n            @PathVariable @Range(min = 1, max = 10, message = \"1~10哦！\") Integer id,\n            @Length(max = 5, message = \"姓名长度最大为5\") String name,\n            @Validated Dog dog,// 这里不测试表单提交\n            @RequestBody @Validated User user) {\n        List\u003cUser\u003e list = new ArrayList\u003c\u003e();\n        User user1 = User.builder()\n                .name(\"zhangsan\")\n                .age(3L)\n                .build();\n        list.add(user1);\n        System.out.println(\"test\");\n        return new ResponseEntity\u003c\u003e(list, HttpStatus.OK);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-vzcz2df",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707233642-vzcz2df"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "嵌套校验"
				}
			]
		},
		{
			"ID": "20210707233642-s7tkgde",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-s7tkgde"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@Validated不支持嵌套校验，只能用@Valid"
				}
			]
		},
		{
			"ID": "20210707233642-trqbmnp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-trqbmnp"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Data\npublic class User {\n\n    @NotNull(message = \"id不能为空\")\n    private Long id;\n\n    @NotNull(message = \"年龄不能为空\")\n    @Max(value = 35, message = \"年龄不超过35\")\n    @Min(value = 18, message = \"年龄不小于18\")\n    private Integer age;\n\n    @NotNull(message = \"所属部门不能为空\")\n    @Valid\n    private Department department;\n  \n    @Data\n    static class Department {\n        @NotNull(message = \"部门编码不能为空\")\n        private Integer sn;\n        @NotBlank(message = \"部门名称不能为空\")\n        private String name;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-mudi3av",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707233642-mudi3av"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "分组校验"
				}
			]
		},
		{
			"ID": "20210707233642-fojzz80",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-fojzz80"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Data\npublic class User {\n\n    @NotNull(message = \"id不能为空\", groups = {Update.class})\n    private Long id;\n\n    @NotNull(message = \"年龄不能为空\", groups = {Add.class, Update.class})\n    @Max(value = 35, message = \"年龄不超过35\", groups = {Add.class, Update.class})\n    @Min(value = 18, message = \"年龄不小于18\", groups = {Add.class, Update.class})\n    private Integer age;\n\n    public interface Add {\n    }\n\n    public interface Update {\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-u5i3syb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-u5i3syb"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Slf4j\n@RestController\npublic class UserController {\n  \n    @PostMapping(\"insertUser\")\n    public Result\u003cBoolean\u003e insertUser(@Validated(User.Add.class) @RequestBody User user) {\n        System.out.println(\"进来了\");\n        return Result.success(null);\n    }\n\n    @PostMapping(\"updateUser\")\n    public Result\u003cBoolean\u003e updateUser(@Validated(User.Update.class) @RequestBody User user) {\n        System.out.println(\"进来了\");\n        return Result.success(null);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-2m7v51x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-2m7v51x"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有两点需要注意："
				}
			]
		},
		{
			"ID": "20210707233642-xdjhjrl",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707233642-xdjhjrl"
			},
			"Children": [
				{
					"ID": "20210707233642-53iadbe",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-53iadbe"
					},
					"Children": [
						{
							"ID": "20210707233642-5ch9ept",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-5ch9ept"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "interface Add这些接口只是做个标记，本身没有任何实际意义，可以抽取出来，作为单独的接口复用"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233642-tz658xg",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233642-tz658xg"
					},
					"Children": [
						{
							"ID": "20210707233642-i70c35w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233642-i70c35w"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "interface Add还可以继承Default接口（Default Jakarta Bean Validation group.）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707233642-zm8plg5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-zm8plg5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "继承Default后，除非显示指定，否则只要加了@NotNull等注解，就会起效。但显示指定Group后，就按指定的分组进行校验。比如，上面的id只会在update时校验生效。"
				},
				{
					"Type": "NodeSoftBreak",
					"Data": "\n"
				},
				{
					"Type": "NodeText",
					"Data": "个人不建议继承Default，一方面是理解起来比较乱，另一方是加了Default后就无法进行部分字段更新了："
				}
			]
		},
		{
			"ID": "20210707233642-1736mbw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-1736mbw"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@PostMapping(\"updateUser\")\npublic Result\u003cBoolean\u003e updateUser(@Validated(User.Update.class) @RequestBody User user) {\n    System.out.println(\"进来了\");\n    return Result.success(null);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-doc2ak0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-doc2ak0"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Data\npublic class User {\n\n    @NotNull(message = \"id不能为空\", groups = {Update.class})\n    private Long id;\n\n    @NotNull(message = \"年龄不能为空\")\n    private Integer age;\n  \n    @NotBlank(message = \"住址不能为空\")\n    private String address;\n\n    public interface Add extends Default {\n    }\n\n    public interface Update extends Default {\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-2xjpan7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-2xjpan7"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时如果想更新name，就不能只传id和name了，address也要传（默认也会校验）。当然，你也可以认为一般情况下update前都会有getById()，所以更新时数据也是全量的。"
				}
			]
		},
		{
			"ID": "20210707233642-znfgmom",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707233642-znfgmom"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "List 校验"
				}
			]
		},
		{
			"ID": "20210707233642-gvmqgtg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-gvmqgtg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Spring Validation不支持以下方式校验："
				}
			]
		},
		{
			"ID": "20210707233642-z85xxk3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-z85xxk3"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Data\npublic class User {\n\n    @NotNull(message = \"id不能为空\")\n    private Long id;\n\n    @NotNull(message = \"年龄不能为空\")\n    private Integer age;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-ing0bzx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-ing0bzx"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@PostMapping(\"updateBatchUser\")\npublic Result\u003cBoolean\u003e updateBatchUser(@Validated @RequestBody List\u003cUser\u003e list) {\n    System.out.println(list);\n    return Result.success(null);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-tgfc03f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-tgfc03f"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "即使age不填，还是进来了，说明对于List而言，@Validated根本没作用"
				}
			]
		},
		{
			"ID": "20210707233642-8urm1yx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-8urm1yx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "解决办法是，借鉴嵌套校验的模式，在List外面再包一层："
				}
			]
		},
		{
			"ID": "20210707233642-zazhcqa",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-zazhcqa"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@PostMapping(\"updateBatchUser\")\npublic Result\u003cBoolean\u003e updateBatchUser(@Validated @RequestBody ValidationList\u003cUser\u003e userList) {\n    System.out.println(userList);\n    return Result.success(null);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-vhui4d7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-vhui4d7"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ValidationList\u003cE\u003e implements List\u003cE\u003e {\n\n    @NotEmpty(message = \"参数不能为空\")\n    @Valid\n    private List\u003cE\u003e list = new LinkedList\u003c\u003e();\n\n    @Override\n    public int size() {\n        return list.size();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return list.isEmpty();\n    }\n\n    @Override\n    public boolean contains(Object o) {\n        return list.contains(o);\n    }\n\n    @Override\n    public Iterator\u003cE\u003e iterator() {\n        return list.iterator();\n    }\n\n    @Override\n    public Object[] toArray() {\n        return list.toArray();\n    }\n\n    @Override\n    public \u003cT\u003e T[] toArray(T[] a) {\n        return list.toArray(a);\n    }\n\n    @Override\n    public boolean add(E e) {\n        return list.add(e);\n    }\n\n    @Override\n    public boolean remove(Object o) {\n        return list.remove(o);\n    }\n\n    @Override\n    public boolean containsAll(Collection\u003c?\u003e c) {\n        return list.containsAll(c);\n    }\n\n    @Override\n    public boolean addAll(Collection\u003c? extends E\u003e c) {\n        return list.addAll(c);\n    }\n\n    @Override\n    public boolean addAll(int index, Collection\u003c? extends E\u003e c) {\n        return list.addAll(index, c);\n    }\n\n    @Override\n    public boolean removeAll(Collection\u003c?\u003e c) {\n        return list.removeAll(c);\n    }\n\n    @Override\n    public boolean retainAll(Collection\u003c?\u003e c) {\n        return list.retainAll(c);\n    }\n\n    @Override\n    public void clear() {\n        list.clear();\n    }\n\n    @Override\n    public E get(int index) {\n        return list.get(index);\n    }\n\n    @Override\n    public E set(int index, E element) {\n        return list.set(index, element);\n    }\n\n    @Override\n    public void add(int index, E element) {\n        list.add(index, element);\n    }\n\n    @Override\n    public E remove(int index) {\n        return list.remove(index);\n    }\n\n    @Override\n    public int indexOf(Object o) {\n        return list.indexOf(o);\n    }\n\n    @Override\n    public int lastIndexOf(Object o) {\n        return list.lastIndexOf(o);\n    }\n\n    @Override\n    public ListIterator\u003cE\u003e listIterator() {\n        return list.listIterator();\n    }\n\n    @Override\n    public ListIterator\u003cE\u003e listIterator(int index) {\n        return list.listIterator(index);\n    }\n\n    @Override\n    public List\u003cE\u003e subList(int fromIndex, int toIndex) {\n        return list.subList(fromIndex, toIndex);\n    }\n\n    public List\u003cE\u003e getList() {\n        return list;\n    }\n\n    public void setList(List\u003cE\u003e list) {\n        this.list = list;\n    }\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-n534szx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-n534szx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实际开发时，建议专门建一个package存放Spring Validation相关的接口和类"
				}
			]
		},
		{
			"ID": "20210707233642-8rnz20b",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707233642-8rnz20b"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "SpringValidatorUtils封装"
				}
			]
		},
		{
			"ID": "20210707233642-07pbjne",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-07pbjne"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public final class SpringValidatorUtils {\n    private SpringValidatorUtils() {}\n  \n    /**\n     * 校验器\n     */\n    private static final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();\n\n    /**\n     * 校验参数\n     *\n     * @param param  待校验的参数\n     * @param groups 分组校验，比如Update.class（可以不传）\n     * @param \u003cT\u003e\n     */\n    public static \u003cT\u003e void validate(T param, Class\u003c?\u003e... groups) {\n        Set\u003cConstraintViolation\u003cT\u003e\u003e validateResult = validator.validate(param, groups);\n        if (!CollectionUtils.isEmpty(validateResult)) {\n            StringBuilder validateMessage = new StringBuilder();\n            for (ConstraintViolation\u003cT\u003e constraintViolation : validateResult) {\n                validateMessage.append(constraintViolation.getMessage()).append(\" \u0026\u0026 \");\n            }\n            // 去除末尾的 \u0026\u0026\n            validateMessage.delete(validateMessage.length() - 4, validateMessage.length());\n            // 抛给全局异常处理\n            throw new ValidatorException(validateMessage.toString());\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-izfw3k5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-izfw3k5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码很简单，做的事情本质是和@Validated是一模一样的。@Validated通过注解方式让Spring使用Validator帮我们校验，而SpringValidatorUtils则是我们从Spring那借来Validator自己校验："
				}
			]
		},
		{
			"ID": "20210707233642-hjd36os",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-hjd36os"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@PostMapping(\"insertUser\")\npublic Result\u003cBoolean\u003e insertUser(@RequestBody User user) {\n    SpringValidatorUtils.validate(user);\n    System.out.println(\"进来了\");\n    return Result.success(null);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233642-585kr03",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-585kr03"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时不需要加@Validated。"
				}
			]
		},
		{
			"ID": "20210707233642-71an6yr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233642-71an6yr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "买一送一，看看我之前一个同事封装的工具类（更加自由，调用者决定抛异常还是返回错误信息）："
				}
			]
		},
		{
			"ID": "20210707233642-f4xqstb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233642-f4xqstb"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public final class ValidationUtils {\n\n    private static final Validator DEFAULT_VALIDATOR = Validation.buildDefaultValidatorFactory().getValidator();\n\n    private ValidationUtils() {\n    }\n\n    /**\n     * 验证基于注解的对象\n     *\n     * @param target\n     */\n    public static \u003cT\u003e String validateReq(T target, boolean throwException) {\n        if (null == target) {\n            return errorProcess(\"校验对象不能为空\", throwException);\n        } else {\n            Set\u003cConstraintViolation\u003cT\u003e\u003e constraintViolations = DEFAULT_VALIDATOR.validate(target);\n            ConstraintViolation\u003cT\u003e constraintViolation = Iterables.getFirst(constraintViolations, null);\n            if (constraintViolation != null) {\n                // 用户可以指定抛异常还是返回错误信息\n                return errorProcess(constraintViolation.getPropertyPath() + \":\" + constraintViolation.getMessage(),\n                        throwException);\n            }\n        }\n        return \"\";\n    }\n\n    private static String errorProcess(String errorMsg, boolean throwException) {\n        if (throwException) {\n            throw new InvalidParameterException(errorMsg);\n        }\n        return errorMsg;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		}
	]
}