{
	"ID": "20210707234309-uqqihie",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20210707234309-uqqihie",
		"title": "102.Spring Boot",
		"type": "doc",
		"updated": "20210707234453"
	},
	"Children": [
		{
			"ID": "20210707234309-m7g2s4h",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707234309-m7g2s4h"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "Spring Boot 出世"
				}
			]
		},
		{
			"ID": "20210707234309-abiiyr2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-abiiyr2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "随着动态语言的流行 (Ruby、Groovy、Scala、Node.js)，Java 的开发显得格外的笨重：J2EE 笨重的开发、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "繁多的配置"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "依赖管理的耗时耗力"
				},
				{
					"Type": "NodeText",
					"Data": "、低下的开发效率、复杂的部署流程以及第三方技术集成难度大。"
				}
			]
		},
		{
			"ID": "20210707234309-t9ojeqx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-t9ojeqx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在上述环境下，Spring Boot 应运而生。它使用 “"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "约定大于配置"
				},
				{
					"Type": "NodeText",
					"Data": "” （项目中存在大量的配置，此外还内置了一个习惯性的配置，让你无需手动进行配置）的理念让你的项目快速的运行起来。使用 Spring Boot 很容易创建一个独立运行（运行 Jar，内嵌 Servlet 容器）准生产级别的基于 Spring 框架的项目，使用 Spring Boot 你可以不用或者只需很少的 Spring 配置。Spring Boot 可以称之为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "新一代 Jakarta EE 开发标准"
				}
			]
		},
		{
			"ID": "20210707234309-e6aiwgk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707234309-e6aiwgk"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "优点"
				}
			]
		},
		{
			"ID": "20210707234309-rboc9yi",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707234309-rboc9yi"
			},
			"Children": [
				{
					"ID": "20210707234309-ly7vpzz",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-ly7vpzz"
					},
					"Children": [
						{
							"ID": "20210707234309-r919wxv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-r919wxv"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "快速构建项目：SpringBoot 不是对 Spring 功能上的增强，而是提供了一种快速使用 Spring 的方式"
								}
							]
						}
					]
				},
				{
					"ID": "20210707234309-kam0kxd",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-kam0kxd"
					},
					"Children": [
						{
							"ID": "20210707234309-lmjdwnl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-lmjdwnl"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对主流开发框架的无配置集成"
								}
							]
						}
					]
				},
				{
					"ID": "20210707234309-uqacep8",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-uqacep8"
					},
					"Children": [
						{
							"ID": "20210707234309-4w1c692",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-4w1c692"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "项目可独立运行，无需外部依赖 Servlet 容器"
								}
							]
						}
					]
				},
				{
					"ID": "20210707234309-hyptib5",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-hyptib5"
					},
					"Children": [
						{
							"ID": "20210707234309-o7g1mqb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-o7g1mqb"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "提供运行时的应用监控"
								}
							]
						}
					]
				},
				{
					"ID": "20210707234309-d4b2xqz",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-d4b2xqz"
					},
					"Children": [
						{
							"ID": "20210707234309-dmm4h6s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-dmm4h6s"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "极大地提高了开发、部署效率"
								}
							]
						}
					]
				},
				{
					"ID": "20210707234309-xi3ffvd",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-xi3ffvd"
					},
					"Children": [
						{
							"ID": "20210707234309-aofvb1w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-aofvb1w"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "与云计算的天然集成"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707234309-cqvnukv",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707234309-cqvnukv"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "核心优势 🔥"
				}
			]
		},
		{
			"ID": "20210707234309-6cntnnn",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707234309-6cntnnn"
			},
			"Children": [
				{
					"ID": "20210707234309-ct2aewj",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-ct2aewj"
					},
					"Children": [
						{
							"ID": "20210707234309-dfmxg8e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-dfmxg8e"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "起步依赖（starter-*"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "）"
								}
							]
						},
						{
							"ID": "20210707234309-tckimm2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-tckimm2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "起步依赖本质是一个 Maven 项目对象模型（POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707234309-b29vmk3",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-b29vmk3"
					},
					"Children": [
						{
							"ID": "20210707234309-jadk7ej",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-jadk7ej"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "自动配置（配置哪了？"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "就是配置 Bean，加入容器"
								},
								{
									"Type": "NodeText",
									"Data": "）"
								}
							]
						},
						{
							"ID": "20210707234309-63al95a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-63al95a"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将之前固定的配置采用运行时 Spring Boot "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "自动配置"
								},
								{
									"Type": "NodeText",
									"Data": "方式实现，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "减少了繁琐的配置过程"
								},
								{
									"Type": "NodeText",
									"Data": "，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "其实就是 IoC 中最重要一点，将需要的 Bean 自动加入容器中"
								}
							]
						},
						{
							"ID": "20210707234309-ui0ceb6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-ui0ceb6"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Spring Boot 的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定 Spring 配置应该用哪个，不该用哪个。该过程是 Spring 自动完成的。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707234309-p4g0dqb",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707234309-p4g0dqb"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "与 Spring（MVC）等区别"
				}
			]
		},
		{
			"ID": "20210707234309-q5hdjxm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-q5hdjxm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Spring MVC 是一个基于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Java"
				},
				{
					"Type": "NodeText",
					"Data": "实现的 MVC 设计模型的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "请求驱动"
				},
				{
					"Type": "NodeText",
					"Data": "类型的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "轻量级 WEB 框架"
				}
			]
		},
		{
			"ID": "20210707234309-9s88jv3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-9s88jv3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Spring 狭义上指的是 IoC、DI、AOP 等 Spring Framework 功能的集合，但是广义上它是指所有 Spring 产品，如 Spring MVC、Spring Boot、Spring Cloud 等等"
				}
			]
		},
		{
			"ID": "20210707234309-7pkfejw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-7pkfejw"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Spring Boot 是基于 Spring Framework 开发的让创建 Spring 应用更方便的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "工具"
				},
				{
					"Type": "NodeText",
					"Data": "，可以利用它的特性来更方便的使用 Spring MVC 等 Spring Framework"
				}
			]
		},
		{
			"ID": "20210707234309-zyzukv1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707234309-zyzukv1"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "Hello World"
				}
			]
		},
		{
			"ID": "20210707234309-gotpw89",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707234309-gotpw89"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "POM"
				}
			]
		},
		{
			"ID": "20210707234309-7bqxa4t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-7bqxa4t"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 Spring Initializr 初始化 Spring Boot 项目： https://start.spring.io/，IDEA中自带。根据需求选择需要的依赖："
				}
			]
		},
		{
			"ID": "20210707234309-zbdsrcj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "eG1s",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707234309-zbdsrcj"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n\t\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n  \u003c!--所有的springboot工程都必须继承spring-boot-starter-parent，也可以去掉并自定义--\u003e\n\t\u003cparent\u003e\n\t\t\u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e\n\t\t\u003cartifactId\u003espring-boot-starter-parent\u003c/artifactId\u003e\n\t\t\u003cversion\u003e2.2.2.RELEASE\u003c/version\u003e\n\t\t\u003crelativePath/\u003e \u003c!-- lookup parent from repository --\u003e\n\t\u003c/parent\u003e\n\n  \u003c!--该项目的Maven坐标--\u003e\n\t\u003cgroupId\u003etop.conanan\u003c/groupId\u003e\n\t\u003cartifactId\u003estudy-spring-boot\u003c/artifactId\u003e\n\t\u003cversion\u003e1.0.0-SNAPSHOT\u003c/version\u003e\n\n\t\u003cname\u003estudy-spring-boot\u003c/name\u003e\n\t\u003cdescription\u003eDemo project for Spring Boot\u003c/description\u003e\n\n  \u003c!--选择JDK版本后自动配置--\u003e\n\t\u003cproperties\u003e\n\t\t\u003cjava.version\u003e11\u003c/java.version\u003e \u003c!--Java8 这里显示为1.8--\u003e\n\t\u003c/properties\u003e\n\n  \u003c!--依赖--\u003e\n\t\u003cdependencies\u003e\n    \u003c!--web功能的起步依赖，若是个普通Java工程，则会是spring-boot-starter--\u003e\n    \u003cdependency\u003e\n      \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e\n      \u003cartifactId\u003espring-boot-starter-web\u003c/artifactId\u003e\n    \u003c/dependency\u003e\n    \u003c!--自动添加的测试配置。Spring Boot 2.2.2目前使用的是 JUnit5--\u003e\n\t\t\u003cdependency\u003e\n\t\t\t\u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e\n\t\t\t\u003cartifactId\u003espring-boot-starter-test\u003c/artifactId\u003e\n\t\t\t\u003cscope\u003etest\u003c/scope\u003e\n\t\t\t\u003cexclusions\u003e\n\t\t\t\t\u003cexclusion\u003e\n\t\t\t\t\t\u003cgroupId\u003eorg.junit.vintage\u003c/groupId\u003e\n\t\t\t\t\t\u003cartifactId\u003ejunit-vintage-engine\u003c/artifactId\u003e\n\t\t\t\t\u003c/exclusion\u003e\n\t\t\t\u003c/exclusions\u003e\n\t\t\u003c/dependency\u003e\n\n    \u003c!--Spring Boot DevTools提供快速应用程序重启，LiveReload和配置，以增强开发体验。--\u003e\n\t\t\u003cdependency\u003e\n\t\t\t\u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e\n\t\t\t\u003cartifactId\u003espring-boot-devtools\u003c/artifactId\u003e\n\t\t\t\u003cscope\u003eruntime\u003c/scope\u003e\n\t\t\t\u003coptional\u003etrue\u003c/optional\u003e\n\t\t\u003c/dependency\u003e\n    \u003c!--Lombok Java注释库，有助于减少样板代码。--\u003e\n\t\t\u003cdependency\u003e\n\t\t\t\u003cgroupId\u003eorg.projectlombok\u003c/groupId\u003e\n\t\t\t\u003cartifactId\u003elombok\u003c/artifactId\u003e\n\t\t\t\u003coptional\u003etrue\u003c/optional\u003e\n\t\t\u003c/dependency\u003e\n    \u003c!--Spring配置处理器为开发人员生成元数据，以便在使用自定义配置键时提供上下文帮助和“代码完成”（ex.application.properties）--\u003e\n\t\t\u003cdependency\u003e\n\t\t\t\u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e\n\t\t\t\u003cartifactId\u003espring-boot-configuration-processor\u003c/artifactId\u003e\n\t\t\t\u003coptional\u003etrue\u003c/optional\u003e\n\t\t\u003c/dependency\u003e\n\n    \u003c!--Spring Boot Actuator支持内置（或自定义）端点，可以监控和管理应用程序，例如应用程序运行状况，指标，会话等。用于 Ops --\u003e\n    \u003cdependency\u003e\n      \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e\n      \u003cartifactId\u003espring-boot-starter-actuator\u003c/artifactId\u003e\n    \u003c/dependency\u003e\n\t\u003c/dependencies\u003e\n\n  \u003c!--自动添加的maven插件，这个插件可将应用打包成可执行的jar包。可以通过java -jar 包名来运行应用--\u003e\n\t\u003cbuild\u003e\n\t\t\u003cplugins\u003e\n\t\t\t\u003cplugin\u003e\n\t\t\t\t\u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e\n\t\t\t\t\u003cartifactId\u003espring-boot-maven-plugin\u003c/artifactId\u003e\n\t\t\t\u003c/plugin\u003e\n\t\t\u003c/plugins\u003e\n\t\u003c/build\u003e\n\u003c/project\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707234309-r4ztc2z",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707234309-r4ztc2z"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "Application"
				}
			]
		},
		{
			"ID": "20210707234309-afibk8h",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707234309-afibk8h"
			},
			"Children": [
				{
					"ID": "20210707234309-k5wjzsw",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-k5wjzsw"
					},
					"Children": [
						{
							"ID": "20210707234309-v70pm5b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-v70pm5b"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "默认生成的 Spring Boot 项目。主程序已经生成好了，我们只需要我们自己的逻辑"
								}
							]
						},
						{
							"ID": "20210707234309-e776vtg",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707234309-e776vtg"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "//声明该类是一个SpringBoot引导类\n@SpringBootApplication\npublic class StudySpringBootApplication {\n\t//main是java程序的入口\n\tpublic static void main(String[] args) {\n    //run方法 表示运行SpringBoot的引导类  run参数就是SpringBoot引导类的字节码对象\n\t\tSpringApplication.run(StudySpringBootApplication.class, args);\n\t}\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707234309-7gpxax4",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707234309-7gpxax4"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "resources"
				}
			]
		},
		{
			"ID": "20210707234309-exrxqom",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-exrxqom"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "目录结构"
				}
			]
		},
		{
			"ID": "20210707234309-xidqziu",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707234309-xidqziu"
			},
			"Children": [
				{
					"ID": "20210707234309-3cyzlgp",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-3cyzlgp"
					},
					"Children": [
						{
							"ID": "20210707234309-7njyacx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-7njyacx"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "static"
								},
								{
									"Type": "NodeText",
									"Data": "：保存所有的静态资源； js、css、images 等"
								}
							]
						}
					]
				},
				{
					"ID": "20210707234309-5y9npol",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-5y9npol"
					},
					"Children": [
						{
							"ID": "20210707234309-4lho9lb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-4lho9lb"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "templates"
								},
								{
									"Type": "NodeText",
									"Data": "：保存所有的模板页面；（Spring Boot 默认 jar 包使用嵌入式的 Tomcat，默认不支持 JSP 页面）；可以使用模板引擎如"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "freemarker"
								},
								{
									"Type": "NodeText",
									"Data": "、"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "thymeleaf"
								}
							]
						}
					]
				},
				{
					"ID": "20210707234309-fwucnbr",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-fwucnbr"
					},
					"Children": [
						{
							"ID": "20210707234309-0c862p7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-0c862p7"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "application.properties"
								},
								{
									"Type": "NodeText",
									"Data": "：Spring Boot 应用的配置文件，可以修改一些默认设置"
								}
							]
						}
					]
				},
				{
					"ID": "20210707234309-ajzps7b",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-ajzps7b"
					},
					"Children": [
						{
							"ID": "20210707234309-29wkm6a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-29wkm6a"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可以手动新建目录，如"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "mapper"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707234309-4qv8hn2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707234309-4qv8hn2"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "HelloController"
				}
			]
		},
		{
			"ID": "20210707234309-tw3b6wp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-tw3b6wp"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "必须在引导类"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "StudySpringBootApplication"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "同级包或者子级包"
				},
				{
					"Type": "NodeText",
					"Data": "中创建，才能被扫描到"
				}
			]
		},
		{
			"ID": "20210707234309-agl8h2v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707234309-agl8h2v"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@RestController\npublic class HelloController {\n\n    @GetMapping(\"/hello\")\n    public String hello(){\n        return \"study spring boot\";\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707234309-b9mpcal",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-b9mpcal"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "run 后可使用 Terminal 测试："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "curl http://localhost:8080/hello"
				}
			]
		},
		{
			"ID": "20210707234309-sgdss27",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-sgdss27"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上述 POM 中有 actuator 用于检查应用状态，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "curl http://localhost:8080/actuator/health"
				},
				{
					"Type": "NodeText",
					"Data": "，返回如下，注意只能用于 run 模式运行的应用，debug 模式不起作用"
				}
			]
		},
		{
			"ID": "20210707234309-fu0nerw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "anNvbg==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707234309-fu0nerw"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "anNvbg=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "{ \"status\": \"UP\" }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707234309-skvzy8m",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707234309-skvzy8m"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "Test"
				}
			]
		},
		{
			"ID": "20210707234309-53eghmc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707234309-53eghmc"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// Spring Boot 2.2.2目前使用的是 JUnit5。很多处和 JUnit4 不一样。如不需要添加注解 @RunWith(SpringRunner.class)\n// 使用webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT后，每次启动测试都会随机生成一个 port\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass StudySpringBootApplicationTests {\n\n\t@Autowired\n\tprivate HelloController helloController;\n\n\t@LocalServerPort\n\tprivate int port;\n\n  // Test 特有的，只需注入即可\n\t@Autowired\n\tprivate TestRestTemplate restTemplate;\n\n\t@Test\n\tvoid hello() {\n\t\tSystem.out.println(\"hello\");\n\t\tSystem.out.println(helloController);\n\t}\n\n\t@Test\n\tpublic void greetingShouldReturnDefaultMessage() throws Exception {\n\t\tString s = restTemplate.getForObject(\"http://localhost:\" + port + \"/hello\", String.class);\n\t\tSystem.out.println(s);\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707234309-xuhkfh9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-xuhkfh9"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@SpringBootTest"
				},
				{
					"Type": "NodeText",
					"Data": "annotation tells Spring Boot to go and look for a main configuration class (one with "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@SpringBootApplication"
				},
				{
					"Type": "NodeText",
					"Data": " for instance), and use that to start a Spring application context. You can run this test in your IDE or on the command line ("
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "mvn test"
				},
				{
					"Type": "NodeText",
					"Data": " or "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "gradle test"
				},
				{
					"Type": "NodeText",
					"Data": ") and it should pass."
				}
			]
		},
		{
			"ID": "20210707234309-ntg8sl6",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707234309-ntg8sl6"
			},
			"Children": [
				{
					"ID": "20210707234309-3oyjmpf",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-3oyjmpf"
					},
					"Children": [
						{
							"ID": "20210707234309-lsbqr1r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-lsbqr1r"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Maven 打包："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "mvn clean package -Dmaven.test.skip"
								}
							]
						},
						{
							"ID": "20210707234309-6dc8krp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-6dc8krp"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可以看到带有"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": ".original"
								},
								{
									"Type": "NodeText",
									"Data": "的为原始包，和带有所有依赖（如 Tomcat 等）的 uber"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "jar"
								},
								{
									"Type": "NodeText",
									"Data": "包，可以执行"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "java -jar"
								},
								{
									"Type": "NodeText",
									"Data": "启动，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "java -jar springboot.jar --spring.profiles.active=prod"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707234309-qqkb9pk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707234309-qqkb9pk"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "起步依赖 — starter 🔥"
				}
			]
		},
		{
			"ID": "20210707234309-7pk4qn6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-7pk4qn6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "按住 Ctrl 点击 pom.xml 中的 spring-boot-starter-parent，跳转到了 spring-boot-starter-parent 的 pom.xml，xml 配置如下（配置了配置文件名称位置等信息）："
				}
			]
		},
		{
			"ID": "20210707234309-okqqdrw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "eG1s",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707234309-okqqdrw"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cparent\u003e\n    \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e\n    \u003cartifactId\u003espring-boot-dependencies\u003c/artifactId\u003e\n    \u003cversion\u003e2.1.2.RELEASE\u003c/version\u003e\n    \u003crelativePath\u003e../../spring-boot-dependencies\u003c/relativePath\u003e\n\u003c/parent\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707234309-n1szjqy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-n1szjqy"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "按住 Ctrl 点击 pom.xml 中的 spring-boot-dependencies，跳转到了 spring-boot-dependencies 的 pom.xml，xml 配置如下："
				}
			]
		},
		{
			"ID": "20210707234309-mcpkb3v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "eG1s",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707234309-mcpkb3v"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cproperties\u003e\n    \u003cactivemq.version\u003e5.15.8\u003c/activemq.version\u003e\n    \u003cantlr2.version\u003e2.7.7\u003c/antlr2.version\u003e\n    \u003cappengine-sdk.version\u003e1.9.71\u003c/appengine-sdk.version\u003e\n    \u003cartemis.version\u003e2.6.3\u003c/artemis.version\u003e\n    \u003caspectj.version\u003e1.9.2\u003c/aspectj.version\u003e\n    ......\n\u003c/properties\u003e\n\u003cdependencyManagement\u003e\n    \u003cdependencies\u003e\n        \u003cdependency\u003e\n            \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e\n            \u003cartifactId\u003espring-boot\u003c/artifactId\u003e\n            \u003cversion\u003e2.1.2.RELEASE\u003c/version\u003e\n        \u003c/dependency\u003e\n        \u003cdependency\u003e\n            \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e\n            \u003cartifactId\u003espring-boot-test\u003c/artifactId\u003e\n            \u003cversion\u003e2.1.2.RELEASE\u003c/version\u003e\n        \u003c/dependency\u003e\n        ......\n    \u003c/dependencies\u003e\n\u003c/dependencyManagement\u003e\n\u003cbuild\u003e\n    \u003cpluginManagement\u003e\n        \u003cplugins\u003e\n            \u003cplugin\u003e\n                \u003cgroupId\u003eorg.apache.johnzon\u003c/groupId\u003e\n                \u003cartifactId\u003ejohnzon-maven-plugin\u003c/artifactId\u003e\n                \u003cversion\u003e${johnzon.version}\u003c/version\u003e\n            \u003c/plugin\u003e\n            ......\n        \u003c/plugins\u003e\n    \u003c/pluginManagement\u003e\n\u003c/build\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707234309-jbpu04f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-jbpu04f"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从上面的 spring-boot-dependencies 的 pom.xml 中我们可以发现，一部分坐标的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "版本、依赖管理、插件管理"
				},
				{
					"Type": "NodeText",
					"Data": "已经定义好，所以我们的 SpringBoot 工程继承 spring-boot-starter-parent 后已经具备"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "版本锁定"
				},
				{
					"Type": "NodeText",
					"Data": "等配置了。所以起步依赖作用就是进行"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "依赖的传递"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210707234309-td0kcfc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-td0kcfc"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "同理 spring-boot-starter-web 就是将 web 开发要使用的 spring-web、spring-webmvc 等坐标进行了“打包”，这样我们的工程只要引入 spring-boot-starter-web 起步依赖的坐标就可以进行 web 开发了，同样体现了依赖传递的作用。"
				}
			]
		},
		{
			"ID": "20210707234309-ynrz9na",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707234309-ynrz9na"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "自动配置 — @SpringBootApplication 🔥"
				}
			]
		},
		{
			"ID": "20210707234309-pyvu5wy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-pyvu5wy"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "按住 Ctrl 点击查看启动类 MySpringBootApplication 上的注解@SpringBootApplication，源码如下："
				}
			]
		},
		{
			"ID": "20210707234309-anbfgew",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707234309-anbfgew"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(excludeFilters = {\n\t\t@Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),\n\t\t@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })\npublic @interface SpringBootApplication {\n\n\t/**\n\t * Exclude specific auto-configuration classes such that they will never be applied.\n\t * @return the classes to exclude\n\t */\n\t@AliasFor(annotation = EnableAutoConfiguration.class)\n\tClass\u003c?\u003e[] exclude() default {};\n\n\t... ... ...\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707234309-e8qm05h",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707234309-e8qm05h"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "@SpringBootConfiguration"
				}
			]
		},
		{
			"ID": "20210707234309-bedajdt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-bedajdt"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "等同与"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@Configuration"
				},
				{
					"Type": "NodeText",
					"Data": "，既标注该类是 Spring 的一个配置类"
				}
			]
		},
		{
			"ID": "20210707234309-3dsp8ha",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707234309-3dsp8ha"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "@EnableAutoConfiguration"
				}
			]
		},
		{
			"ID": "20210707234309-3tgu9bg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-3tgu9bg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SpringBoot 自动配置功能开启。不是用于自己写的 Bean，而是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "配置三方库中的 Bean"
				}
			]
		},
		{
			"ID": "20210707234309-8up3jxh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-8up3jxh"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "按住 Ctrl 点击查看该注解"
				}
			]
		},
		{
			"ID": "20210707234309-ck8bfnl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707234309-ck8bfnl"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@AutoConfigurationPackage\n@Import(AutoConfigurationImportSelector.class)\npublic @interface EnableAutoConfiguration {\n\t... ... ...\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707234309-01c29ys",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210707234309-01c29ys"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "@AutoConfigurationPackage"
				}
			]
		},
		{
			"ID": "20210707234309-0n3weld",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-0n3weld"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自动配置包"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "，"
				},
				{
					"Type": "NodeText",
					"Data": "如下注解的简写"
				}
			]
		},
		{
			"ID": "20210707234309-nb75jkw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707234309-nb75jkw"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Import(AutoConfigurationPackages.Registrar.class)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707234309-i3r81ir",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210707234309-i3r81ir"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "#### "
				},
				{
					"Type": "NodeText",
					"Data": "@Import"
				}
			]
		},
		{
			"ID": "20210707234309-rtla6z4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-rtla6z4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Spring 底层注解"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@Import"
				},
				{
					"Type": "NodeText",
					"Data": "，给容器中导入一个组件；导入的组件由"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AutoConfigurationImportSelector.class"
				},
				{
					"Type": "NodeText",
					"Data": "指定，这个类有一个方法，通过注解 metadata，将主配置类（"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@SpringBootApplication"
				},
				{
					"Type": "NodeText",
					"Data": "）所在包及下面所有子包里面的所有组件扫描到 Spring 容器"
				}
			]
		},
		{
			"ID": "20210707234309-p7lwwn2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-p7lwwn2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "按住 Ctrl 点击查看"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "AutoConfigurationImportSelector"
				},
				{
					"Type": "NodeText",
					"Data": "源码"
				}
			]
		},
		{
			"ID": "20210707234309-ro0cgbm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707234309-ro0cgbm"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public String[] selectImports(AnnotationMetadata annotationMetadata) {\n    ... ... ...\n        List\u003cString\u003e configurations = getCandidateConfigurations(annotationMetadata,\n                                                                 attributes);\n    configurations = removeDuplicates(configurations);\n    Set\u003cString\u003e exclusions = getExclusions(annotationMetadata, attributes);\n    checkExcludedClasses(configurations, exclusions);\n    configurations.removeAll(exclusions);\n    configurations = filter(configurations, autoConfigurationMetadata);\n    fireAutoConfigurationImportEvents(configurations, exclusions);\n    return StringUtils.toStringArray(configurations);\n}\n\n\nprotected List\u003cString\u003e getCandidateConfigurations(AnnotationMetadata metadata,\n                                                  AnnotationAttributes attributes) {\n    List\u003cString\u003e configurations = SpringFactoriesLoader.loadFactoryNames(\n        getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());\n\n    return configurations;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707234309-rln6dta",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-rln6dta"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SpringFactoriesLoader.loadFactoryNames"
				},
				{
					"Type": "NodeText",
					"Data": " 方法的作用就是从"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "META-INF/spring.factories"
				},
				{
					"Type": "NodeText",
					"Data": "文件中读取指定类对应的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "全类名"
				},
				{
					"Type": "NodeText",
					"Data": "的列表，如 xxxAutoConfiguration"
				}
			]
		},
		{
			"ID": "20210707234309-w3kbrpy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-w3kbrpy",
				"updated": "20210707234453"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "1550170881470.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "./assets/1550170881470-20210707234453-4yqq2cq.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				}
			]
		},
		{
			"ID": "20210707234309-m5xt9n6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-m5xt9n6"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "spring-autoconfigure-metadata.properties"
				},
				{
					"Type": "NodeText",
					"Data": " 文件中有关自动配置的配置信息如下："
				}
			]
		},
		{
			"ID": "20210707234309-0lss15v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707234309-0lss15v"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\\n......\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707234309-a9ur58y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-a9ur58y"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面配置文件存在大量的以 Configuration 为结尾的类名称，这些类就是存有自动配置信息的类，而 SpringApplication 在获取这些类名后再加载"
				}
			]
		},
		{
			"ID": "20210707234309-u8pmyx6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-u8pmyx6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ServletWebServerFactoryAutoConfiguration"
				},
				{
					"Type": "NodeText",
					"Data": "为例来分析源码："
				}
			]
		},
		{
			"ID": "20210707234309-q4sh18v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707234309-q4sh18v"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Configuration\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@ConditionalOnClass(ServletRequest.class)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@EnableConfigurationProperties(ServerProperties.class)\n@Import({ ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,\n\t\tServletWebServerFactoryConfiguration.EmbeddedTomcat.class,\n\t\tServletWebServerFactoryConfiguration.EmbeddedJetty.class,\n\t\tServletWebServerFactoryConfiguration.EmbeddedUndertow.class })\npublic class ServletWebServerFactoryAutoConfiguration {\n\t......\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707234309-gvkmzf8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-gvkmzf8"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@EnableConfigurationProperties(ServerProperties.class) "
				},
				{
					"Type": "NodeText",
					"Data": "代表加载"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ServerProperties"
				},
				{
					"Type": "NodeText",
					"Data": "服务器配置属性类"
				}
			]
		},
		{
			"ID": "20210707234309-mzinqhx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-mzinqhx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "进入 ServerProperties.class 源码如下："
				}
			]
		},
		{
			"ID": "20210707234309-zlnci24",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707234309-zlnci24"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@ConfigurationProperties(prefix = \"server\", ignoreUnknownFields = true)\npublic class ServerProperties {\n    /**\n\t * Server HTTP port.\n\t */\n    private Integer port;\n    /**\n\t * Network address to which the server should bind.\n\t */\n    private InetAddress address;\n\t......\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707234309-55dh4ta",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-55dh4ta"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "prefix = \u0026quot;server\u0026quot;"
				},
				{
					"Type": "NodeText",
					"Data": " 表示 SpringBoot 配置文件中的前缀，SpringBoot 会将配置文件中以 server 开始的属性映射到该类的字段中。如在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "application.properties"
				},
				{
					"Type": "NodeText",
					"Data": "中配置"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "server.port=80"
				},
				{
					"Type": "NodeText",
					"Data": "即可改变当前服务器的 HTTP 端口号"
				}
			]
		},
		{
			"ID": "20210707234309-s3g592h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-s3g592h"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "自动配置总结"
				}
			]
		},
		{
			"ID": "20210707234309-8e5zszy",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707234309-8e5zszy"
			},
			"Children": [
				{
					"ID": "20210707234309-c0vttfj",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-c0vttfj"
					},
					"Children": [
						{
							"ID": "20210707234309-sa2bogx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-sa2bogx"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "SpringBoot 启动会加载大量的自动配置类"
								}
							]
						}
					]
				},
				{
					"ID": "20210707234309-2hm34th",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-2hm34th"
					},
					"Children": [
						{
							"ID": "20210707234309-6zcondp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-6zcondp"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "我们看我们需要的功能有没有 SpringBoot 默认写好的自动配置类；"
								}
							]
						}
					]
				},
				{
					"ID": "20210707234309-lbj7636",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-lbj7636"
					},
					"Children": [
						{
							"ID": "20210707234309-smvj8r7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-smvj8r7"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707234309-qmjiuu3",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-qmjiuu3"
					},
					"Children": [
						{
							"ID": "20210707234309-ye8si80",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-ye8si80"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "给容器中自动配置类添加组件的时候，会从 properties 类中获取某些属性。我们就可以在配置文件中指定这些属性的值；"
								}
							]
						}
					]
				},
				{
					"ID": "20210707234309-6p2e09q",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-6p2e09q"
					},
					"Children": [
						{
							"ID": "20210707234309-1zoltsj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-1zoltsj"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "自动配置类对应属性类"
								}
							]
						},
						{
							"ID": "20210707234309-ostcn8x",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707234309-ostcn8x"
							},
							"Children": [
								{
									"ID": "20210707234309-3qxpmoy",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707234309-3qxpmoy"
									},
									"Children": [
										{
											"ID": "20210707234309-23rn78x",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707234309-23rn78x"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "xxxxAutoConfigurartion：自动配置类；给容器中添加组件"
												}
											]
										}
									]
								},
								{
									"ID": "20210707234309-v3xzgz7",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707234309-v3xzgz7"
									},
									"Children": [
										{
											"ID": "20210707234309-dbc8xf8",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707234309-dbc8xf8"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "xxxxProperties:封装配置文件中相关属性；"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707234309-9fc7sz1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707234309-9fc7sz1"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "SPI 机制应用 🔥"
				}
			]
		},
		{
			"ID": "20210707234309-0gck59q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-0gck59q"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Service Provider Interface，应对变化的解决方案。基于 Interface 接口 + 策略模式 + 配置文件"
				}
			]
		},
		{
			"ID": "20210707234309-5vkfarn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-5vkfarn"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之前讲过的 @Primary 和 @Conditionxx 也可以解决，但是关注的粒度是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "具体"
				},
				{
					"Type": "NodeText",
					"Data": "类、对象"
				}
			]
		},
		{
			"ID": "20210707234309-29iq3xs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-29iq3xs"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而 SPI 关注的是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "整体解决方案"
				},
				{
					"Type": "NodeText",
					"Data": "，关注许多类，对象的整体！"
				}
			]
		},
		{
			"ID": "20210707234309-f8dm3hs",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707234309-f8dm3hs"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "@ComponentScan"
				}
			]
		},
		{
			"ID": "20210707234309-f1rwmhz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-f1rwmhz"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "组件扫描，但是仅扫描注解了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@SpringBootApplication"
				},
				{
					"Type": "NodeText",
					"Data": "类所在的同级包和子级包"
				}
			]
		},
		{
			"ID": "20210707234309-perndwy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707234309-perndwy"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "配置信息的查询"
				}
			]
		},
		{
			"ID": "20210707234309-f1enc1c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-f1enc1c"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SpringBoot 的配置文件，主要的目的就是对配置信息进行修改的，但在配置时的 key 从哪里去查询呢？我们可以查阅"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://docs.spring.io/spring-boot/docs/2.1.2.RELEASE/reference/htmlsingle/#common-application-properties",
					"TextMarkTextContent": "官方文档"
				}
			]
		},
		{
			"ID": "20210707234309-uh8m2kh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-uh8m2kh"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "常用的配置摘抄如下："
				}
			]
		},
		{
			"ID": "20210707234309-b4mnt9b",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "cHJvcGVydGllcw==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707234309-b4mnt9b"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cHJvcGVydGllcw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# QUARTZ SCHEDULER (QuartzProperties)\nspring.quartz.jdbc.initialize-schema=embedded # Database schema initialization mode.\nspring.quartz.jdbc.schema=classpath:org/quartz/impl/jdbcjobstore/tables_@@platform@@.sql # Path to the SQL file to use to initialize the database schema.\nspring.quartz.job-store-type=memory # Quartz job store type.\nspring.quartz.properties.*= # Additional Quartz Scheduler properties.\n\n# ----------------------------------------\n# WEB PROPERTIES\n# ----------------------------------------\n\n# EMBEDDED SERVER CONFIGURATION (ServerProperties)\nserver.port=8080 # Server HTTP port.\nserver.servlet.context-path= # Context path of the application.\nserver.servlet.path=/ # Path of the main dispatcher servlet.\n\n# HTTP encoding (HttpEncodingProperties)\nspring.http.encoding.charset=UTF-8 # Charset of HTTP requests and responses. Added to the \"Content-Type\" header if not set explicitly.\n\n# JACKSON (JacksonProperties)\nspring.jackson.date-format= # Date format string or a fully-qualified date format class name. For instance, `yyyy-MM-dd HH:mm:ss`.\n\n# SPRING MVC (WebMvcProperties)\nspring.mvc.servlet.load-on-startup=-1 # Load on startup priority of the dispatcher servlet.\nspring.mvc.static-path-pattern=/** # Path pattern used for static resources.\nspring.mvc.view.prefix= # Spring MVC view prefix.\nspring.mvc.view.suffix= # Spring MVC view suffix.\n\n# DATASOURCE (DataSourceAutoConfiguration \u0026 DataSourceProperties)\nspring.datasource.driver-class-name= # Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.\nspring.datasource.password= # Login password of the database.\nspring.datasource.url= # JDBC URL of the database.\nspring.datasource.username= # Login username of the database.\n\n# JEST (Elasticsearch HTTP client) (JestProperties)\nspring.elasticsearch.jest.password= # Login password.\nspring.elasticsearch.jest.proxy.host= # Proxy host the HTTP client should use.\nspring.elasticsearch.jest.proxy.port= # Proxy port the HTTP client should use.\nspring.elasticsearch.jest.read-timeout=3s # Read timeout.\nspring.elasticsearch.jest.username= # Login username.\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707234309-cc8nfo9",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707234309-cc8nfo9"
			},
			"Children": [
				{
					"ID": "20210707234309-9fd6twz",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-9fd6twz"
					},
					"Children": [
						{
							"ID": "20210707234309-7jw3le3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-7jw3le3"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们可以通过在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "配置文件中启用 debug=true 属性；来让控制台打印自动配置报告"
								},
								{
									"Type": "NodeText",
									"Data": "，这样我们就可以很方便的知道哪些自动配置类生效；"
								}
							]
						},
						{
							"ID": "20210707234309-6tncwho",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20210707234309-6tncwho"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "=========================\nAUTO-CONFIGURATION REPORT\n=========================\n\nPositive matches:（自动配置类启用的）\n-----------------\n\n   DispatcherServletAutoConfiguration matched:\n      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)\n      - @ConditionalOnWebApplication (required) found StandardServletEnvironment (OnWebApplicationCondition)\n\n\nNegative matches:（没有启动，没有匹配成功的自动配置类）\n-----------------\n\n   ActiveMQAutoConfiguration:\n      Did not match:\n         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' (OnClassCondition)\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707234309-buw9vkv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707234309-buw9vkv"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "版本号"
				}
			]
		},
		{
			"ID": "20210707234309-wihavvm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707234309-wihavvm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "2.2.1.RELEASE"
				},
				{
					"Type": "NodeText",
					"Data": "，Maven 中显示的版本号，文档中不一定这样显示"
				}
			]
		},
		{
			"ID": "20210707234309-hz5z8ot",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707234309-hz5z8ot"
			},
			"Children": [
				{
					"ID": "20210707234309-dgf2jh1",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-dgf2jh1"
					},
					"Children": [
						{
							"ID": "20210707234309-v7vi3ux",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-v7vi3ux"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2：主版本。极有可能底层改变，无法兼容旧版本"
								}
							]
						}
					]
				},
				{
					"ID": "20210707234309-rs8mpho",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-rs8mpho"
					},
					"Children": [
						{
							"ID": "20210707234309-rj2avon",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-rj2avon"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2：次版本。发布新特性，基本需要保证兼容"
								}
							]
						}
					]
				},
				{
					"ID": "20210707234309-tvgsssy",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-tvgsssy"
					},
					"Children": [
						{
							"ID": "20210707234309-7p4hxzr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-7p4hxzr"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1：增量版本。修复 bug，保证兼容（也不确定）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707234309-v5ulfll",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707234309-v5ulfll"
					},
					"Children": [
						{
							"ID": "20210707234309-z22eg78",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707234309-z22eg78"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "RELEASE：里程碑。版本的发布计划、状态"
								}
							]
						},
						{
							"ID": "20210707234309-r401zob",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707234309-r401zob"
							},
							"Children": [
								{
									"ID": "20210707234309-i5tn5m6",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707234309-i5tn5m6"
									},
									"Children": [
										{
											"ID": "20210707234309-9336prs",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707234309-9336prs"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "GA（General Availability）：Spring Boot 优先选择"
												}
											]
										}
									]
								},
								{
									"ID": "20210707234309-vtlj49z",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707234309-vtlj49z"
									},
									"Children": [
										{
											"ID": "20210707234309-h462mdv",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707234309-h462mdv"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "RC：基本和 GA 等同"
												}
											]
										}
									]
								},
								{
									"ID": "20210707234309-sq3fggq",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707234309-sq3fggq"
									},
									"Children": [
										{
											"ID": "20210707234309-rkbmkus",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707234309-rkbmkus"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "SNAPSHOT：快照"
												}
											]
										}
									]
								},
								{
									"ID": "20210707234309-2md8yix",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707234309-2md8yix"
									},
									"Children": [
										{
											"ID": "20210707234309-6sslwci",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707234309-6sslwci"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Alpha"
												}
											]
										}
									]
								},
								{
									"ID": "20210707234309-rmlswhc",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707234309-rmlswhc"
									},
									"Children": [
										{
											"ID": "20210707234309-eyhhr3h",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707234309-eyhhr3h"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Beta"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	]
}