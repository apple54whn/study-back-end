{
	"ID": "20210707235333-4vryfex",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20210707235333-4vryfex",
		"title": "604.Entity 多表详解（掌握）",
		"type": "doc",
		"updated": "20210925154441"
	},
	"Children": [
		{
			"ID": "20210923230654-fgpfy0o",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210923230654-fgpfy0o",
				"updated": "20210923230701"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "参考资料"
				}
			]
		},
		{
			"ID": "20210923230702-3knqhhn",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20210923230702-3knqhhn",
				"updated": "20210923230707"
			},
			"Children": [
				{
					"ID": "20210923230707-z36u851",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20210923230707-z36u851"
					},
					"Children": [
						{
							"ID": "20210923230707-xwyd4ln",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210923230707-xwyd4ln"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "a",
									"TextMarkAHref": "http://www.wangzhenhua.rocks/zh-hans/java/jpa-one-to-many-many-to-one-best-practice",
									"TextMarkTextContent": "JPA中的OneToMany和ManyToOne的最佳实践"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210923230654-wfqt2w9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923230654-wfqt2w9",
				"updated": "20210923230654"
			}
		},
		{
			"ID": "20210707235333-71fsx8x",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707235333-71fsx8x",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一对一"
				}
			]
		},
		{
			"ID": "20210919004302-5aix4lw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919004302-5aix4lw",
				"updated": "20210919004732"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如：user 表是用户的主信息，user_info 是用户的扩展信息，两者之间是一对一的关系"
				}
			]
		},
		{
			"ID": "20210919004303-we8vfg7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919004303-we8vfg7",
				"updated": "20210919004303"
			}
		},
		{
			"ID": "20210707235333-se3jv95",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-se3jv95",
				"updated": "20210919003149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "JPA 协议规范 🔥"
				}
			]
		},
		{
			"ID": "20210707235333-leb40jo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-leb40jo"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@OneToOne"
				},
				{
					"Type": "NodeText",
					"Data": " 一般表示对象之间一对一的关联关系，它可以放在 field 上面，也可以放在 get/set 方法上面。"
				}
			]
		},
		{
			"ID": "20210707235333-rdmyt7l",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707235333-rdmyt7l"
			},
			"Children": [
				{
					"ID": "20210707235333-qmio5jf",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-qmio5jf"
					},
					"Children": [
						{
							"ID": "20210707235333-6n22odo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-6n22odo"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果是配置"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "双向关联"
								},
								{
									"Type": "NodeText",
									"Data": "，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "维护关联关系的是拥有外键的一方"
								},
								{
									"Type": "NodeText",
									"Data": "，而"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "另一方必须配置 mappedBy"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-ry3qlfg",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-ry3qlfg"
					},
					"Children": [
						{
							"ID": "20210707235333-vkdhxi9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-vkdhxi9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果是单项关联，直接配置在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "拥有外键的一方"
								},
								{
									"Type": "NodeText",
									"Data": "即可。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210915235435-tctv8xw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210915235435-tctv8xw",
				"updated": "20210915235435"
			}
		},
		{
			"ID": "20210707235333-n48k9j8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-n48k9j8",
				"updated": "20210919005412"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "OneToOne 注解"
				}
			]
		},
		{
			"ID": "20210707235333-pvmlrmy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-pvmlrmy",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public @interface OneToOne {\n    //表示关系目标实体，默认该注解标识的返回值的类型的类。\n    Class targetEntity() default void.class;\n    //cascade 级联操作策略，就是我们常说的级联操作\n    CascadeType[] cascade() default {};\n    //数据获取方式EAGER(立即加载)/LAZY(延迟加载)\n    FetchType fetch() default EAGER;\n    //是否允许为空，默认是可选的，也就表示可以为空；\n    boolean optional() default true;\n    //关联关系被谁维护的一方对象里面的属性名字。 双向关联的时候必填\n    String mappedBy() default \"\";\n    //当被标识的字段发生删除或者置空操作之后，是否同步到关联关系的一方，即进行通过删除操作，默认flase，注意与CascadeType.REMOVE 级联删除的区别\n    boolean orphanRemoval() default false;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210919004800-jxkll57",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919004800-jxkll57",
				"updated": "20210919004800"
			}
		},
		{
			"ID": "20210919005405-qfpxr4v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919005405-qfpxr4v",
				"updated": "20210919005405"
			}
		},
		{
			"ID": "20210919003153-o7oh34r",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210919003153-o7oh34r",
				"updated": "20210919005051"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "双向关联（注意内存泄露）🔥"
				}
			]
		},
		{
			"ID": "20210919003234-csobogn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210919003234-csobogn",
				"updated": "20210919003535"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n    @Id\n    @GeneratedValue(strategy= GenerationType.IDENTITY)\n    private Long id;\n    private String name;\n\n    @OneToOne(mappedBy = \"user\")// 主表放弃维护外键！否则主表维护外键时，会多一条update sql\n    private UserInfo userInfo;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210919003201-bvyhds1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210919003201-bvyhds1",
				"updated": "20210923231107"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ToString(exclude = \"user\")\npublic class UserInfo {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String description;\n\n    @OneToOne\n    @JoinColumn(name = \"user_id\")// 不使用@JoinColumn指定外键名，则外键名默认为user_id\n    private User user;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210919003153-n6hkj7p",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210919003153-n6hkj7p",
				"updated": "20210919003854"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n// DataJpaTest、MybatisTest 会默认使用其测试数据源替代，若要使用自己配置的，需要添加如下注解\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\npublic class One2OneTest {\n\n    @Autowired\n    private UserRepository userRepository;\n    @Autowired\n    private UserInfoRepository userInfoRepository;\n\n    @Test\n    @Rollback(false)\n    public void testUserRelationships() {\n        User user = User.builder().name(\"conanan\").build();\n        UserInfo userInfo = UserInfo.builder().description(\"conanan的描述\").user(user).build();\n\n        userRepository.save(user);\n        userInfoRepository.save(userInfo);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210919003154-nmunygw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919003154-nmunygw",
				"updated": "20210919003938"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码日志如下"
				}
			]
		},
		{
			"ID": "20210919003938-tujrf0h",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210919003938-tujrf0h",
				"updated": "20210919004043"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Hibernate: create table user (id bigint not null auto_increment, name varchar(255), primary key (id)) engine=InnoDB\nHibernate: create table user_info (id bigint not null, description varchar(255), user_id bigint, primary key (id)) engine=InnoDB\nHibernate: alter table user_info add constraint FKn8pl63y4abe7n0ls6topbqjh2 foreign key (user_id) references user (id)\n\nHibernate: insert into user (name) values (?)\nHibernate: insert into user_info (description, user_id) values (?, ?)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210919004245-3krrhtn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919004245-3krrhtn",
				"updated": "20210919004245"
			}
		},
		{
			"ID": "20210707235333-vgsxc2s",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-vgsxc2s",
				"updated": "20210919005055"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "mappedBy 主表放弃外键维护 🔥"
				}
			]
		},
		{
			"ID": "20210707235333-7gojo5j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-7gojo5j",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "只有关联关系的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "维护方"
				},
				{
					"Type": "NodeText",
					"Data": "才能"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "操作两个实体之间外键"
				},
				{
					"Type": "NodeText",
					"Data": "的关系。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "被维护方即使设置了维护方属性进行存储也不会更新外键关联"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210707235333-kqiu8i5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-kqiu8i5",
				"updated": "20210919004822"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "mappedBy 不能与 @JoinColumn 或者 @JoinTable 同时使用，因为矛盾没有意义，关联关系不在这里面维护。"
				}
			]
		},
		{
			"ID": "20210707235333-y4evk4e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-y4evk4e",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此外，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "mappedBy 的值"
				},
				{
					"Type": "NodeText",
					"Data": "是指"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "另一方的实体里面属性的字段"
				},
				{
					"Type": "NodeText",
					"Data": "，而不是数据库字段，也不是实体的对象的名字。也就是维护关联关系的一方属性字段名称，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "或者加了 @JoinColumn / @JoinTable 注解的属性字段名称"
				},
				{
					"Type": "NodeText",
					"Data": "。如上面的 User 例子 user 里面 mappedBy 的值，就是 UserInfo 里面的 user 字段的名字。"
				}
			]
		},
		{
			"ID": "20210919004825-p0n4kfh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919004825-p0n4kfh",
				"updated": "20210919004825"
			}
		},
		{
			"ID": "20210919005143-ksxxwj1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919005143-ksxxwj1",
				"updated": "20210919005143"
			}
		},
		{
			"ID": "20210707235333-y0br6t3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-y0br6t3",
				"updated": "20210923003742"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CascadeType 级联（不推荐） "
				}
			]
		},
		{
			"ID": "20210919005449-kflvilk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919005449-kflvilk",
				"updated": "20210919005636"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "默认是没有级联操作的"
				},
				{
					"Type": "NodeText",
					"Data": "，CascadeType 的枚举值只有五个，分别如下："
				}
			]
		},
		{
			"ID": "20210707235333-7fw78ea",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20210707235333-7fw78ea",
				"updated": "20210919005441"
			},
			"Children": [
				{
					"ID": "20210919005256-ipcec59",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20210919005256-ipcec59",
						"updated": "20210919005314"
					},
					"Children": [
						{
							"ID": "20210919005256-e4jwvgz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210919005256-e4jwvgz",
								"updated": "20210919005314"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ALL 全选"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-3zdey32",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20210707235333-3zdey32",
						"updated": "20210919005316"
					},
					"Children": [
						{
							"ID": "20210707235333-wirjfb5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-wirjfb5",
								"updated": "20210919005316"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "PERSIST 级联新建"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-tmdi35i",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20210707235333-tmdi35i",
						"updated": "20210919005318"
					},
					"Children": [
						{
							"ID": "20210707235333-8vcir31",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-8vcir31",
								"updated": "20210919005318"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "REMOVE 级联删除"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-uzrsabn",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20210707235333-uzrsabn",
						"updated": "20210919005320"
					},
					"Children": [
						{
							"ID": "20210707235333-vyoscxx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-vyoscxx",
								"updated": "20210919005320"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "REFRESH 级联刷新"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-4jeadii",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20210707235333-4jeadii",
						"updated": "20210919005322"
					},
					"Children": [
						{
							"ID": "20210707235333-t2zpxj2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-t2zpxj2",
								"updated": "20210919005322"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "MERGE 级联更新"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-uy7wdre",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20210707235333-uy7wdre",
						"updated": "20210919005441"
					},
					"Children": [
						{
							"ID": "20210707235333-ae9rxpn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-ae9rxpn",
								"updated": "20210919005441"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "DETACH 级联实体到 Detach 状态"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-9o0f9go",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-9o0f9go",
				"updated": "20210923001535"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "修改 UserInfo（从表维护外键，推荐在这里配置）"
				},
				{
					"Type": "NodeText",
					"Data": " 里面的关键代码如下，并在 @OneToOne 上面添加"
				}
			]
		},
		{
			"ID": "20210707235333-2himik3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-2himik3",
				"updated": "20210923001452"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "cascade = {CascadeType.PERSIST,CascadeType.REMOVE}"
				}
			]
		},
		{
			"ID": "20210707235333-dva10wa",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-dva10wa",
				"updated": "20210919010202"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n// DataJpaTest、MybatisTest 会默认使用其测试数据源替代，若要使用自己配置的，需要添加如下注解\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\npublic class One2OneTest {\n\n    @Autowired\n    private UserInfoRepository userInfoRepository;\n\n\n    @Test\n    @Rollback(false)\n    public void testUserRelationships() throws JsonProcessingException {\n        User user = User.builder().name(\"conanan\").build();\n        UserInfo userInfo = UserInfo.builder().description(\"conanan的描述\").user(user).build();\n        //保存userInfo的同上也会保存User信息（先user、后userInfo）\n        userInfoRepository.saveAndFlush(userInfo);\n        //删除userInfo，同时也会级联的删除user记录\n        userInfoRepository.delete(userInfo);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-cepv6gk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-cepv6gk",
				"updated": "20210919010038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "运行日志如下"
				}
			]
		},
		{
			"ID": "20210919010039-82vc6vm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210919010039-82vc6vm",
				"updated": "20210919010040"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Hibernate: insert into user (name) values (?)\nHibernate: insert into user_info (description, user_id) values (?, ?)\nHibernate: delete from user_info where id=?\nHibernate: delete from user where id=?"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210919010115-pfula87",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919010115-pfula87",
				"updated": "20210919010115"
			}
		},
		{
			"ID": "20210919010539-ps3vqw9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919010539-ps3vqw9",
				"updated": "20210919010539"
			}
		},
		{
			"ID": "20210707235333-9ry53an",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-9ry53an",
				"updated": "20210923003738"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "orphanRemoval 关联关系删除后变化（不推荐） "
				}
			]
		},
		{
			"ID": "20210707235333-nbobud6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-nbobud6",
				"updated": "20210919010553"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "orphanRemoval 表示"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "当关联关系被删除"
				},
				{
					"Type": "NodeText",
					"Data": "的时候，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "是否应用级联删除"
				},
				{
					"Type": "NodeText",
					"Data": "，默认 false。"
				}
			]
		},
		{
			"ID": "20210707235333-8gfjh3t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-8gfjh3t",
				"updated": "20210919010701"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，还沿用上面的例子，当我们删除 userInfo 的时候，先把 userInfo 中的 User 置为 null，如下："
				}
			]
		},
		{
			"ID": "20210707235333-y20ac0i",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-y20ac0i",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "userInfo.setUser(null);\nuserInfoRepository.delete(userInfo);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-chz4tsi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-chz4tsi",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其次，我们再运行测试，看看效果。"
				}
			]
		},
		{
			"ID": "20210707235333-9bm9dsu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-9bm9dsu",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "delete from user_info where id=?\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-48er9y5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-48er9y5",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这时候你就会发现，少了一条删除 user 的 sql，说明没有进行级联删除。那我们再把 UserInfo 做一下调整。"
				}
			]
		},
		{
			"ID": "20210707235333-hiyv6b6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-hiyv6b6",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class UserInfo {\n   @OneToOne(cascade = {CascadeType.PERSIST},orphanRemoval = true)\n   private User user;\n   //....其他没变的代码省了\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-oi2vvwx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-oi2vvwx",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后，我们把 CascadeType.Remove 删除了，不让它进行级联删除，但是我们把 orphanRemoval 设置成 true，即当关联关系变化的时候级联更新。我们看下完整的测试用例。"
				}
			]
		},
		{
			"ID": "20210707235333-xysrums",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-xysrums",
				"updated": "20210919011243"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n// DataJpaTest、MybatisTest 会默认使用其测试数据源替代，若要使用自己配置的，需要添加如下注解\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\npublic class One2OneTest {\n\n    @Autowired\n    private UserRepository userRepository;\n    @Autowired\n    private UserInfoRepository userInfoRepository;\n\n    @Test\n    @Rollback(false)\n    public void testUserRelationships() {\n        User user = User.builder().name(\"conanan\").build();\n        UserInfo userInfo = UserInfo.builder().description(\"conanan的描述\").user(user).build();\n\n        // 保存userInfo的同上也会保存User信息\n        userInfoRepository.saveAndFlush(userInfo);\n\n        userInfo.setUser(null);\n        // 删除userInfo，同时也会级联的删除user记录\n        userInfoRepository.delete(userInfo);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-3ojfkxq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-3ojfkxq",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个时候我们看一下运行结果。"
				}
			]
		},
		{
			"ID": "20210919010849-t249evf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210919010849-t249evf",
				"updated": "20210919010852"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Hibernate: insert into user (name) values (?)\nHibernate: insert into user_info (description, user_id) values (?, ?)\n\nHibernate: update user_info set description=?, user_id=? where id=?\nHibernate: delete from user where id=?\nHibernate: delete from user_info where id=?\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-kaji64h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-kaji64h",
				"updated": "20210919011030"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结果依然是两个 inser 和两个 delete，但是中间多了一个 update。因为去掉了 CascadeType.REMOVE，这个时候不会进行级联删除了（即使加上也无妨，结果还是一样的）。当我们把 user 对象更新成空的时候，就会执行一条 update 语句把关联关系去掉了。"
				}
			]
		},
		{
			"ID": "20210707235333-cp4aorr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-cp4aorr",
				"updated": "20210919011050"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而为什么又出现了级联删除 user 呢？因为我们修改了集合关联关系，orphanRemoval 设置为 true，所以又执行了级联删除的操作。"
				}
			]
		},
		{
			"ID": "20210707235333-shedosv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-shedosv",
				"updated": "20210919011053"
			}
		},
		{
			"ID": "20210707235333-vgtd5s5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-vgtd5s5",
				"updated": "20210919011349"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主键和外键都是同一个字段（如1对1中从表） 🔥"
				}
			]
		},
		{
			"ID": "20210707235333-k1t8vm8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-k1t8vm8",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们假设 user 表是主表，user_info 的主键是 user_id，并且 user_id=user 表里面的 id，那我们应该怎么写？"
				}
			]
		},
		{
			"ID": "20210707235333-gnsjvd5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-gnsjvd5",
				"updated": "20210920000301"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "继续沿用上面的例子，User 实体不变，UserInfo 如下："
				}
			]
		},
		{
			"ID": "20210707235333-c2ndrx2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-c2ndrx2",
				"updated": "20210923231118"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class UserInfo implements Serializable {\n   @Id\n   private Long userId;\n   private String description;\n   @MapsId\n   @OneToOne\n   @JoinColumn(name = \"user_id\")// 不使用@JoinColumn指定外键名，则外键名默认为userId（自动驼峰转换）\n   private User user;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-k9s7r4u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-k9s7r4u",
				"updated": "20210919235355"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "直接把 userId 设置为主键（去掉自动生成），在 @OneToOne 上面添加 @MapsId 注解即可。"
				}
			]
		},
		{
			"ID": "20210919235400-bv15z4g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919235400-bv15z4g",
				"updated": "20210919235459"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "@MapsId 注解的作用是把所关联主实体里面的 ID（默认，可指定其他）值 COPY 到 @MapsId 标注的实体中 @Id 注解字段中"
				},
				{
					"Type": "NodeText",
					"Data": "（这里指的是 userId 字段）"
				}
			]
		},
		{
			"ID": "20210707235333-9ri5pib",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-9ri5pib",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接着，上面的测试用例我们跑一下，看一下效果。"
				}
			]
		},
		{
			"ID": "20210707235333-bs1g10u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-bs1g10u",
				"updated": "20210919235641"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Hibernate: create table user (id bigint not null auto_increment, name varchar(255), primary key (id)) engine=InnoDB\nHibernate: create table user_info (user_id bigint not null, description varchar(255), primary key (user_id)) engine=InnoDB\nHibernate: alter table user_info add constraint FKn8pl63y4abe7n0ls6topbqjh2 foreign key (user_id) references user (id)\n\nHibernate: insert into user (name) values (?)\nHibernate: insert into user_info (description, user_id) values (?, ?)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-07l3sld",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-07l3sld",
				"updated": "20210919235659"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在启动的时候，创建了 user 表和 user_info 表，其中 user_info 的主键是 user_id，并且通过外键关联到了 user 表的 ID 字段，insert 的 sql，也发生了变化。"
				}
			]
		},
		{
			"ID": "20210919004945-8cb91r1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919004945-8cb91r1",
				"updated": "20210919004945"
			}
		},
		{
			"ID": "20210919011649-rxzxko7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919011649-rxzxko7",
				"updated": "20210919011649"
			}
		},
		{
			"ID": "20210707235333-et8dw7l",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-et8dw7l",
				"updated": "20210919234933"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "LAZY 延迟加载（只需要关联的 ID 值） 🔥"
				}
			]
		},
		{
			"ID": "20210919011659-qi98z5z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919011659-qi98z5z",
				"updated": "20210920004438"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "序列化时会触发加载"
				},
				{
					"Type": "NodeText",
					"Data": "，所以这个延迟加载也就无效了。IDEA也无法测试出来！"
				}
			]
		},
		{
			"ID": "20210707235333-8kevhk9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-8kevhk9",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 @OneToOne 延迟加载的情况下，我们假设只想查下 user_id，而不想查看 user 表其他的信息，因为当前用不到，可以有以下几种做法。"
				}
			]
		},
		{
			"ID": "20210707235333-zrnz0lx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-zrnz0lx",
				"updated": "20210920003229"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第一种做法：修改 User 对象即可"
				}
			]
		},
		{
			"ID": "20210707235333-ay7fj05",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-ay7fj05",
				"updated": "20210920003322"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n    @Id\n    @GeneratedValue(strategy= GenerationType.IDENTITY)\n    private Long id;\n    private String name;\n\n\n    @OneToOne(mappedBy = \"user\", fetch = FetchType.LAZY)// OneToOne默认为 EAGER\n    private UserInfo userInfo;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-dldtocs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-dldtocs",
				"updated": "20210920003426"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class UserInfoRepositoryTest {\n    @Autowired\n    private UserRepository userRepository;\n    @Autowired\n    private UserInfoRepository userInfoRepository;\n  \n    @BeforeEach\n    @Rollback(false)\n    @Transactional\n    void init() {\n        User user = User.builder().name(\"conanan\").build();\n        UserInfo userInfo = UserInfo.builder().description(\"conanan的描述\").user(user).build();\n        // 保存userInfo的同上也会保存User信息\n        userInfoRepository.saveAndFlush(userInfo);\n    }\n\n    @Test\n    @Rollback(false)\n    public void testUserRelationships() throws JsonProcessingException {\n        User one = userRepository.getOne(1L);\n        System.out.println(one);\n        System.out.println(one.getUserInfo().getUserId());\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-1xd0fzn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-1xd0fzn",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后，我们跑一下测试用例，看看测试结果。"
				}
			]
		},
		{
			"ID": "20210707235333-i75wdu9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-i75wdu9",
				"updated": "20210920004509"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "insert into user (address, email, name, sex, id) values (?, ?, ?, ?, ?)\ninsert into user (address, email, name, sex, id) values (?, ?, ?, ?, ?)\n\n-- 两条inser照旧，而只有一个select\nHibernate: select user0_.id as id1_8_0_, user0_.name as name2_8_0_ from user user0_ where user0_.id=?\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-7jb0rbm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-7jb0rbm",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最后你会发现，打印的结果符合预期。"
				}
			]
		},
		{
			"ID": "20210707235333-p430ymk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-p430ymk",
				"updated": "20210920004542"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "User(id=1, name=conanan)\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-w78sf7i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-w78sf7i",
				"updated": "20210920003822"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第二种做法，这种做法很简单，但是是查询 UserInfo！只要在 UserInfo 对象里面直接去掉 @OneToOne 关联关系，新增下面的字段即可。"
				}
			]
		},
		{
			"ID": "20210707235333-bk1xng0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-bk1xng0",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Column(name = \"user_id\")\nprivate Long userId;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-jl49fi3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-jl49fi3",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这就没有关联关系了"
				}
			]
		},
		{
			"ID": "20210707235333-66kj54m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-66kj54m",
				"updated": "20210920000506"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第三做法是利用 Hibernate，它给我们提供了一种字节码增强技术，通过编译器改变 class 解决了延迟加载问题。这种方式有点复杂，需要在编译器引入 hibernateEnhance 的相关 jar 包，以及编译器需要改变 class 文件并添加 lazy 代理来解决延迟加载。因为太复杂，知道有这回事即可。"
				}
			]
		},
		{
			"ID": "20210707235333-r5sj89e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-r5sj89e",
				"updated": "20210920000454"
			}
		},
		{
			"ID": "20210919011649-wwtt447",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919011649-wwtt447",
				"updated": "20210919011649"
			}
		},
		{
			"ID": "20210707235333-ho1wm79",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-ho1wm79",
				"updated": "20210923232017"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@JoinCloumns \u0026 JoinColumn（物理外键）🔥"
				}
			]
		},
		{
			"ID": "20210925150019-5kdcgvd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210925150019-5kdcgvd",
				"updated": "20210925150020"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "参考"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://www.jianshu.com/p/1d8ebfae1669",
					"TextMarkTextContent": "简书"
				},
				{
					"Type": "NodeText",
					"Data": "！！！这个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://www.cnblogs.com/icebutterfly/p/9506904.html",
					"TextMarkTextContent": "博客"
				},
				{
					"Type": "NodeText",
					"Data": "！！！失效原因"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://blog.csdn.net/XiongChuMei/article/details/103955124?utm_medium=distribute.wap_relevant.none-task-blog-2~default~baidujs_title~default-1.essearch_wap_relevant",
					"TextMarkTextContent": "博客"
				},
				{
					"Type": "NodeText",
					"Data": "！！！"
				}
			]
		},
		{
			"ID": "20210923232012-itdbm9d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923232012-itdbm9d",
				"updated": "20210925150046"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "记得"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "取消物理外键"
				},
				{
					"Type": "NodeText",
					"Data": "！本章上面几节中示例都没有取消物理外键。因为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "实际项目使用时，也不会采用JPA生成表方式来使用，而是使用DDL来建表，之后再生成Entity实体。所以无需考虑取消物理外键，只需指定名称一样即可！"
				}
			]
		},
		{
			"ID": "20210707235333-rnlrlw6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-rnlrlw6",
				"updated": "20210920004719"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这两个注解是集合关系，他们可以同时使用，@JoinColumn 表示单字段，@JoinCloumns 表示多个 @JoinColumn"
				}
			]
		},
		{
			"ID": "20210707235333-crszyly",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-crszyly",
				"updated": "20210920004729"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@JoinColumn 源码："
				}
			]
		},
		{
			"ID": "20210707235333-0zt49hw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-0zt49hw",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public @interface JoinColumn {\n    //关键的字段名,默认注解上的字段名，在@OneToOne代表本表的外键字段名字；\n    String name() default \"\";\n    //与name相反关联对象的字段，默认主键字段\n    String referencedColumnName() default \"\";\n    //外键字段是否唯一\n    boolean unique() default false;\n    //外键字段是否允许为空\n    boolean nullable() default true;\n    //是否跟随一起新增\n    boolean insertable() default true;\n    //是否跟随一起更新\n    boolean updatable() default true;\n    //JPA2.1新增，外键策略\n    ForeignKey foreignKey() default @ForeignKey(PROVIDER_DEFAULT);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-h6savz1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-h6savz1",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其次，我们看一下 @ForeignKey(PROVIDER_DEFAULT) 里面枚举值有几个。"
				}
			]
		},
		{
			"ID": "20210707235333-72z41dm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-72z41dm",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public enum ConstraintMode {\n    //创建外键约束\n   CONSTRAINT,\n    //不创建外键约束\n   NO_CONSTRAINT,\n   //采用默认行为\n   PROVIDER_DEFAULT\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-hepsij4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-hepsij4",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而 @JoinColumns 是 JoinColumns 的复数形式，就是通过两个字段进行的外键关联，这个不常用，我们看一个 demo 了解一下就好。"
				}
			]
		},
		{
			"ID": "20210707235333-5olatrl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-5olatrl",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\npublic class CompanyOffice {\n   @ManyToOne(fetch = FetchType.LAZY)\n   @JoinColumns({\n         @JoinColumn(name=\"ADDR_ID\", referencedColumnName=\"ID\"),\n         @JoinColumn(name=\"ADDR_ZIP\", referencedColumnName=\"ZIP\")\n   })\n   private Address address;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-grpidiz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-grpidiz",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面的实例中，CompanyOffice 通过 ADDR_ID 和 ADDR_ZIP 两个字段对应一条 address 信息，解释了一下@JoinColumns 的用法。"
				}
			]
		},
		{
			"ID": "20210925150331-4ejnnsp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210925150331-4ejnnsp",
				"updated": "20210925150331"
			}
		},
		{
			"ID": "20210925150332-0ny2u47",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210925150332-0ny2u47",
				"updated": "20210925150332"
			}
		},
		{
			"ID": "20210925150332-pl2ahrm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210925150332-pl2ahrm",
				"updated": "20210925150332"
			}
		},
		{
			"ID": "20210925150248-9lss4yy",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210925150248-9lss4yy",
				"updated": "20210925150304"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一对一（正常）"
				}
			]
		},
		{
			"ID": "20210925152946-xa14ee9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210925152946-xa14ee9",
				"updated": "20210925153402"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "只需在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "外键维护端"
				},
				{
					"Type": "NodeText",
					"Data": "配置 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@ForeignKey"
				},
				{
					"Type": "NodeText",
					"Data": " 该过时的注解或配置"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "NO_CONSTRAINT"
				}
			]
		},
		{
			"ID": "20210707235333-eaj3hpb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-eaj3hpb",
				"updated": "20210925150116"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "User、UserInfo，如下所示："
				}
			]
		},
		{
			"ID": "20210925142917-bpuqlz5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210925142917-bpuqlz5",
				"updated": "20210925150124"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n    @Id\n    @GeneratedValue(strategy= GenerationType.IDENTITY)\n    private Long id;\n    private String name;\n\n\n    @OneToOne(mappedBy = \"user\", fetch = FetchType.LAZY)\n    private UserInfo userInfo;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-ljl44og",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-ljl44og",
				"updated": "20210925151756"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ToString(exclude = \"user\")\npublic class UserInfo {\n\n    @Id\n    private Long userId;\n    private String description;\n\n    @OneToOne(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, orphanRemoval = true)\n    // 不使用@JoinColumn指定外键名，则默认为user_id\n    // NO_CONSTRAINT 不生成物理外键。\n    // 也可以只使用@org.hibernate.annotations.ForeignKey(name = \"none\")该过时注解\n    @JoinColumn(name = \"user_id\", foreignKey = @ForeignKey(ConstraintMode.NO_CONSTRAINT))\n    @MapsId\n    private User user;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-cblw2zm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-cblw2zm",
				"updated": "20210922232623"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到，我们在其中指定了字段的名字：my_user_id，并且指定 NO_CONSTRAINT 不生成外键。而测试用例不变，我们看下运行结果。"
				}
			]
		},
		{
			"ID": "20210707235333-c3nwvvc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-c3nwvvc",
				"updated": "20210922232641"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "create table user (id bigint not null, name varchar(255), sex varchar(255), primary key (id))\ncreate table user_info (id bigint not null, description varchar(255), my_user_id bigint, primary key (id))\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-djo3un6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-djo3un6",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这时我们看到 user_info 表里面新增了一个字段 my_user_id，insert 的时候也能正确 inser my_user_id 的值等于 user.id。"
				}
			]
		},
		{
			"ID": "20210707235333-lwc7lmf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-lwc7lmf",
				"updated": "20210922232704"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "insert into user_info (description, my_user_id, id) values (?, ?, ?)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210920004659-sl5nne4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210920004659-sl5nne4",
				"updated": "20210920004659"
			}
		},
		{
			"ID": "20210919004945-99wj3wq",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210919004945-99wj3wq",
				"updated": "20210925150811"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一对多、多对一（需要一个过时注解）"
				}
			]
		},
		{
			"ID": "20210925152910-ezi6ol0",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20210925152910-ezi6ol0",
				"updated": "20210925154350"
			},
			"Children": [
				{
					"ID": "20210925153239-i8bm51b",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20210925153239-i8bm51b",
						"updated": "20210925153332"
					},
					"Children": [
						{
							"ID": "20210925153239-239fdur",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210925153239-239fdur",
								"updated": "20210925153332"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "mappedBy 端"
								},
								{
									"Type": "NodeText",
									"Data": "配置 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "@ForeignKey"
								},
								{
									"Type": "NodeText",
									"Data": " 该过时的注解"
								}
							]
						}
					]
				},
				{
					"ID": "20210925153242-bjf2nbs",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20210925153242-bjf2nbs",
						"updated": "20210925154350"
					},
					"Children": [
						{
							"ID": "20210925153242-3ydrkw4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210925153242-3ydrkw4",
								"updated": "20210925154350"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "外键维护端"
								},
								{
									"Type": "NodeText",
									"Data": "配置配置 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "@ForeignKey"
								},
								{
									"Type": "NodeText",
									"Data": " 该过时的注解；或配置"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "NO_CONSTRAINT"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210925150351-td57wud",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210925150351-td57wud",
				"updated": "20210925150713"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Banner{\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    /* 名称，对无意义id的描述 */\n    private String name;\n\n    /* 可以展示到前端的 */\n    private String title;\n    private String description;\n    private String img;\n\n    /** 主表放弃外键维护，推荐的写法 */\n    @OneToMany(mappedBy = \"banner\")\n    // 必须在一端加该注解（已过期），否则只修改多端没有用\n    @org.hibernate.annotations.ForeignKey(name = \"none\")\n    @Builder.Default\n    private List\u003cBannerItem\u003e itemList = new ArrayList\u003c\u003e();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210925150320-iv1cqn9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210925150320-iv1cqn9",
				"updated": "20210925153420"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class BannerItem{\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    /* 名称，对无意义id的描述 */\n    private String name;\n\n    /* 图片 */\n    private String img;\n\n    /* 点击后跳转的类型，如 SPU（需要spuId）、专题（需要themeId）、页面（pageId）等 */\n    private String type;\n\n    /* 关键字，如 spuId、ThemeId、pageId */\n    private String keyword;\n\n    @ManyToOne\n    // 只在外键维护端使用NO_CONSTRAINT没用，必须在mappedBy端使用过时的@ForeignKey注解。或者2端都使用过时的@ForeignKey注解（此时无需NO_CONSTRAINT了）\n    // @org.hibernate.annotations.ForeignKey(name = \"none\") // 或如下\n    @JoinColumn(name = \"banner_id\", foreignKey = @ForeignKey(value = ConstraintMode.NO_CONSTRAINT))\n    private Banner banner;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210925153226-4htqwdu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210925153226-4htqwdu",
				"updated": "20210925153226"
			}
		},
		{
			"ID": "20210925153226-ny6o344",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210925153226-ny6o344",
				"updated": "20210925153226"
			}
		},
		{
			"ID": "20210925150755-j65eksx",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210925150755-j65eksx",
				"updated": "20210925150816"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多对多"
				}
			]
		},
		{
			"ID": "20210925150819-4gvdge0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210925150819-4gvdge0",
				"updated": "20210925153849"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "若使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@OneToMany"
				},
				{
					"Type": "NodeText",
					"Data": " 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@ManyToOne"
				},
				{
					"Type": "NodeText",
					"Data": " 则同上！"
				}
			]
		},
		{
			"ID": "20210925154253-2vsd7td",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210925154253-2vsd7td",
				"updated": "20210925154306"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "若使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@ManyToMany"
				},
				{
					"Type": "NodeText",
					"Data": "："
				}
			]
		},
		{
			"ID": "20210925154321-9thdu7p",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20210925154321-9thdu7p",
				"updated": "20210925154410"
			},
			"Children": [
				{
					"ID": "20210925154321-hso66gt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20210925154321-hso66gt"
					},
					"Children": [
						{
							"ID": "20210925154321-mck456m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210925154321-mck456m",
								"updated": "20210925153332"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "mappedBy 端"
								},
								{
									"Type": "NodeText",
									"Data": "配置 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "@ForeignKey"
								},
								{
									"Type": "NodeText",
									"Data": " 该过时的注解"
								}
							]
						}
					]
				},
				{
					"ID": "20210925154321-wihex5i",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20210925154321-wihex5i",
						"updated": "20210925154410"
					},
					"Children": [
						{
							"ID": "20210925154321-pqlcrj8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210925154321-pqlcrj8",
								"updated": "20210925154410"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "外键维护端"
								},
								{
									"Type": "NodeText",
									"Data": "配置配置 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "@ForeignKey"
								},
								{
									"Type": "NodeText",
									"Data": " 该过时的注解；或配置"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "NO_CONSTRAINT"
								},
								{
									"Type": "NodeText",
									"Data": "（有2个地方！）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210925151438-75bj39m",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210925151438-75bj39m",
				"updated": "20210925154441"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Builder\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class SysUser {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long userId;\n    private String name;\n\n\n    @ManyToMany\n    @JoinTable(name = \"sysUserRole\",\n            joinColumns = @JoinColumn(name = \"userId\"),\n            inverseJoinColumns = @JoinColumn(name = \"roleId\"),\n            foreignKey = @ForeignKey(ConstraintMode.NO_CONSTRAINT),\n            inverseForeignKey = @ForeignKey(ConstraintMode.NO_CONSTRAINT))\n    // @org.hibernate.annotations.ForeignKey(name = \"none\")\n    @Builder.Default\n    private Set\u003cSysRole\u003e roles = new HashSet\u003c\u003e();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210925150912-0pzfvqa",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210925150912-0pzfvqa",
				"updated": "20210925153840"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Builder\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class SysRole {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long roleId;\n    private String roleName;\n\n\n    // referencedColumnName 可以不配置，默认为主键\n    @ManyToMany(mappedBy = \"roles\")\n    @org.hibernate.annotations.ForeignKey(name = \"none\")\n    @Builder.Default\n    private Set\u003cSysUser\u003e users = new HashSet\u003c\u003e();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210925150319-3g2u0r4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210925150319-3g2u0r4",
				"updated": "20210925150319"
			}
		},
		{
			"ID": "20210925150319-m319961",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210925150319-m319961",
				"updated": "20210925150319"
			}
		},
		{
			"ID": "20210707235333-gcp017c",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-gcp017c",
				"updated": "20210919004635"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "单向关联（无内存泄露但无法自动主表关联）🔥"
				}
			]
		},
		{
			"ID": "20210707235333-tacemi5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-tacemi5",
				"updated": "20210919004320"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n    @Id\n    @GeneratedValue(strategy= GenerationType.IDENTITY)\n    private Long id;\n    private String name;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-k3avfkn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-k3avfkn"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "User 实体里面什么都没变化，不需要添加 @OneToOne 注解。我们只需要在拥有外键的一方配置就可以，所以 UserInfo 的代码如下："
				}
			]
		},
		{
			"ID": "20210707235333-9ivh1dr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-9ivh1dr",
				"updated": "20210923231150"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ToString(exclude = \"user\")\npublic class UserInfo {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String description;\n\n    @OneToOne\n    @JoinColumn(name = \"user_id\")// 不使用@JoinColumn指定外键名，则外键名默认为user_id\n    private User user;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-od1vltz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-od1vltz",
				"updated": "20210919004520"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n// DataJpaTest、MybatisTest 会默认使用其测试数据源替代，若要使用自己配置的，需要添加如下注解\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\npublic class One2OneTest {\n\n    @Autowired\n    private UserRepository userRepository;\n    @Autowired\n    private UserInfoRepository userInfoRepository;\n\n    @Test\n    @Rollback(false)\n    public void testUserRelationships() {\n        User user = User.builder().name(\"conanan\").build();\n        UserInfo userInfo = UserInfo.builder().description(\"conanan的描述\").user(user).build();\n\n        userRepository.save(user);\n        userInfoRepository.save(userInfo);\n    }\n}"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210919004351-7gr9f9h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919004351-7gr9f9h",
				"updated": "20210919004357"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码日志如下"
				}
			]
		},
		{
			"ID": "20210707235333-ks5eupd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-ks5eupd",
				"updated": "20210919004344"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Hibernate: create table user (id bigint not null auto_increment, name varchar(255), primary key (id)) engine=InnoDB\nHibernate: create table user_info (id bigint not null, description varchar(255), user_id bigint, primary key (id)) engine=InnoDB\nHibernate: alter table user_info add constraint FKn8pl63y4abe7n0ls6topbqjh2 foreign key (user_id) references user (id)\n\nHibernate: insert into user (name) values (?)\nHibernate: insert into user_info (description, user_id) values (?, ?)"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-2nx6z1r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-2nx6z1r",
				"updated": "20210919004531"
			}
		},
		{
			"ID": "20210919004106-ehnd6p2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919004106-ehnd6p2",
				"updated": "20210919004106"
			}
		},
		{
			"ID": "20210919004106-5k7d8km",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919004106-5k7d8km",
				"updated": "20210919004106"
			}
		},
		{
			"ID": "20210919004106-wcbk6rq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919004106-wcbk6rq",
				"updated": "20210919004106"
			}
		},
		{
			"ID": "20210707235333-xxy40ai",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-xxy40ai"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "@OneToOne 的最佳实践"
				}
			]
		},
		{
			"ID": "20210707235333-arse1wx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-arse1wx"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "第一，我要说一种 Java 面向对象的设计原则：开闭原则。"
				}
			]
		},
		{
			"ID": "20210707235333-sppkbu5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-sppkbu5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "即对扩展开放，对修改关闭。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "如果我们一直使用双向关联，两个实体的对象耦合太严重了"
				},
				{
					"Type": "NodeText",
					"Data": "。想象一下，随着业务的发展，User 对象可能是原始对象，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "围绕着 User 可能会扩展出各种关联对象"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "难道 User 里面每次都要修改，去添加双向关联关系吗"
				},
				{
					"Type": "NodeText",
					"Data": "？肯定不是，否则时间长了，对象与对象之间的关联关系就是一团乱麻。"
				}
			]
		},
		{
			"ID": "20210707235333-uh86vbx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-uh86vbx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所以，我们"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "尽量、甚至不要用双向关联，如果非要用关联关系的话，只用单向关联就够了"
				},
				{
					"Type": "NodeText",
					"Data": "。双向关联正是 JPA 的强大之处，但同时也是问题最多，最被人诟病之处。所以我们要用它的优点，而不是学会了就一定要使用。"
				}
			]
		},
		{
			"ID": "20210707235333-0l5j04s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-0l5j04s"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "第二，我想说 CascadeType 很强大，但是我也建议保持默认。"
				}
			]
		},
		{
			"ID": "20210707235333-upve3f4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-upve3f4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "即没有级联更新动作，没有级联删除动作。还有 orphanRemoval 也要尽量保持默认 false，不做级联删除。因为这两个功能很强大，但是我个人觉得这违背了面向对象设计原则里面的“职责单一原则”，除非你非常非常熟悉，否则你在用的时候会时常感到惊讶——数据什么时间被更新了？数据被谁删除了？遇到这种问题查起来非常麻烦，因为是框架处理，有的时候并非预期的效果。"
				}
			]
		},
		{
			"ID": "20210707235333-h00eunx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-h00eunx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一旦生产数据被莫名更新或者删除，那是一件非常糟糕的事情。因为这些级联操作会使你的方法名字没办法命名，而且它不是跟着业务逻辑变化的，而是跟着实体变化的，这就会使方法和对象的职责不单一。"
				}
			]
		},
		{
			"ID": "20210707235333-vahykh0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-vahykh0"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "第三，我想告诉你，所有用到关联关系的地方，能用 Lazy 的绝对不要用 EAGER，否则会有 SQL 性能问题，会出现不是预期的 SQL。"
				}
			]
		},
		{
			"ID": "20210919001528-3oh87zw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919001528-3oh87zw",
				"updated": "20210919001528"
			}
		},
		{
			"ID": "20210919001529-0q1ka1t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210919001529-0q1ka1t",
				"updated": "20210919001529"
			}
		},
		{
			"ID": "20210707235333-vlakcbk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707235333-vlakcbk",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一对多"
				}
			]
		},
		{
			"ID": "20210922234310-7p3x0fd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210922234310-7p3x0fd",
				"updated": "20210922234324"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "banner 和 bannerItem，属于一对多的。"
				}
			]
		},
		{
			"ID": "20210922234310-xpfihfp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210922234310-xpfihfp",
				"updated": "20210922234310"
			}
		},
		{
			"ID": "20210707235333-voisxre",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-voisxre",
				"updated": "20210922234348"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@OneToMany \u0026 @ManyToOne 注解"
				}
			]
		},
		{
			"ID": "20210707235333-4te11pn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-4te11pn"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@ManyToOne 代表多对一的关联关系，而 @OneToMany 代表一对多，一般两个成对使用表示双向关联关系。而 JPA 协议中也是明确规定："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "维护关联关系的是拥有外键的一方（从表），而另一方（主表）必须配置 mappedBy"
				},
				{
					"Type": "NodeText",
					"Data": "。体会不到看下面的实战及问题分析即可明了。"
				}
			]
		},
		{
			"ID": "20210707235333-yxdx7ra",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-yxdx7ra"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "看下面的源码。"
				}
			]
		},
		{
			"ID": "20210707235333-qs2yb36",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-qs2yb36"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public @interface ManyToOne {\n\n    Class targetEntity() default void.class;\n\n    CascadeType[] cascade() default {};\n\n    FetchType fetch() default EAGER;\n\n    boolean optional() default true;\n\n}\n\n public @interface OneToMany {\n\n    Class targetEntity() default void.class;\n\n \t//cascade 级联操作策略：(CascadeType.PERSIST、CascadeType.REMOVE、CascadeType.REFRESH、CascadeType.MERGE、CascadeType.ALL) 如果不填，默认关系表不会产生任何影响。\n    CascadeType[] cascade() default {};\n\n\t//数据获取方式EAGER(立即加载)/LAZY(延迟加载)\n    FetchType fetch() default LAZY;\n\n    //关系被谁维护，单项的。注意：只有关系维护方才能操作两者的关系。\n    String mappedBy() default \"\";\n\n\t//是否级联删除。和CascadeType.REMOVE的效果一样。两种配置了一个就会自动级联删除\n    boolean orphanRemoval() default false;\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-18puwon",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-18puwon"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们看到上面的字段和 @OneToOne 里面的基本一样，用法是一样的，不过需要注意以下几点："
				}
			]
		},
		{
			"ID": "20210707235333-njwx58q",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Tight": true,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 3,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210707235333-njwx58q"
			},
			"Children": [
				{
					"ID": "20210707235333-4mj1l87",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210707235333-4mj1l87"
					},
					"Children": [
						{
							"ID": "20210707235333-gz0lm7o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-gz0lm7o"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@ManyToOne 一定是维护外键关系的一方，所以没有 mappedBy 字段；"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-2gp0tj1",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210707235333-2gp0tj1"
					},
					"Children": [
						{
							"ID": "20210707235333-xv0v41t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-xv0v41t"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@ManyToOne 删除的时候一定不能把 One 的一方删除了，所以也没有 orphanRemoval 的选项；"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-u72fq9e",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20210707235333-u72fq9e"
					},
					"Children": [
						{
							"ID": "20210707235333-bnif65k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-bnif65k"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@ManyToOne 的 Lazy 效果和 @OneToOne 的一样，所以和上面的用法基本一致；"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-chdj6rv",
					"Type": "NodeListItem",
					"Data": "4",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 4,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "NA==",
						"Num": 4
					},
					"Properties": {
						"id": "20210707235333-chdj6rv"
					},
					"Children": [
						{
							"ID": "20210707235333-ch9fs9k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-ch9fs9k"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@OneToMany 的 Lazy 是有效果的。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210922234425-dwbelo7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210922234425-dwbelo7",
				"updated": "20210922234425"
			}
		},
		{
			"ID": "20210922234426-0yn6v9b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210922234426-0yn6v9b",
				"updated": "20210922234426"
			}
		},
		{
			"ID": "20210922234436-cad1rdi",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210922234436-cad1rdi",
				"updated": "20210922235849"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "双向关联（注意内存泄露）🔥"
				}
			]
		},
		{
			"ID": "20210922235945-bz3z8m3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210922235945-bz3z8m3",
				"updated": "20210923000356"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Banner{\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    /* 名称，对无意义id的描述 */\n    private String name;\n\n    /* 可以展示到前端的 */\n    private String title;\n    private String description;\n    private String img;\n\n\n    /** 主表也可以维护外键，不推荐的写法 */\n    // @OneToMany\n    // @JoinColumn(name = \"bannerId\")\n    // @Builder.Default\n    // private List\u003cBannerItem\u003e itemList = new ArrayList\u003c\u003e();\n  \n    /** 主表放弃外键维护，推荐的写法 */\n    @OneToMany(mappedBy = \"banner\")\n    @Builder.Default\n    private List\u003cBannerItem\u003e itemList = new ArrayList\u003c\u003e();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210922234449-6tsm6gw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210922234449-6tsm6gw",
				"updated": "20210923231202"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class BannerItem{\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    /* 名称，对无意义id的描述 */\n    private String name;\n\n    /* 图片 */\n    private String img;\n\n    /* 点击后跳转的类型，如 SPU（需要spuId）、专题（需要themeId）、页面（pageId）等 */\n    private String type;\n\n    /* 关键字，如 spuId、ThemeId、pageId */\n    private String keyword;\n\n    @ManyToOne\n    @JoinColumn(name = \"banner_id\")\n    private Banner banner;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210922234449-5w8rwjd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210922234449-5w8rwjd",
				"updated": "20210923000915"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n// DataJpaTest、MybatisTest 会默认使用其测试数据源替代，若要使用自己配置的，需要添加如下注解\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\npublic class One2ManyTest {\n\n    @Autowired\n    private BannerRepository bannerRepository;\n\n    @Autowired\n    private BannerItemRepository bannerItemRepository;\n\n    /**\n     * 主表放弃维护外键后该方法无法添加外键值（虽然不报错）\n     */\n    @Test\n    @Rollback(false)\n    @Transactional\n    void testSave() {\n        Banner banner = Banner.builder().name(\"首页轮播图\").build();\n        BannerItem bannerItem = BannerItem.builder().name(\"鞋服\").build();\n\n        // 双向关联，主表维护外键\n        banner.getItemList().add(bannerItem);\n\n        bannerRepository.save(banner);\n        bannerItemRepository.save(bannerItem);\n        // 保存外键时没有直接 insert 而是2条 insert 后执行了 update！\n\t// Hibernate: insert into banner (description, img, name, title) values (?, ?, ?, ?)\n        // Hibernate: insert into banner_item (banner_id, img, keyword, name, type) values (?, ?, ?, ?, ?)\n        // Hibernate: update banner_item set banner_id=? where id=?\n\t// 可见，保存外键时没有直接 insert 而是 2 条 insert 后执行了 update！\n\n    }\n\n    /**\n     * 推荐使用的方式\n     */\n    @Test\n    @Rollback(false)\n    @Transactional\n    void testSave2() {\n        Banner banner = Banner.builder().name(\"首页轮播图\").build();\n        BannerItem bannerItem = BannerItem.builder()\n                .name(\"鞋服\")\n                .banner(banner)// 双向关联，从表维护外键\n                .build();\n\n        bannerRepository.save(banner);\n        bannerItemRepository.save(bannerItem);\n        // 保存外键时只用了2条 update！\n\t// Hibernate: insert into banner (description, img, name, title) values (?, ?, ?, ?)\n\t// Hibernate: insert into banner_item (banner_id, img, keyword, name, type) values (?, ?, ?, ?, ?)\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210922234436-5umxufg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210922234436-5umxufg",
				"updated": "20210923001017"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "建表日志"
				}
			]
		},
		{
			"ID": "20210923001011-cmqjyg0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210923001011-cmqjyg0",
				"updated": "20210923001043"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Hibernate: create table banner (id bigint not null auto_increment, description varchar(255), img varchar(255), name varchar(255), title varchar(255), primary key (id)) engine=InnoDB\nHibernate: create table banner_item (id bigint not null auto_increment, img varchar(255), keyword varchar(255), name varchar(255), type varchar(255), banner_id bigint, primary key (id)) engine=InnoDB\nHibernate: alter table banner_item add constraint FKhtdlqcpk4vq84rtuxqtj2ht9e foreign key (banner_id) references banner (id)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210923000116-i5k42ip",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923000116-i5k42ip",
				"updated": "20210923000116"
			}
		},
		{
			"ID": "20210923000116-wfbcwi5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923000116-wfbcwi5",
				"updated": "20210923000116"
			}
		},
		{
			"ID": "20210923001142-u376kip",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923001142-u376kip",
				"updated": "20210923001142"
			}
		},
		{
			"ID": "20210923001142-2mjkbrb",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210923001142-2mjkbrb",
				"updated": "20210923003748"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CascadeType 级联（不推荐） "
				}
			]
		},
		{
			"ID": "20210707235333-pqiohdg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-pqiohdg"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "删除从表"
				},
				{
					"Type": "NodeText",
					"Data": "数据：可以随时任意删除"
				}
			]
		},
		{
			"ID": "20210707235333-6rac0ma",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-6rac0ma"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "删除主表"
				},
				{
					"Type": "NodeText",
					"Data": "数据："
				}
			]
		},
		{
			"ID": "20210707235333-yw9o46f",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707235333-yw9o46f"
			},
			"Children": [
				{
					"ID": "20210707235333-l79kw17",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-l79kw17"
					},
					"Children": [
						{
							"ID": "20210707235333-7uk2sox",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-7uk2sox"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "没有从表数据引用：随便删"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-g028jd4",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-g028jd4"
					},
					"Children": [
						{
							"ID": "20210707235333-tj6jzbd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-tj6jzbd"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "有从表数据："
								}
							]
						},
						{
							"ID": "20210707235333-9lqk1l9",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707235333-9lqk1l9"
							},
							"Children": [
								{
									"ID": "20210707235333-gt54oep",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-gt54oep"
									},
									"Children": [
										{
											"ID": "20210707235333-qjvuta4",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-qjvuta4"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在默认情况下，它会把外键字段置为 null，然后删除主表数据。如果在数据库的表结构上，外键字段有非空约束，默认情况就会报错了"
												}
											]
										}
									]
								},
								{
									"ID": "20210707235333-uvjam2j",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-uvjam2j"
									},
									"Children": [
										{
											"ID": "20210707235333-y04ucjw",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-y04ucjw"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果配置了放弃维护关联关系的权利，则不能删除（与外键字段是否允许为 null，没有关系）因为在删除时，它根本不会去更新从表的外键字段了"
												}
											]
										}
									]
								},
								{
									"ID": "20210707235333-um3s6qj",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-um3s6qj"
									},
									"Children": [
										{
											"ID": "20210707235333-buwbled",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-buwbled"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果还想删除，使用级联删除引用。在实际开发中，级联删除请慎用！(在一对多的情况下)"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-38h276l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-38h276l"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "级联"
				},
				{
					"Type": "NodeText",
					"Data": "：操作一个对象的同时操作他的关联对象"
				}
			]
		},
		{
			"ID": "20210707235333-qv71qvf",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707235333-qv71qvf"
			},
			"Children": [
				{
					"ID": "20210707235333-rvpt59k",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-rvpt59k"
					},
					"Children": [
						{
							"ID": "20210707235333-etpv1pa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-etpv1pa"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "级联操作： 1.需要"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "区分操作主体"
								},
								{
									"Type": "NodeText",
									"Data": " 2.需要在操作主体的实体类上（主表或维护表），添加级联属性"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "cascade"
								},
								{
									"Type": "NodeText",
									"Data": "（需要添加到多表映射关系的注解上）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-cwdsuci",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-cwdsuci"
					},
					"Children": [
						{
							"ID": "20210707235333-0jflxaa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-0jflxaa"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "级联添加，案例：当我保存一个客户的同时保存联系人（在代码中只需保存客户！）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-vuq6uig",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-vuq6uig"
					},
					"Children": [
						{
							"ID": "20210707235333-xufyux2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-xufyux2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "级联删除，案例：当我删除一个客户的同时删除此客户的所有联系人，有中间表会先删除中间表（在代码中只需删除客户！）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-wa02f7x",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-wa02f7x"
					},
					"Children": [
						{
							"ID": "20210707235333-1188anm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-1188anm"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "级联更新，略"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-mdig7bd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-mdig7bd",
				"updated": "20210923001605"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "默认是不进行级联操作"
				},
				{
					"Type": "NodeText",
					"Data": "，需要在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "操作主表配置（一般配置在主表—一个List即搞定，虽然从表也可以配置）"
				},
				{
					"Type": "NodeText",
					"Data": "如下注解："
				}
			]
		},
		{
			"ID": "20210923001218-vfvo1m5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210923001218-vfvo1m5",
				"updated": "20210923001243"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Banner{\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    /* 名称，对无意义id的描述 */\n    private String name;\n\n    /* 可以展示到前端的 */\n    private String title;\n    private String description;\n    private String img;\n\n\n    /** 主表也可以维护外键，不推荐的写法 */\n    // @OneToMany\n    // @JoinColumn(name = \"bannerId\")\n    // @Builder.Default\n    // private List\u003cBannerItem\u003e itemList = new ArrayList\u003c\u003e();\n\n    /** 主表放弃外键维护，推荐的写法 */\n    @OneToMany(mappedBy = \"banner\", cascade = CascadeType.ALL)\n    @Builder.Default\n    private List\u003cBannerItem\u003e itemList = new ArrayList\u003c\u003e();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-u3gr8tq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-u3gr8tq",
				"updated": "20210923231211"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class BannerItem{\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    /* 名称，对无意义id的描述 */\n    private String name;\n\n    /* 图片 */\n    private String img;\n\n    /* 点击后跳转的类型，如 SPU（需要spuId）、专题（需要themeId）、页面（pageId）等 */\n    private String type;\n\n    /* 关键字，如 spuId、ThemeId、pageId */\n    private String keyword;\n\n    @ManyToOne(cascade = CascadeType.ALL)\n    @JoinColumn(name = \"banner_id\")\n    private Banner banner;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-ooq8s6d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-ooq8s6d"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "测试"
				}
			]
		},
		{
			"ID": "20210707235333-np89don",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-np89don",
				"updated": "20210923002124"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n// DataJpaTest、MybatisTest 会默认使用其测试数据源替代，若要使用自己配置的，需要添加如下注解\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\npublic class One2ManyTest {\n\n    @Autowired\n    private BannerRepository bannerRepository;\n\n    @Autowired\n    private BannerItemRepository bannerItemRepository;\n\n    /**\n     * 级联添加，保存一个banner的同时保存bannerItem\n     */\n    @Test\n    @Rollback(false)\n    @Transactional\n    void testCascadeSave() {\n        Banner banner = Banner.builder().name(\"首页轮播图\").build();\n\n        BannerItem bannerItem = BannerItem.builder()\n                .name(\"鞋服\")\n                .banner(banner)// 双向关联，从表维护外键（这个是维护外键的，和级联没有关系！！！）\n                .build();\n\n        banner.getItemList().add(bannerItem);\n        bannerRepository.save(banner);\n\t// Hibernate: insert into banner (description, img, name, title) values (?, ?, ?, ?)\n\t// Hibernate: insert into banner_item (banner_id, img, keyword, name, type) values (?, ?, ?, ?, ?)\n    }\n\n    /**\n     * 级联删除，删除一个客户的同时删除此客户的所有联系人。执行删除前记得把 ddl-auto 改为 update\n     */\n    @Test\n    @Rollback(false)\n    @Transactional\n    void testCascadeRemove() {\n        bannerRepository.deleteById(1L);\n\t// Hibernate: select banner0_.id as id1_1_0_, banner0_.description as descript2_1_0_, banner0_.img as img3_1_0_, banner0_.name as name4_1_0_, banner0_.title as title5_1_0_ from banner banner0_ where banner0_.id=?\n\t// Hibernate: select itemlist0_.banner_id as banner_i6_2_0_, itemlist0_.id as id1_2_0_, itemlist0_.id as id1_2_1_, itemlist0_.banner_id as banner_i6_2_1_, itemlist0_.img as img2_2_1_, itemlist0_.keyword as keyword3_2_1_, itemlist0_.name as name4_2_1_, itemlist0_.type as type5_2_1_ from banner_item itemlist0_ where itemlist0_.banner_id=?\n\t// Hibernate: delete from banner_item where id=?\n\t// Hibernate: delete from banner where id=?\n    }\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-jabc6md",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-jabc6md",
				"updated": "20210923002134"
			}
		},
		{
			"ID": "20210707235333-lmka1ov",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-lmka1ov"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "最佳实践 🔥"
				}
			]
		},
		{
			"ID": "20210707235333-tdcar3z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-tdcar3z"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "配置并使用多的一方维护关联关系（外键），保存时直接对外键赋值；配置并使用一的一方维护关联关系，还会执行 1 条 update 语句（多余！）。所以 JPA 协议有规定："
				}
			]
		},
		{
			"ID": "20210707235333-xxmu8vz",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707235333-xxmu8vz"
			},
			"Children": [
				{
					"ID": "20210707235333-1hbwpp9",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-1hbwpp9"
					},
					"Children": [
						{
							"ID": "20210707235333-y93q35f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-y93q35f"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "若配置"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "单向"
								},
								{
									"Type": "NodeText",
									"Data": "关联，关联关系的维护直接"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "配置在拥有外键的一方（从表）"
								},
								{
									"Type": "NodeText",
									"Data": "即可。拉勾课程推荐使用单向关联，不推荐双向关联，主表查询时使用 sql 查询。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-oj6nyhd",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-oj6nyhd"
					},
					"Children": [
						{
							"ID": "20210707235333-rb65d90",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-rb65d90"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "若配置"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "双向"
								},
								{
									"Type": "NodeText",
									"Data": "关联，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "维护关联关系的是拥有外键的一方（从表）"
								},
								{
									"Type": "NodeText",
									"Data": "，而"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "另一方（主表）必须配置 mappedBy 放弃外键维护"
								},
								{
									"Type": "NodeText",
									"Data": "；"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-lbeot9j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-lbeot9j"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "尽量避免双向关联，即只用一个注解@ManyToOne"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://www.wangzhenhua.rocks/zh-hans/java/jpa-one-to-many-many-to-one-best-practice",
					"TextMarkTextContent": "JPA 中的 OneToMany 和 ManyToOne 的最佳实践"
				}
			]
		},
		{
			"ID": "20210707235333-cczaq2b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-cczaq2b",
				"updated": "20210920004905"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一切级联更新和 orphanRemoval 都保持默认规则，并且 fetch 采用 lazy 延迟加载"
				}
			]
		},
		{
			"ID": "20210707235333-389pkry",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-389pkry"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "放弃外键维护和级联操作没有半点关系"
				}
			]
		},
		{
			"ID": "20210920004909-0vn7usg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210920004909-0vn7usg",
				"updated": "20210920004909"
			}
		},
		{
			"ID": "20210920004910-fumgl8d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210920004910-fumgl8d",
				"updated": "20210920004910"
			}
		},
		{
			"ID": "20210707235333-kjb40uf",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707235333-kjb40uf",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多对多"
				}
			]
		},
		{
			"ID": "20210707235333-z5986al",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-z5986al",
				"updated": "20210707235333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "用户和角色（多对多关系），不用多逼逼了，就是 RBAC 模型"
				}
			]
		},
		{
			"ID": "20210707235333-jb5rl02",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 3,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210707235333-jb5rl02"
			},
			"Children": [
				{
					"ID": "20210707235333-234hrqj",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210707235333-234hrqj"
					},
					"Children": [
						{
							"ID": "20210707235333-05selp8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-05selp8"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "明确表关系：一对多关系"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-w3z1d15",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210707235333-w3z1d15"
					},
					"Children": [
						{
							"ID": "20210707235333-gxdkjzt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-gxdkjzt"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "确定表关系（中间表）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-w1ckb4b",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20210707235333-w1ckb4b"
					},
					"Children": [
						{
							"ID": "20210707235333-x9c9xsy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-x9c9xsy"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "编写实体类，再实体类中描述表关系（"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "组合"
								},
								{
									"Type": "NodeText",
									"Data": "）"
								}
							]
						},
						{
							"ID": "20210707235333-qinsnz2",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707235333-qinsnz2"
							},
							"Children": [
								{
									"ID": "20210707235333-tlib9lq",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-tlib9lq"
									},
									"Children": [
										{
											"ID": "20210707235333-skj120m",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-skj120m"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "用户：包含角色的集合"
												}
											]
										}
									]
								},
								{
									"ID": "20210707235333-tznygfb",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-tznygfb"
									},
									"Children": [
										{
											"ID": "20210707235333-y72p4jn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-y72p4jn"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "角色：包含用户的集合"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-6atzcmz",
					"Type": "NodeListItem",
					"Data": "4",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 4,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "NA==",
						"Num": 4
					},
					"Properties": {
						"id": "20210707235333-6atzcmz"
					},
					"Children": [
						{
							"ID": "20210707235333-b0vvrth",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-b0vvrth"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "配置映射关系"
								}
							]
						},
						{
							"ID": "20210707235333-n99pvwe",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707235333-n99pvwe"
							},
							"Children": [
								{
									"ID": "20210707235333-5qwgk6w",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-5qwgk6w"
									},
									"Children": [
										{
											"ID": "20210707235333-sz6x3t6",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-sz6x3t6"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "使用 "
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "JPA 注解配置一对多映射关系"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210923002504-ixyvnox",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923002504-ixyvnox",
				"updated": "20210923002504"
			}
		},
		{
			"ID": "20210707235333-hsnt7t8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-hsnt7t8",
				"updated": "20210923002607"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@ManyToMany 实战（没有其他字段） 🔥"
				}
			]
		},
		{
			"ID": "20210707235333-hq32swz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-hq32swz"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@ManyToMany 代表多对多的关联关系，这种关联关系"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "任何一方都可以维护关联关系"
				}
			]
		},
		{
			"ID": "20210707235333-9r84xaa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-9r84xaa"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实际开发者对 @ManyToMany "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "用得比较少"
				},
				{
					"Type": "NodeText",
					"Data": "，一般我们会"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "用成对的 @ManyToOne 和 @OneToMany 代替"
				},
				{
					"Type": "NodeText",
					"Data": "，因为我们的中间表可能还有一些约定的公共字段，如 ID、update_time、create_time 等其他字段，当然"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "要是没有这些字段，可以使用"
				},
				{
					"Type": "NodeText",
					"Data": " @ManyToMany"
				}
			]
		},
		{
			"ID": "20210707235333-djqyqjb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-djqyqjb",
				"updated": "20210923231230"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Builder\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class SysUser {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long userId;\n    private String name;\n\n\n    @ManyToMany(cascade = CascadeType.ALL)\n    @JoinTable(name = \"sys_user_role\",\n            joinColumns = @JoinColumn(name = \"user_id\"),\n            inverseJoinColumns = @JoinColumn(name = \"role_id\"))\n    @Builder.Default\n    private Set\u003cSysRole\u003e roles = new HashSet\u003c\u003e();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-19k5t4w",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-19k5t4w",
				"updated": "20210923003256"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Entity\npublic class SysRole {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long roleId;\n    private String roleName;\n\n\n    // referencedColumnName 可以不配置，默认为主键\n    @ManyToMany(mappedBy = \"roles\")\n    @Builder.Default\n    private Set\u003cSysUser\u003e users = new HashSet\u003c\u003e();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-umktx54",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-umktx54"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface SysUserRepository extends JpaRepository\u003cSysUser,Long\u003e, JpaSpecificationExecutor\u003cSysUser\u003e {\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-9vmkqzt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-9vmkqzt"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface SysRoleRepository extends JpaRepository\u003cSysRole,Long\u003e, JpaSpecificationExecutor\u003cSysRole\u003e {\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-57ud0zu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-57ud0zu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "测试"
				}
			]
		},
		{
			"ID": "20210707235333-ddsizds",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-ddsizds",
				"updated": "20210923003709"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n// DataJpaTest、MybatisTest 会默认使用其测试数据源替代，若要使用自己配置的，需要添加如下注解\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\npublic class Many2ManyTest {\n\n    @Autowired\n    private SysUserRepository sysUserRepository;\n\n    @Autowired\n    private SysRoleRepository sysRoleRepository;\n\n\n    /**\n     * 保存一个用户、一个角色\n     */\n    @Test\n    @Rollback(false)\n    @Transactional\n    void testSave() {\n        SysUser sysUser = SysUser.builder().name(\"conanan\").build();\n        SysRole sysRole = SysRole.builder().roleName(\"架构师\").build();\n\n        // 配置用户到角色的关系，可以对中间表进行维护\n        sysUser.getRoles().add(sysRole);\n        // 配置角色到用户的关系，可以对中间表进行维护\n        // sysRole.getUsers().add(sysUser);\n        // 但是不能同时维护，因为联合主键不能重复！\n        // 报错 Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '1-1' for key 'sys_user_role.PRIMARY'\n        // 放弃被选择一方（如角色）的中间表维护权即可！\n\n        sysUserRepository.save(sysUser);\n        sysRoleRepository.save(sysRole);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-vrarq55",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-vrarq55"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "生成的 sql："
				}
			]
		},
		{
			"ID": "20210707235333-ifqnzk1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-ifqnzk1",
				"updated": "20210923003424"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "create table sys_role (role_id bigint not null auto_increment, role_name varchar(255), primary key (role_id)) engine=InnoDB\ncreate table sys_user (user_id bigint not null auto_increment, name varchar(255), primary key (user_id)) engine=InnoDB\ncreate table sys_user_role (user_id bigint not null, role_id bigint not null, primary key (user_id, role_id)) engine=InnoDB\n\nalter table sys_user_role add constraint FKhh52n8vd4ny9ff4x9fb8v65qx foreign key (role_id) references sys_role (role_id)\nalter table sys_user_role add constraint FKb40xxfch70f5qnyfw8yme1n1s foreign key (user_id) references sys_user (user_id)\n\n-- 保存\ninsert into sys_user (name) values (?)\ninsert into sys_role (role_name) values (?)\ninsert into sys_user_role (user_id, role_id) values (?, ?)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-vvpwkx1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-vvpwkx1",
				"updated": "20210923003434"
			}
		},
		{
			"ID": "20210923003435-7uhgrrp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923003435-7uhgrrp",
				"updated": "20210923003435"
			}
		},
		{
			"ID": "20210707235333-w12ilgy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-w12ilgy",
				"updated": "20210923003734"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@ManyToMany 级联实战（不推荐）"
				}
			]
		},
		{
			"ID": "20210707235333-p1jx978",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-p1jx978",
				"updated": "20210923003843"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "配置主表级联即可，因为外键维护也在主表这写的"
				}
			]
		},
		{
			"ID": "20210707235333-ch5zang",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-ch5zang",
				"updated": "20210923231431"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Builder\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class SysUser {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long userId;\n    private String name;\n\n\n    @ManyToMany(cascade = CascadeType.ALL)\n    @JoinTable(name = \"sys_user_role\",\n            joinColumns = @JoinColumn(name = \"user_id\"),\n            inverseJoinColumns = @JoinColumn(name = \"role_id\"))\n    @Builder.Default\n    private Set\u003cSysRole\u003e roles = new HashSet\u003c\u003e();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-ewj0uwz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210707235333-ewj0uwz",
				"updated": "20210923004507"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n// DataJpaTest、MybatisTest 会默认使用其测试数据源替代，若要使用自己配置的，需要添加如下注解\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\npublic class Many2ManyTest {\n\n    @Autowired\n    private SysUserRepository sysUserRepository;\n\n    @Autowired\n    private SysRoleRepository sysRoleRepository;\n\n    /**\n     * 测试级联添加（保存一个用户同时保存用户相关角色及中间表关联信息）\n     */\n    @Test\n    @Rollback(false)\n    @Transactional\n    void testCascadeAdd() {\n\n        SysUser sysUser = SysUser.builder().name(\"conanan\").build();\n        SysRole sysRole = SysRole.builder().roleName(\"架构师\").build();\n\n        // 配置用户到角色的关系，可以对中间表进行维护。若还配置了级联，则这里也维护了级联关系\n        sysUser.getRoles().add(sysRole);\n        // 配置角色到用户的关系，可以对中间表进行维护\n        // sysRole.getUsers().add(sysUser);\n        // 但是不能同时维护，因为联合主键不能重复！\n        // 报错 Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '1-1' for key 'sys_user_role.PRIMARY'\n        // 放弃被选择一方（如角色）的中间表维护权即可！\n        sysUserRepository.save(sysUser);\n        // insert into sys_user (name) values (?)\n        // insert into sys_role (role_name) values (?)\n        // insert into sys_user_role (user_id, role_id) values (?, ?)\n    }\n\n    /**\n     * 测试级联删除（删除一个用户同时删除中间表关联信息及用户相关角色）。执行删除前记得把 ddl-auto 改为 update\n     */\n    @Test\n    @Rollback(false)\n    @Transactional\n    void testCascadeRemove() {\n        sysUserRepository.deleteById(1L);\n        // select sysuser0_.user_id as user_id1_4_0_, sysuser0_.name as name2_4_0_ from sys_user sysuser0_ where sysuser0_.user_id=?\n        // select roles0_.user_id as user_id1_5_0_, roles0_.role_id as role_id2_5_0_, sysrole1_.role_id as role_id1_3_1_, sysrole1_.role_name as role_nam2_3_1_ from sys_user_role roles0_ inner join sys_role sysrole1_ on roles0_.role_id=sysrole1_.role_id where roles0_.user_id=?\n        // delete from sys_user_role where user_id=?\n        // delete from sys_role where role_id=?\n        // delete from sys_user where user_id=?\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210707235333-awrzjcq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-awrzjcq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有可能删除报错！因为在删除中间表后，删除角色表时，该角色可能还被其他用户引用！"
				}
			]
		},
		{
			"ID": "20210923004530-p5xcduq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923004530-p5xcduq",
				"updated": "20210923004530"
			}
		},
		{
			"ID": "20210923004530-57rw8pt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923004530-57rw8pt",
				"updated": "20210923004530"
			}
		},
		{
			"ID": "20210707235333-ciyqgcn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-ciyqgcn",
				"updated": "20210923004544"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@ManyToOne 和 @OneToMany 表示多对多 🔥"
				}
			]
		},
		{
			"ID": "20210707235333-75vjzs2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-75vjzs2",
				"updated": "20210923010455"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需要新建一个中间表 @Entity 类，并在该类中维护映射关系，记得在 2 个主表中配置 mappedBy。"
				}
			]
		},
		{
			"ID": "20210923010456-8k1se8n",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210923010456-8k1se8n",
				"updated": "20210923010522"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Builder\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class MyUser {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long userId;\n    private String name;\n\n    @OneToMany(mappedBy = \"myUser\")\n    @Builder.Default\n    private Set\u003cMyUserRole\u003e myUserRoles = new HashSet\u003c\u003e();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210923010508-tjs0y64",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210923010508-tjs0y64",
				"updated": "20210923010551"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Entity\npublic class MyRole {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long roleId;\n    private String roleName;\n\n    // referencedColumnName 可以不配置，默认为主键\n    @OneToMany(mappedBy = \"myRole\")\n    @Builder.Default\n    private Set\u003cMyUserRole\u003e myUserRoles = new HashSet\u003c\u003e();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210923010508-5kth6u5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210923010508-5kth6u5",
				"updated": "20210923231443"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Entity\npublic class MyUserRole {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private LocalDateTime createTime;\n\n    private Boolean deleted;\n\n    @ManyToOne\n    @JoinColumn(name = \"user_id\")\n    private MyUser myUser;\n\n    @ManyToOne\n    @JoinColumn(name = \"role_id\")\n    private MyRole myRole;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210923010524-2ow3yle",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210923010524-2ow3yle",
				"updated": "20210923231450"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Entity\npublic class MyUserRole {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private LocalDateTime createTime;\n\n    private Boolean deleted;\n\n    @ManyToOne\n    @JoinColumn(name = \"user_id\")\n    private MyUser myUser;\n\n    @ManyToOne\n    @JoinColumn(name = \"role_id\")\n    private MyRole myRole;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210923010426-kvj7gis",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210923010426-kvj7gis",
				"updated": "20210923010705"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "create table my_role (role_id bigint not null auto_increment, role_name varchar(255), primary key (role_id)) engine=InnoDB\ncreate table my_user (user_id bigint not null auto_increment, name varchar(255), primary key (user_id)) engine=InnoDB\ncreate table my_user_role (id bigint not null auto_increment, create_time datetime(6), deleted bit, role_id bigint, user_id bigint, primary key (id)) engine=InnoDB\n\nalter table my_user_role add constraint FKo6umfp8rayl6igco52yv9kbn2 foreign key (role_id) references my_role (role_id)\nalter table my_user_role add constraint FKmfjk40m0vdx3wg37x4w0ywf2 foreign key (user_id) references my_user (user_id)\nalter table sys_user_role add constraint FKhh52n8vd4ny9ff4x9fb8v65qx foreign key (role_id) references sys_role (role_id)\nalter table sys_user_role add constraint FKb40xxfch70f5qnyfw8yme1n1s foreign key (user_id) references sys_user (user_id)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210923010427-ggu6rps",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210923010427-ggu6rps",
				"updated": "20210923010759"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n// DataJpaTest、MybatisTest 会默认使用其测试数据源替代，若要使用自己配置的，需要添加如下注解\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\npublic class Many2ManyTest2 {\n\n    @Autowired\n    private MyUserRepository myUserRepository;\n\n    @Autowired\n    private MyRoleRepository myRoleRepository;\n\n    @Autowired\n    private MyUserRoleRepository myUserRoleRepository;\n\n\n\n    /**\n     * 保存一个用户、一个角色\n     */\n    @Test\n    @Rollback(false)\n    @Transactional\n    void testSave() {\n        MyUser myUser = MyUser.builder().name(\"conanan\").build();\n        MyRole myRole = MyRole.builder().roleName(\"架构师\").build();\n        MyUserRole myUserRole = MyUserRole.builder().myUser(myUser).myRole(myRole).createTime(LocalDateTime.now()).build();\n\n\n        myUserRepository.save(myUser);\n        myRoleRepository.save(myRole);\n        myUserRoleRepository.save(myUserRole);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210923010427-uqkei6u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923010427-uqkei6u",
				"updated": "20210923010807"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "级联写法略"
				}
			]
		},
		{
			"ID": "20210923004608-ed5dwmc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923004608-ed5dwmc",
				"updated": "20210923004608"
			}
		},
		{
			"ID": "20210923004608-0fzdnm7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923004608-0fzdnm7",
				"updated": "20210923004608"
			}
		},
		{
			"ID": "20210707235333-x583anq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-x583anq"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "多对多的最佳实践 🔥"
				}
			]
		},
		{
			"ID": "20210707235333-my2p36y",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707235333-my2p36y"
			},
			"Children": [
				{
					"ID": "20210707235333-r1x2s1x",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-r1x2s1x"
					},
					"Children": [
						{
							"ID": "20210707235333-92uyv8f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-92uyv8f"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@ManyToMany 使用一般较少，除非没有额外字段"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-iur61kg",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-iur61kg"
					},
					"Children": [
						{
							"ID": "20210707235333-ilunn2h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-ilunn2h"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "上面我们介绍的 @OneToMany 的最佳实践同样适用，我为了说明方便，采用的是双向关联，而"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "实际生产一般是在中间表对象里面做单向关联"
								},
								{
									"Type": "NodeText",
									"Data": "，这样会让实体之间的关联关系简单很多。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-rw7maby",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-rw7maby"
					},
					"Children": [
						{
							"ID": "20210707235333-jd71p6h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-jd71p6h"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "与 @OneToMany 一样的道理，不要用级联删除和 orphanRemoval=true。默认配置即可！"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-irkpnn2",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-irkpnn2"
					},
					"Children": [
						{
							"ID": "20210707235333-obibhnn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-obibhnn"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "FetchType 采用默认方式：fetch = FetchType.LAZY 的方式。默认配置即可！"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210923010811-btfansd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923010811-btfansd",
				"updated": "20210923010811"
			}
		},
		{
			"ID": "20210923235746-g4eoclw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923235746-g4eoclw",
				"updated": "20210923235746"
			}
		},
		{
			"ID": "20210923235746-zfzmqm7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210923235746-zfzmqm7",
				"updated": "20210923235755"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Jackson 与 JPA 常见的问题 🔥"
				}
			]
		},
		{
			"ID": "20210923235755-ibb8qnk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210923235755-ibb8qnk",
				"updated": "20210924001151"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查询死循环 🔥"
				}
			]
		},
		{
			"ID": "20210923235805-kr18dp1",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210923235805-kr18dp1",
				"updated": "20210923235843"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@ToString 或 @Data 🔥"
				}
			]
		},
		{
			"ID": "20210923235841-gp45uuc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923235841-gp45uuc",
				"updated": "20210923235851"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "写 ToString 方法，特别是 JPA 的实体的时候，很容易陷入死循环，因为实体之间的关联关系配置是双向的，我们就需要 ToString 的时候把一方排除掉"
				}
			]
		},
		{
			"ID": "20210923235855-67krshm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210923235855-67krshm",
				"updated": "20210924000215"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Getter\n@Setter\n@ToString// @Data 时也要注意\npublic class BannerItem extends BaseEntity{\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    /* 名称，对无意义id的描述 */\n    private String name;\n\n    /* 图片 */\n    private String img;\n\n    /* 点击后跳转的类型，如 SPU（需要spuId）、专题（需要themeId）、页面（pageId）等 */\n    private String type;\n\n    /* 关键字，如 spuId、ThemeId、pageId */\n    private String keyword;\n\n    @ManyToOne\n    @JoinColumn(name = \"banner_id\", foreignKey = @ForeignKey(NO_CONSTRAINT))\n    @ToString.Exclude\n    private Banner banner;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210923235837-psobpzx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923235837-psobpzx",
				"updated": "20210923235837"
			}
		},
		{
			"ID": "20210924000227-e720i94",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210924000227-e720i94",
				"updated": "20210924000227"
			}
		},
		{
			"ID": "20210924000220-6wwg9jd",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20210924000220-6wwg9jd",
				"updated": "20210924000251"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "序列化时 🔥"
				}
			]
		},
		{
			"ID": "20210924000251-epcvf4n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210924000251-epcvf4n",
				"updated": "20210924000319"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "转化JSON的时候，双向关联也会死循环。按照我们上面讲的方法，这是时候我们要想到通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@JsonIgnoreProperties(value={\u0026quot;banner\u0026quot;})"
				},
				{
					"Type": "NodeText",
					"Data": "或者字段上面配置"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@JsonIgnore"
				}
			]
		},
		{
			"ID": "20210924000321-mrs6j1z",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210924000321-mrs6j1z",
				"updated": "20210924000352"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Getter\n@Setter\npublic class BannerItem extends BaseEntity{\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    /* 名称，对无意义id的描述 */\n    private String name;\n\n    /* 图片 */\n    private String img;\n\n    /* 点击后跳转的类型，如 SPU（需要spuId）、专题（需要themeId）、页面（pageId）等 */\n    private String type;\n\n    /* 关键字，如 spuId、ThemeId、pageId */\n    private String keyword;\n\n    @ManyToOne\n    @JoinColumn(name = \"banner_id\", foreignKey = @ForeignKey(NO_CONSTRAINT))\n    @JsonIgnore\n    private Banner banner;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210924000220-gzyujy3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210924000220-gzyujy3",
				"updated": "20210924000442"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@JsonBackReference"
				},
				{
					"Type": "NodeText",
					"Data": " 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "@JsonManagedReference"
				},
				{
					"Type": "NodeText",
					"Data": " 注解也可以解决死循环"
				}
			]
		},
		{
			"ID": "20210924000444-6itqikp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20210924000444-6itqikp",
				"updated": "20210924000948"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Banner {\n\n    @JsonBackReference\n    @OneToMany(mappedBy = \"banner\")\n    private List\u003cBannerItem\u003e itemList;\n}\n\npublic class BannerItem {\n  \n    @ManyToOne\n    @JoinColumn(name = \"banner_id\", foreignKey = @ForeignKey(NO_CONSTRAINT))\n    @JsonManagedReference\n    private Banner banner;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20210923235744-662m2zh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923235744-662m2zh",
				"updated": "20210923235744"
			}
		},
		{
			"ID": "20210923235744-dthzabd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923235744-dthzabd",
				"updated": "20210923235744"
			}
		},
		{
			"ID": "20210923235744-neb2wey",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923235744-neb2wey",
				"updated": "20210923235744"
			}
		},
		{
			"ID": "20210923235744-n8hzcx6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923235744-n8hzcx6",
				"updated": "20210923235744"
			}
		},
		{
			"ID": "20210707235333-z7d0jo2",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707235333-z7d0jo2",
				"updated": "20210923010838"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对象导航查询介绍"
				}
			]
		},
		{
			"ID": "20210707235333-2wbqcjj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-2wbqcjj"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对象导航查询是根据已经加载的对象，导航到他的关联对象。它利用类与类之间的关系来检索对象。例如：我们通过 ID 查询方式查出一个客户，可以调用 Customer 类中的 getLinkMans()方法来获取该客户的所有联系人。对象导航查询的使用要求是：两个对象之间必须存在关联关系。"
				}
			]
		},
		{
			"ID": "20210707235333-d1sl7ut",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-d1sl7ut"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对象导航查询"
				}
			]
		},
		{
			"ID": "20210707235333-l5vqtsk",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707235333-l5vqtsk"
			},
			"Children": [
				{
					"ID": "20210707235333-q6f20wf",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-q6f20wf"
					},
					"Children": [
						{
							"ID": "20210707235333-r9q51dt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-r9q51dt"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "从一方查询多方：默认延迟加载"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-yjnyslj",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-yjnyslj"
					},
					"Children": [
						{
							"ID": "20210707235333-nq2pw0q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-nq2pw0q"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "从多方查询一方：默认立即加载"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-9tokll6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-9tokll6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以修改配置将其改为立即加载（不推荐！），"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "fetch 配置在多表关系中主体（或一方或多方）的注解上"
				}
			]
		},
		{
			"ID": "20210707235333-5w754ak",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-5w754ak"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一对多中的例子，无需任何修改"
				}
			]
		},
		{
			"ID": "20210707235333-c2bxcm9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-c2bxcm9"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n// DataJpaTest、MybatisTest 会默认使用其测试数据源替代，若要使用自己配置的，需要添加如下注解\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\npublic class ObjectNavigationTest {\n\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Autowired\n    private LinkManRepository linkManRepository;\n\n\n    /**\n     * 对象导航查询默认也是使用延迟加载，使用关联对象时才查询，仅仅.调用不会执行查询\n     */\n    @Test\n    void testSelect1() {\n        Customer customer = customerRepository.getOne(1L);\n        Set\u003cLinkMan\u003e linkManSet = customer.getLinkManSet();\n        System.out.println(linkManSet);// 此时才查询\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-spc2m2a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-spc2m2a"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从一方查询多方：默认延迟加载"
				}
			]
		},
		{
			"ID": "20210707235333-4880m56",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-4880m56"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "select * from customer customer0_ where customer0_.id=?\nselect * from link_man linkmanset0_ where linkmanset0_.cust_id=?\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-mxx1cg9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-mxx1cg9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从多方查询一方：默认立即加载"
				}
			]
		},
		{
			"ID": "20210707235333-isriusj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-isriusj"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT\n -- 略掉字段\n *\nFROM\n\tlink_man linkman0_\n\tLEFT OUTER JOIN customer customer1_ ON linkman0_.cust_id = customer1_.id\nWHERE\n\tlinkman0_.id =?\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210923010842-qw2ngjo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210923010842-qw2ngjo",
				"updated": "20210923010842"
			}
		},
		{
			"ID": "20210707235333-thu5jio",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707235333-thu5jio"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "未整理"
				}
			]
		},
		{
			"ID": "20210707235333-03lftz3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-03lftz3"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "http://www.wangzhenhua.rocks/zh-hans/java/jpa-one-to-many-many-to-one-best-practice",
					"TextMarkTextContent": "JPA 中的 OneToMany 和 ManyToOne 的最佳实践"
				},
				{
					"Type": "NodeText",
					"Data": "，还有篇博客"
				}
			]
		},
		{
			"ID": "20210707235333-1w0v3zm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-1w0v3zm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "太复杂了，JPA 变用边写吧。。。"
				}
			]
		},
		{
			"ID": "20210914234915-bosm43n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210914234915-bosm43n",
				"updated": "20210914234915"
			}
		}
	]
}