{
	"ID": "20210707235333-4vryfex",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20210707235333-4vryfex",
		"title": "604.Entity 多表详解（掌握）",
		"type": "doc",
		"updated": "20210915235435"
	},
	"Children": [
		{
			"ID": "20210707235333-71fsx8x",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707235333-71fsx8x"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "一对一"
				}
			]
		},
		{
			"ID": "20210707235333-se3jv95",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-se3jv95"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "JPA 协议 🔥"
				}
			]
		},
		{
			"ID": "20210707235333-leb40jo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-leb40jo"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"CodeMarkerLen": 1,
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker",
							"Data": "`"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "@OneToOne"
						},
						{
							"Type": "NodeCodeSpanCloseMarker",
							"Data": "`"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 一般表示对象之间一对一的关联关系，它可以放在 field 上面，也可以放在 get/set 方法上面。"
				}
			]
		},
		{
			"ID": "20210707235333-rdmyt7l",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707235333-rdmyt7l"
			},
			"Children": [
				{
					"ID": "20210707235333-qmio5jf",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-qmio5jf"
					},
					"Children": [
						{
							"ID": "20210707235333-6n22odo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-6n22odo"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果是配置"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "双向关联"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "维护关联关系的是拥有外键的一方"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，而"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "另一方必须配置 mappedBy"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-ry3qlfg",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-ry3qlfg"
					},
					"Children": [
						{
							"ID": "20210707235333-vkdhxi9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-vkdhxi9"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果是单项关联，直接配置在"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "拥有外键的一方"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "即可。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210915235435-tctv8xw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210915235435-tctv8xw",
				"updated": "20210915235435"
			}
		},
		{
			"ID": "20210707235333-r2rtq9a",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-r2rtq9a"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "案例介绍"
				}
			]
		},
		{
			"ID": "20210707235333-if66vyq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-if66vyq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "举个例子：user 表是用户的主信息，user_info 是用户的扩展信息，两者之间是一对一的关系。"
				}
			]
		},
		{
			"ID": "20210707235333-gcp017c",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-gcp017c"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "单向关联"
				}
			]
		},
		{
			"ID": "20210707235333-597jr6i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-597jr6i"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "user_info 表里面有一个 user_id 作为关联关系的外键，如果是单项关联，我们的写法如下："
				}
			]
		},
		{
			"ID": "20210707235333-tacemi5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-tacemi5"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n   @Id\n   @GeneratedValue(strategy= GenerationType.AUTO)\n   private Long id;\n   private String name;\n   private String email;\n   private String sex;\n   private String address;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-k3avfkn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-k3avfkn"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "User 实体里面什么都没变化，不需要添加 @OneToOne 注解。我们只需要在拥有外键的一方配置就可以，所以 UserInfo 的代码如下："
				}
			]
		},
		{
			"ID": "20210707235333-9ivh1dr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-9ivh1dr"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ToString(exclude = \"user\")\npublic class UserInfo {\n   @Id\n   @GeneratedValue(strategy= GenerationType.AUTO)\n   private Long id;\n   private Integer ages;\n   private String telephone;\n   @OneToOne //维护user的外键关联关系，配置一对一\n   private User user;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-od1vltz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-od1vltz"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们看到，UserInfo 实体对象里面添加了 @OneToOne 注解，这时我们写一个测试用例跑一下看看有什么效果："
				}
			]
		},
		{
			"ID": "20210707235333-ks5eupd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-ks5eupd"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "create table user (id bigint not null, address varchar(255), email varchar(255), name varchar(255), sex varchar(255), primary key (id))\ncreate table user_info (id bigint not null, ages integer, telephone varchar(255), user_id bigint, primary key (id))\nalter table user_info add constraint FKn8pl63y4abe7n0ls6topbqjh2 foreign key (user_id) references user\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-2nx6z1r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-2nx6z1r"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为我们新建了两个实体，跑任何一个 @SpringDataTest 就会看到上面有三个 sql 在执行，分别创建了两张表，而在 user_info 表上面还创建了一个外键索引。"
				}
			]
		},
		{
			"ID": "20210707235333-unr7add",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-unr7add"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "双向关联"
				}
			]
		},
		{
			"ID": "20210707235333-4hrka86",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-4hrka86"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们保持 UserInfo 不变，在 User 实体对象里面添加这一段代码即可。"
				}
			]
		},
		{
			"ID": "20210707235333-4kwbsxq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-4kwbsxq"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@OneToOne(mappedBy = \"user\")\nprivate UserInfo userInfo;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-jae6ua6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-jae6ua6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "完整的 User 实体对象就会变成如下模样。"
				}
			]
		},
		{
			"ID": "20210707235333-xxjyyq8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-xxjyyq8"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User {\n   @Id\n   @GeneratedValue(strategy= GenerationType.AUTO)\n   private Long id;\n   private String name;\n   private String email;\n   @OneToOne(mappedBy = \"user\")\n   private UserInfo userInfo;//变化之处\n   private String sex;\n   private String address;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-cy8ahrk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-cy8ahrk"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们跑任何一个测试用例，就会看到运行结果是一样的，还是上面三条 sql。那么我们再查看一下 @OneToOne 源码，看看其支持的配置都有哪些。"
				}
			]
		},
		{
			"ID": "20210707235333-n48k9j8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-n48k9j8"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "OneToOne 源码解读"
				}
			]
		},
		{
			"ID": "20210707235333-pvmlrmy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-pvmlrmy"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public @interface OneToOne {\n    //表示关系目标实体，默认该注解标识的返回值的类型的类。\n    Class targetEntity() default void.class;\n    //cascade 级联操作策略，就是我们常说的级联操作\n    CascadeType[] cascade() default {};\n    //数据获取方式EAGER(立即加载)/LAZY(延迟加载)\n    FetchType fetch() default EAGER;\n    //是否允许为空，默认是可选的，也就表示可以为空；\n    boolean optional() default true;\n    //关联关系被谁维护的一方对象里面的属性名字。 双向关联的时候必填\n    String mappedBy() default \"\";\n    //当被标识的字段发生删除或者置空操作之后，是否同步到关联关系的一方，即进行通过删除操作，默认flase，注意与CascadeType.REMOVE 级联删除的区别\n    boolean orphanRemoval() default false;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-vgsxc2s",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-vgsxc2s"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "mappedBy 注意事项 🔥"
				}
			]
		},
		{
			"ID": "20210707235333-7gojo5j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-7gojo5j"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "只有关联关系的"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "维护方"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "才能"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "操作两个实体之间外键"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "的关系。"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "被维护方即使设置了维护方属性进行存储也不会更新外键关联"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210707235333-kqiu8i5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-kqiu8i5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "mappedBy 不能与 @JoinColumn 或者 @JoinTable 同时使用，因为没有意义，关联关系不在这里面维护。"
				}
			]
		},
		{
			"ID": "20210707235333-y4evk4e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-y4evk4e"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此外，"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "mappedBy 的值"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "是指"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "另一方的实体里面属性的字段"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，而不是数据库字段，也不是实体的对象的名字。也就是维护关联关系的一方属性字段名称，"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "或者加了 @JoinColumn / @JoinTable 注解的属性字段名称"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。如上面的 User 例子 user 里面 mappedBy 的值，就是 UserInfo 里面的 user 字段的名字。"
				}
			]
		},
		{
			"ID": "20210707235333-y0br6t3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-y0br6t3"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "CascadeType 用法"
				}
			]
		},
		{
			"ID": "20210707235333-szzjeuo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-szzjeuo"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 CascadeType 的用法中，CascadeType 的枚举值只有五个，分别如下："
				}
			]
		},
		{
			"ID": "20210707235333-7fw78ea",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Tight": true,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 3,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210707235333-7fw78ea"
			},
			"Children": [
				{
					"ID": "20210707235333-3zdey32",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210707235333-3zdey32"
					},
					"Children": [
						{
							"ID": "20210707235333-wirjfb5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-wirjfb5"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CascadeType.PERSIST 级联新建"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-tmdi35i",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210707235333-tmdi35i"
					},
					"Children": [
						{
							"ID": "20210707235333-8vcir31",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-8vcir31"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CascadeType.REMOVE 级联删除"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-uzrsabn",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20210707235333-uzrsabn"
					},
					"Children": [
						{
							"ID": "20210707235333-vyoscxx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-vyoscxx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CascadeType.REFRESH 级联刷新"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-4jeadii",
					"Type": "NodeListItem",
					"Data": "4",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 4,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "NA==",
						"Num": 4
					},
					"Properties": {
						"id": "20210707235333-4jeadii"
					},
					"Children": [
						{
							"ID": "20210707235333-t2zpxj2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-t2zpxj2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CascadeType.MERGE 级联更新"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-uy7wdre",
					"Type": "NodeListItem",
					"Data": "5",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 5,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "NQ==",
						"Num": 5
					},
					"Properties": {
						"id": "20210707235333-uy7wdre"
					},
					"Children": [
						{
							"ID": "20210707235333-ae9rxpn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-ae9rxpn"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CascadeType.ALL 四项全选"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-l0jkts9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-l0jkts9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中，默认是没有级联操作的，关系表不会产生任何影响。此外，JPA 2.0 还新增了 CascadeType.DETACH，即级联实体到 Detach 状态。"
				}
			]
		},
		{
			"ID": "20210707235333-8vrxyo4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-8vrxyo4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "了解了枚举值，下面我们来测试一下级联新建和级联删除。"
				}
			]
		},
		{
			"ID": "20210707235333-9o0f9go",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-9o0f9go"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，修改 UserInfo 里面的关键代码如下，并在 @OneToOne 上面添加"
				}
			]
		},
		{
			"ID": "20210707235333-2himik3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-2himik3"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"CodeMarkerLen": 1,
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker",
							"Data": "`"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "cascade ={CascadeType.PERSIST,CascadeType.REMOVE}"
						},
						{
							"Type": "NodeCodeSpanCloseMarker",
							"Data": "`"
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-dva10wa",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-dva10wa"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n// DataJpaTest、MybatisTest 会默认使用其测试数据源替代，若要使用自己配置的，需要添加如下注解\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\npublic class One2OneTest {\n\n    @Autowired\n    private UserInfoRepository userInfoRepository;\n\n\n    @Test\n    @Rollback(false)\n    public void testUserRelationships() throws JsonProcessingException {\n        User user = User.builder().name(\"jackxx\").email(\"123456@126.com\").build();\n        UserInfo userInfo = UserInfo.builder().ages(12).user(user).telephone(\"12345678\").build();\n        //保存userInfo的同上也会保存User信息\n        userInfoRepository.saveAndFlush(userInfo);\n        //删除userInfo，同时也会级联的删除user记录\n        userInfoRepository.delete(userInfo);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-cepv6gk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-cepv6gk"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最后，运行一下看看效果。"
				}
			]
		},
		{
			"ID": "20210707235333-qozxgdh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-qozxgdh"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "img"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "./assets/CgqCHl9xtbmAP4vcAAEKnyVM6Ig708.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-xpmt7jx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-xpmt7jx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面的测试在执行了 insert 的时候，会执行两条 insert 的 sql 和两条 delete 的 sql，这就体现出了 CascadeType.PERSIST 和 CascadeType.REMOVE 的作用。"
				}
			]
		},
		{
			"ID": "20210707235333-6jss7vy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-6jss7vy"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面讲了"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "级联删除"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "的场景，下面我们再说一下"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "关联关系的删除场景"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "该怎么做。"
				}
			]
		},
		{
			"ID": "20210707235333-9ry53an",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-9ry53an"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "orphanRemoval 属性用法"
				}
			]
		},
		{
			"ID": "20210707235333-nbobud6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-nbobud6"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "orphanRemoval 表示当关联关系被删除"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "的时候，"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "是否应用级联删除"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，默认 false。什么意思呢？测试一下你就会明白。"
				}
			]
		},
		{
			"ID": "20210707235333-8gfjh3t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-8gfjh3t"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "首先，还沿用上面的例子，当我们删除 userInfo 的时候，把 User 置空，作如下改动。"
				}
			]
		},
		{
			"ID": "20210707235333-y20ac0i",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-y20ac0i"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "userInfo.setUser(null);\nuserInfoRepository.delete(userInfo);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-chz4tsi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-chz4tsi"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其次，我们再运行测试，看看效果。"
				}
			]
		},
		{
			"ID": "20210707235333-9bm9dsu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-9bm9dsu"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "delete from user_info where id=?\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-48er9y5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-48er9y5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这时候你就会发现，少了一条删除 user 的 sql，说明没有进行级联删除。那我们再把 UserInfo 做一下调整。"
				}
			]
		},
		{
			"ID": "20210707235333-hiyv6b6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-hiyv6b6"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class UserInfo {\n   @OneToOne(cascade = {CascadeType.PERSIST},orphanRemoval = true)\n   private User user;\n   //....其他没变的代码省了\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-oi2vvwx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-oi2vvwx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后，我们把 CascadeType.Remove 删除了，不让它进行级联删除，但是我们把 orphanRemoval 设置成 true，即当关联关系变化的时候级联更新。我们看下完整的测试用例。"
				}
			]
		},
		{
			"ID": "20210707235333-xysrums",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-xysrums"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "    @Test\n    public void testUserRelationships() throws JsonProcessingException {\n        User user = User.builder().name(\"jackxx\").email(\"123456@126.com\").build();\n        UserInfo userInfo = UserInfo.builder().ages(12).user(user).telephone(\"12345678\").build();\n        userInfoRepository.saveAndFlush(userInfo);\n        userInfo.setAges(13);\n        userInfo.setUser(null);//还是通过这个设置user数据为空\n        userInfoRepository.delete(userInfo);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-3ojfkxq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-3ojfkxq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个时候我们看一下运行结果。"
				}
			]
		},
		{
			"ID": "20210707235333-yz30kk4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-yz30kk4"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!"
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "img"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "./assets/CgqCHl9xthOAHALuAAFaT_9YXuM848.png"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-kaji64h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-kaji64h"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到，结果依然是两个 inser 和两个 delete，但是中间多了一个 update。我来解释一下，因为去掉了 CascadeType.REMOVE，这个时候不会进行级联删除了。当我们把 user 对象更新成空的时候，就会执行一条 update 语句把关联关系去掉了。"
				}
			]
		},
		{
			"ID": "20210707235333-cp4aorr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-cp4aorr"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而为什么又出现了级联删除 user 呢？因为我们修改了集合关联关系，orphanRemoval 设置为 true，所以又执行了级联删除的操作。这一点你可以仔细体会一下 orphanRemoval 和 CascadeType.REMOVE 的区别。"
				}
			]
		},
		{
			"ID": "20210707235333-shedosv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-shedosv"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "到这里，@OneToOne 关联关系介绍完了，接下来我们看一下日常工作常见的场景，先看场景一：主键和外键都是同一个字段的情况。"
				}
			]
		},
		{
			"ID": "20210707235333-vgtd5s5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-vgtd5s5"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "主键和外键都是同一个字段"
				}
			]
		},
		{
			"ID": "20210707235333-k1t8vm8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-k1t8vm8"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们假设 user 表是主表，user_info 的主键是 user_id，并且 user_id=user 表里面的 id，那我们应该怎么写？"
				}
			]
		},
		{
			"ID": "20210707235333-gnsjvd5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-gnsjvd5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "继续沿用上面的例子，User 实体不变，我们看看 UserInfo 变成什么样了。"
				}
			]
		},
		{
			"ID": "20210707235333-c2ndrx2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-c2ndrx2"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class UserInfo implements Serializable {\n   @Id\n   private Long userId;\n   private Integer ages;\n   private String telephone;\n   @MapsId\n   @OneToOne(cascade = {CascadeType.PERSIST},orphanRemoval = true)\n   private User user;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-k9s7r4u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-k9s7r4u"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里的做法很简单，我们直接把 userId 设置为主键，在 @OneToOne 上面添加 @MapsId 注解即可。"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "@MapsId 注解的作用是把关联关系实体里面的 ID（默认）值 copy 到 @MapsId 标注的字段上面"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "（这里指的是 user_id 字段）。"
				}
			]
		},
		{
			"ID": "20210707235333-9ri5pib",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-9ri5pib"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接着，上面的测试用例我们跑一下，看一下效果。"
				}
			]
		},
		{
			"ID": "20210707235333-bs1g10u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-bs1g10u"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "create table user (id bigint not null, address varchar(255), email varchar(255), name varchar(255), sex varchar(255), primary key (id))\ncreate table user_info (ages integer, telephone varchar(255), user_id bigint not null, primary key (user_id))\nalter table user_info add constraint FKn8pl63y4abe7n0ls6topbqjh2 foreign key (user_id) references user\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-07l3sld",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-07l3sld"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在启动的时候，我们直接创建了 user 表和 user_info 表，其中 user_info 的主键是 user_id，并且通过外键关联到了 user 表的 ID 字段，那么我们同时看一下 inser 的 sql，也发生了变化。"
				}
			]
		},
		{
			"ID": "20210707235333-mnh04hh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-mnh04hh"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "insert into user (address, email, name, sex, id) values (?, ?, ?, ?, ?)\ninsert into user_info (ages, telephone, user_id) values (?, ?, ?)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-dn0zk1h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-dn0zk1h"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面就是我们讲的实战场景一，主键和外键都是同一个字段。接下来我们再说一个场景，就是在查 user_info 的时候，我们只想知道 user_id 的值就行了，不需要查 user 的其他信息，具体我们应该怎么做呢？"
				}
			]
		},
		{
			"ID": "20210707235333-et8dw7l",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-et8dw7l"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "@OneToOne 延迟加载，我们只需要 ID 值"
				}
			]
		},
		{
			"ID": "20210707235333-8kevhk9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-8kevhk9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 @OneToOne 延迟加载的情况下，我们假设只想查下 user_id，而不想查看 user 表其他的信息，因为当前用不到，可以有以下几种做法。"
				}
			]
		},
		{
			"ID": "20210707235333-zrnz0lx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-zrnz0lx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第一种做法：还是 User 实体不变，我们改一下 UserInfo 对象，如下所示："
				}
			]
		},
		{
			"ID": "20210707235333-ay7fj05",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-ay7fj05"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@ToString(exclude = \"user\")\npublic class UserInfo{\n   @Id\n   @GeneratedValue(strategy= GenerationType.AUTO)\n   private Long id;\n   private Integer ages;\n   private String telephone;\n   @MapsId\n   @OneToOne(cascade = {CascadeType.PERSIST},orphanRemoval = true,fetch = FetchType.LAZY)\n   private User user;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-87q91e5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-87q91e5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从上面这段代码中，可以看到做的更改如下："
				}
			]
		},
		{
			"ID": "20210707235333-vfwymol",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707235333-vfwymol"
			},
			"Children": [
				{
					"ID": "20210707235333-ggi3oru",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-ggi3oru"
					},
					"Children": [
						{
							"ID": "20210707235333-d4y0jde",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-d4y0jde"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "id 字段我们先用原来的"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-xk5dn8o",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-xk5dn8o"
					},
					"Children": [
						{
							"ID": "20210707235333-nsyriaq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-nsyriaq"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@OneToOne 上面我们添加 @MapsId 注解"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-xfwyy1e",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-xfwyy1e"
					},
					"Children": [
						{
							"ID": "20210707235333-zlormj2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-zlormj2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@OneToOne 里面的 fetch = FetchType.LAZY 设置延迟加载（默认）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-196h6dx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-196h6dx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接着，我们改造一下测试类，完整代码如下："
				}
			]
		},
		{
			"ID": "20210707235333-dldtocs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-dldtocs"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class UserInfoRepositoryTest {\n    @Autowired\n    private UserInfoRepository userInfoRepository;\n    @BeforeAll\n    @Rollback(false)\n    @Transactional\n    void init() {\n        User user = User.builder().name(\"jackxx\").email(\"123456@126.com\").build();\n        UserInfo userInfo = UserInfo.builder().ages(12).user(user).telephone(\"12345678\").build();\n        userInfoRepository.saveAndFlush(userInfo);\n    }\n    /**\n     * 测试用User关联关系操作\n     *\n     * @throws JsonProcessingException\n     */\n    @Test\n    @Rollback(false)\n    public void testUserRelationships() throws JsonProcessingException {\n        UserInfo userInfo1 = userInfoRepository.getOne(1L);\n        System.out.println(userInfo1);\n        System.out.println(userInfo1.getUser().getId());\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-1xd0fzn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-1xd0fzn"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后，我们跑一下测试用例，看看测试结果。"
				}
			]
		},
		{
			"ID": "20210707235333-i75wdu9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-i75wdu9"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "insert into user (address, email, name, sex, id) values (?, ?, ?, ?, ?)\ninsert into user (address, email, name, sex, id) values (?, ?, ?, ?, ?)\n\n-- 两条inser照旧，而只有一个select\nselect userinfo0_.user_id as user_id3_6_0_, userinfo0_.ages as ages1_6_0_, userinfo0_.telephone as telephon2_6_0_ from user_info userinfo0_ where userinfo0_.user_id=?\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-7jb0rbm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-7jb0rbm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最后你会发现，打印的结果符合预期。"
				}
			]
		},
		{
			"ID": "20210707235333-p430ymk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-p430ymk"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "UserInfo(id=1, ages=12, telephone=12345678)\n1\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-w78sf7i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-w78sf7i"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "接下来介绍第二种做法，这种做法很简单，只要在 UserInfo 对象里面直接去掉 @OneToOne 关联关系，新增下面的字段即可。"
				}
			]
		},
		{
			"ID": "20210707235333-bk1xng0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-bk1xng0"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Column(name = \"user_id\")\nprivate Long userId;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-jl49fi3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-jl49fi3"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这就没有关联关系了"
				}
			]
		},
		{
			"ID": "20210707235333-66kj54m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-66kj54m"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第三做法是利用 Hibernate，它给我们提供了一种字节码增强技术，通过编译器改变 class 解决了延迟加载问题。这种方式有点复杂，需要在编译器引入 hibernateEnhance 的相关 jar 包，以及编译器需要改变 class 文件并添加 lazy 代理来解决延迟加载。我不太推荐这种方式，因为太复杂，你知道有这回事就行了。"
				}
			]
		},
		{
			"ID": "20210707235333-r5sj89e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-r5sj89e"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以上我们掌握了这么多用法，那么最佳实践是什么？双向关联更好还是单向关联更好？根据最近几年的应用，我总结出了一些最佳实践，我们来看一下。"
				}
			]
		},
		{
			"ID": "20210707235333-xxy40ai",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-xxy40ai"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "@OneToOne 的最佳实践"
				}
			]
		},
		{
			"ID": "20210707235333-arse1wx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-arse1wx"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "第一，我要说一种 Java 面向对象的设计原则：开闭原则。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-sppkbu5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-sppkbu5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "即对扩展开放，对修改关闭。"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "如果我们一直使用双向关联，两个实体的对象耦合太严重了"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。想象一下，随着业务的发展，User 对象可能是原始对象，"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "围绕着 User 可能会扩展出各种关联对象"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "难道 User 里面每次都要修改，去添加双向关联关系吗"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "？肯定不是，否则时间长了，对象与对象之间的关联关系就是一团乱麻。"
				}
			]
		},
		{
			"ID": "20210707235333-uh86vbx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-uh86vbx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "所以，我们"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "尽量、甚至不要用双向关联，如果非要用关联关系的话，只用单向关联就够了"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。双向关联正是 JPA 的强大之处，但同时也是问题最多，最被人诟病之处。所以我们要用它的优点，而不是学会了就一定要使用。"
				}
			]
		},
		{
			"ID": "20210707235333-0l5j04s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-0l5j04s"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "第二，我想说 CascadeType 很强大，但是我也建议保持默认。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-upve3f4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-upve3f4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "即没有级联更新动作，没有级联删除动作。还有 orphanRemoval 也要尽量保持默认 false，不做级联删除。因为这两个功能很强大，但是我个人觉得这违背了面向对象设计原则里面的“职责单一原则”，除非你非常非常熟悉，否则你在用的时候会时常感到惊讶——数据什么时间被更新了？数据被谁删除了？遇到这种问题查起来非常麻烦，因为是框架处理，有的时候并非预期的效果。"
				}
			]
		},
		{
			"ID": "20210707235333-h00eunx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-h00eunx"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一旦生产数据被莫名更新或者删除，那是一件非常糟糕的事情。因为这些级联操作会使你的方法名字没办法命名，而且它不是跟着业务逻辑变化的，而是跟着实体变化的，这就会使方法和对象的职责不单一。"
				}
			]
		},
		{
			"ID": "20210707235333-vahykh0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-vahykh0"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "第三，我想告诉你，所有用到关联关系的地方，能用 Lazy 的绝对不要用 EAGER，否则会有 SQL 性能问题，会出现不是预期的 SQL。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-si04283",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-si04283"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以上三点是我总结的避坑指南，有经验的同学这时候会有个疑问：外键约束不是不推荐使用的吗？如果我的外键字段名不是约定的怎么办？别着急，我们再看一下 @JoinColumn 注解和 @JoinColumns 注解。"
				}
			]
		},
		{
			"ID": "20210707235333-ho1wm79",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-ho1wm79"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "@JoinCloumns \u0026 JoinColumn"
				}
			]
		},
		{
			"ID": "20210707235333-rnlrlw6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-rnlrlw6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这两个注解是集合关系，他们可以同时使用，@JoinColumn 表示单字段，@JoinCloumns 表示多个 @JoinColumn，我们来一一看一下。"
				}
			]
		},
		{
			"ID": "20210707235333-crszyly",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-crszyly"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们还是先直接看一下 @JoinColumn 源码，了解下这一注解都有哪些配置项。"
				}
			]
		},
		{
			"ID": "20210707235333-0zt49hw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-0zt49hw"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public @interface JoinColumn {\n    //关键的字段名,默认注解上的字段名，在@OneToOne代表本表的外键字段名字；\n    String name() default \"\";\n    //与name相反关联对象的字段，默认主键字段\n    String referencedColumnName() default \"\";\n    //外键字段是否唯一\n    boolean unique() default false;\n    //外键字段是否允许为空\n    boolean nullable() default true;\n    //是否跟随一起新增\n    boolean insertable() default true;\n    //是否跟随一起更新\n    boolean updatable() default true;\n    //JPA2.1新增，外键策略\n    ForeignKey foreignKey() default @ForeignKey(PROVIDER_DEFAULT);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-h6savz1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-h6savz1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其次，我们看一下 @ForeignKey(PROVIDER_DEFAULT) 里面枚举值有几个。"
				}
			]
		},
		{
			"ID": "20210707235333-72z41dm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-72z41dm"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public enum ConstraintMode {\n    //创建外键约束\n   CONSTRAINT,\n    //不创建外键约束\n   NO_CONSTRAINT,\n   //采用默认行为\n   PROVIDER_DEFAULT\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-eaj3hpb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-eaj3hpb"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后，我们看看这个注解的语法，就可以解答我们上面的两个问题。修改一下 UserInfo，如下所示："
				}
			]
		},
		{
			"ID": "20210707235333-ljl44og",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-ljl44og"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class UserInfo{\n    @Id\n    @GeneratedValue(strategy= GenerationType.AUTO)\n    private Long id;\n    private Integer ages;\n    private String telephone;\n    @OneToOne(cascade = {CascadeType.PERSIST},orphanRemoval = true,fetch = FetchType.LAZY)\n    @JoinColumn(foreignKey = @ForeignKey(ConstraintMode.NO_CONSTRAINT),name = \"my_user_id\")\n    private User user;\n    //...其他不变\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-cblw2zm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-cblw2zm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到，我们在其中指定了字段的名字：my_user_id，并且指定 NO_CONSTRAINT 不生成外键。而测试用例不变，我们看下运行结果。"
				}
			]
		},
		{
			"ID": "20210707235333-c3nwvvc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-c3nwvvc"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "create table user (id bigint not null, address varchar(255), email varchar(255), name varchar(255), sex varchar(255), primary key (id))\ncreate table user_info (id bigint not null, ages integer, telephone varchar(255), my_user_id bigint, primary key (id))\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-djo3un6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-djo3un6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这时我们看到 user_info 表里面新增了一个字段 my_user_id，insert 的时候也能正确 inser my_user_id 的值等于 user.id。"
				}
			]
		},
		{
			"ID": "20210707235333-lwc7lmf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-lwc7lmf"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "insert into user_info (ages, telephone, my_user_id, id) values (?, ?, ?, ?)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-hepsij4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-hepsij4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而 @JoinColumns 是 JoinColumns 的复数形式，就是通过两个字段进行的外键关联，这个不常用，我们看一个 demo 了解一下就好。"
				}
			]
		},
		{
			"ID": "20210707235333-5olatrl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-5olatrl"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Entity\npublic class CompanyOffice {\n   @ManyToOne(fetch = FetchType.LAZY)\n   @JoinColumns({\n         @JoinColumn(name=\"ADDR_ID\", referencedColumnName=\"ID\"),\n         @JoinColumn(name=\"ADDR_ZIP\", referencedColumnName=\"ZIP\")\n   })\n   private Address address;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-grpidiz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-grpidiz"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面的实例中，CompanyOffice 通过 ADDR_ID 和 ADDR_ZIP 两个字段对应一条 address 信息，解释了一下@JoinColumns 的用法。"
				}
			]
		},
		{
			"ID": "20210707235333-ghm8qtc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-ghm8qtc"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果你了解了 @OneToOne 的详细用法，后面要讲的几个注解就很好理解了，因为他们有点类似，那么我们接下来看看 @ManyToOne 和 @OneToMany 的用法。"
				}
			]
		},
		{
			"ID": "20210707235333-vlakcbk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707235333-vlakcbk"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "一对多"
				}
			]
		},
		{
			"ID": "20210707235333-t23scoc",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-t23scoc"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "JPA 协议 🔥"
				}
			]
		},
		{
			"ID": "20210707235333-lj2w25b",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707235333-lj2w25b"
			},
			"Children": [
				{
					"ID": "20210707235333-7kfcxbm",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-7kfcxbm"
					},
					"Children": [
						{
							"ID": "20210707235333-zyrjhsy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-zyrjhsy"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "维护关联关系的是拥有外键的一方，而另一方必须配置 "
										},
										{
											"Type": "NodeCodeSpan",
											"CodeMarkerLen": 1,
											"Children": [
												{
													"Type": "NodeCodeSpanOpenMarker",
													"Data": "`"
												},
												{
													"Type": "NodeCodeSpanContent",
													"Data": "mappedBy"
												},
												{
													"Type": "NodeCodeSpanCloseMarker",
													"Data": "`"
												}
											]
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-w9amfeg",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-w9amfeg"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "案例介绍"
				}
			]
		},
		{
			"ID": "20210707235333-wvw32iv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-wvw32iv"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "客户和联系人的案例（注意，客户和联系人是属于同一公司的）"
				}
			]
		},
		{
			"ID": "20210707235333-omt5mvu",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707235333-omt5mvu"
			},
			"Children": [
				{
					"ID": "20210707235333-miopx4u",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-miopx4u"
					},
					"Children": [
						{
							"ID": "20210707235333-71ef52s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-71ef52s"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "客户：买了商品的一家公司"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-lfvagcf",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-lfvagcf"
					},
					"Children": [
						{
							"ID": "20210707235333-eenzd05",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-eenzd05"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "联系人：买了商品的这家公司的员工（可有多个）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-ubc7q7c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-ubc7q7c"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一对多关系，一个客户可以具有多个联系人，一个联系人从属于一家公司"
				}
			]
		},
		{
			"ID": "20210707235333-1q0j18n",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-1q0j18n"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "分析步骤"
				}
			]
		},
		{
			"ID": "20210707235333-sdsz92p",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 3,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210707235333-sdsz92p"
			},
			"Children": [
				{
					"ID": "20210707235333-vmy6se8",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210707235333-vmy6se8"
					},
					"Children": [
						{
							"ID": "20210707235333-mxr66m6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-mxr66m6"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "明确表关系：一对多关系"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-9a2dzd9",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210707235333-9a2dzd9"
					},
					"Children": [
						{
							"ID": "20210707235333-6645i6s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-6645i6s"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "确定表关系（外键）"
								}
							]
						},
						{
							"ID": "20210707235333-n05n7yx",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707235333-n05n7yx"
							},
							"Children": [
								{
									"ID": "20210707235333-hz1a70g",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-hz1a70g"
									},
									"Children": [
										{
											"ID": "20210707235333-2aqn486",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-2aqn486"
											},
											"Children": [
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "主表"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "：客户表"
												}
											]
										}
									]
								},
								{
									"ID": "20210707235333-6p8k68h",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-6p8k68h"
									},
									"Children": [
										{
											"ID": "20210707235333-qn3l0t3",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-qn3l0t3"
											},
											"Children": [
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "从表"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "：联系人表，在从表添加"
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "外键"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-5a333lv",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20210707235333-5a333lv"
					},
					"Children": [
						{
							"ID": "20210707235333-zd27poz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-zd27poz"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "编写实体类，再实体类中描述表关系（"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "组合"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "）"
								}
							]
						},
						{
							"ID": "20210707235333-v25mdjz",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707235333-v25mdjz"
							},
							"Children": [
								{
									"ID": "20210707235333-z5kwukc",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-z5kwukc"
									},
									"Children": [
										{
											"ID": "20210707235333-zf2n2kd",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-zf2n2kd"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "客户：再客户的实体类中包含一个联系人的集合"
												}
											]
										}
									]
								},
								{
									"ID": "20210707235333-03ksokk",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-03ksokk"
									},
									"Children": [
										{
											"ID": "20210707235333-o1il36k",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-o1il36k"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "联系人：在联系人的实体类中包含一个客户的对象"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-4adgwjh",
					"Type": "NodeListItem",
					"Data": "4",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 4,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "NA==",
						"Num": 4
					},
					"Properties": {
						"id": "20210707235333-4adgwjh"
					},
					"Children": [
						{
							"ID": "20210707235333-k41hsx1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-k41hsx1"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "配置映射关系"
								}
							]
						},
						{
							"ID": "20210707235333-lijm3ih",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707235333-lijm3ih"
							},
							"Children": [
								{
									"ID": "20210707235333-mjbz1m7",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-mjbz1m7"
									},
									"Children": [
										{
											"ID": "20210707235333-2lgkhvx",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-2lgkhvx"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "使用 "
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "JPA 注解配置一对多映射关系"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-voisxre",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-voisxre"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "@OneToMany \u0026 @ManyToOne"
				}
			]
		},
		{
			"ID": "20210707235333-4te11pn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-4te11pn"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@ManyToOne 代表多对一的关联关系，而 @OneToMany 代表一对多，一般两个成对使用表示双向关联关系。而 JPA 协议中也是明确规定："
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "维护关联关系的是拥有外键的一方（从表），而另一方（主表）必须配置 mappedBy"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。体会不到看下面的实战及问题分析即可明了。"
				}
			]
		},
		{
			"ID": "20210707235333-yxdx7ra",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-yxdx7ra"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "看下面的源码。"
				}
			]
		},
		{
			"ID": "20210707235333-qs2yb36",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-qs2yb36"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public @interface ManyToOne {\n\n    Class targetEntity() default void.class;\n\n    CascadeType[] cascade() default {};\n\n    FetchType fetch() default EAGER;\n\n    boolean optional() default true;\n\n}\n\n public @interface OneToMany {\n\n    Class targetEntity() default void.class;\n\n \t//cascade 级联操作策略：(CascadeType.PERSIST、CascadeType.REMOVE、CascadeType.REFRESH、CascadeType.MERGE、CascadeType.ALL) 如果不填，默认关系表不会产生任何影响。\n    CascadeType[] cascade() default {};\n\n\t//数据获取方式EAGER(立即加载)/LAZY(延迟加载)\n    FetchType fetch() default LAZY;\n\n    //关系被谁维护，单项的。注意：只有关系维护方才能操作两者的关系。\n    String mappedBy() default \"\";\n\n\t//是否级联删除。和CascadeType.REMOVE的效果一样。两种配置了一个就会自动级联删除\n    boolean orphanRemoval() default false;\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-18puwon",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-18puwon"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们看到上面的字段和 @OneToOne 里面的基本一样，用法是一样的，不过需要注意以下几点："
				}
			]
		},
		{
			"ID": "20210707235333-njwx58q",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Tight": true,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 3,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210707235333-njwx58q"
			},
			"Children": [
				{
					"ID": "20210707235333-4mj1l87",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210707235333-4mj1l87"
					},
					"Children": [
						{
							"ID": "20210707235333-gz0lm7o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-gz0lm7o"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@ManyToOne 一定是维护外键关系的一方，所以没有 mappedBy 字段；"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-2gp0tj1",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210707235333-2gp0tj1"
					},
					"Children": [
						{
							"ID": "20210707235333-xv0v41t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-xv0v41t"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@ManyToOne 删除的时候一定不能把 One 的一方删除了，所以也没有 orphanRemoval 的选项；"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-u72fq9e",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20210707235333-u72fq9e"
					},
					"Children": [
						{
							"ID": "20210707235333-bnif65k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-bnif65k"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@ManyToOne 的 Lazy 效果和 @OneToOne 的一样，所以和上面的用法基本一致；"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-chdj6rv",
					"Type": "NodeListItem",
					"Data": "4",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 4,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "NA==",
						"Num": 4
					},
					"Properties": {
						"id": "20210707235333-chdj6rv"
					},
					"Children": [
						{
							"ID": "20210707235333-ch9fs9k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-ch9fs9k"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@OneToMany 的 Lazy 是有效果的。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-3ldrwo8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-3ldrwo8"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "实战：保存"
				}
			]
		},
		{
			"ID": "20210707235333-by6fr93",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-by6fr93"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实体类如下，目前配置了"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "双向关联"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "（@OneToMany、@ManyToOne），"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "且主从表都可以维护外键（不推荐）"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-nljktr3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-nljktr3"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Entity\npublic class Customer {\n\n\n    /* 客户编号（主键）*/\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long Id;\n\n    /* 客户名称（公司名称） */\n    private String name;\n\n    /* 客户信息来源 */\n    private String source;\n\n    /* 客户所属行业 */\n    private String industry;\n\n    /* 客户级别 */\n    private String level;\n\n    /* 客户联系地址 */\n    private String address;\n\n    /* 客户联系电话 */\n    private String phone;\n\n\n    // 不推荐的配置，主表没有放弃维护外键\n    @OneToMany\n    @JoinColumn(name = \"custId\")\n    private Set\u003cLinkMan\u003e linkManSet;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-43k7fjy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-43k7fjy"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Entity\npublic class LinkMan {\n\n    /* 联系人编号(主键) */\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    /* 联系人姓名 */\n    private String name;\n\n    /* 联系人性别 */\n    private String gender;\n\n    /* 联系人办公电话 */\n    private String phone;\n\n    /* 联系人手机 */\n    private String mobile;\n\n    /* 联系人邮箱 */\n    private String email;\n\n    /* 联系人职位 */\n    private String position;\n\n    /* 联系人备注 */\n    private String remark;\n\n\n    @ManyToOne\n    @JoinColumn(name = \"cust_id\")\n    private Customer customer;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-7neerkp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-7neerkp"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "测试"
				}
			]
		},
		{
			"ID": "20210707235333-6f9vw3y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-6f9vw3y"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n// DataJpaTest、MybatisTest 会默认使用其测试数据源替代，若要使用自己配置的，需要添加如下注解\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\npublic class One2ManyTest {\n\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Autowired\n    private LinkManRepository linkManRepository;\n\n\n    /**\n     * 主表放弃维护外键后该方法无法添加外键值\n     */\n    @Test\n    @Rollback(false)\n    @Transactional\n    void testSave() {\n        Customer customer = Customer.builder().name(\"腾讯\").linkManSet(new HashSet\u003c\u003e()).build();\n\n        LinkMan linkMan = LinkMan.builder().name(\"小马\").build();\n\n        // 双向关联，主表维护外键\n        customer.getLinkManSet().add(linkMan);\n\n        customerRepository.save(customer);\n        linkManRepository.save(linkMan);\n        // 保存外键时没有直接 insert 而是2条 insert 后执行了 update！\n\n    }\n\n    /**\n     * 推荐使用的方式\n     */\n    @Test\n    @Rollback(false)\n    @Transactional\n    void testSave2() {\n        Customer customer = Customer.builder().name(\"腾讯\").build();\n\n        LinkMan linkMan = LinkMan.builder()\n                .name(\"小马\")\n                .customer(customer)// 双向关联，从表维护外键\n                .build();\n\n        customerRepository.save(customer);\n        linkManRepository.save(linkMan);\n        // 保存外键时只用了2条 update！\n\n    }\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-g8yfk7q",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-g8yfk7q"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "问题分析"
				}
			]
		},
		{
			"ID": "20210707235333-rod3aqa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-rod3aqa"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "testSave 自动生成的 sql："
				}
			]
		},
		{
			"ID": "20210707235333-y2ewtr8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-y2ewtr8"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE TABLE customer (\n\tid BIGINT NOT NULL auto_increment,\n\taddress VARCHAR ( 255 ),\n\tindustry VARCHAR ( 255 ),\n\tLEVEL VARCHAR ( 255 ),\n\tNAME VARCHAR ( 255 ),\n\tphone VARCHAR ( 255 ),\nsource VARCHAR ( 255 ),\nPRIMARY KEY ( id )) ENGINE = INNODB;\n\nCREATE TABLE link_man (\n\tid BIGINT NOT NULL auto_increment,\n\temail VARCHAR ( 255 ),\n\tgender VARCHAR ( 255 ),\n\tmobile VARCHAR ( 255 ),\n\tNAME VARCHAR ( 255 ),\n\tphone VARCHAR ( 255 ),\n\tposition VARCHAR ( 255 ),\n\tremark VARCHAR ( 255 ),\ncust_id BIGINT,\nPRIMARY KEY ( id )) ENGINE = INNODB;\n\n-- 外键约束\nalter table link_man add constraint FKd378jah5xd7bsqjolfsop35i foreign key (cust_id) references customer (id)\n\n-- 保存\ninsert into customer (address, industry, level, name, phone, source) values (?, ?, ?, ?, ?, ?)\ninsert into link_man (cust_id, email, gender, mobile, name, phone, position, remark) values (?, ?, ?, ?, ?, ?, ?, ?)\nupdate link_man set cust_id=? where id=?\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-0vxde3e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-0vxde3e"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可见，"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "目前生成的建表语句竟然有 3 条"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，本应该只有 2 条！并且保存外键时"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "没有直接 insert 而是 2 条 insert 后执行了 update"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "！"
				}
			]
		},
		{
			"ID": "20210707235333-plmf6z0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-plmf6z0"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此该方式"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "不可取"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "（实际生产中建表可以不用管，但是对于保存操作就不应该用这么多条语句完成！）"
				}
			]
		},
		{
			"ID": "20210707235333-lr3bi97",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-lr3bi97"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "testSave2 自动生成的 sql："
				}
			]
		},
		{
			"ID": "20210707235333-3g600oe",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-3g600oe"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "CREATE TABLE customer (\n\tid BIGINT NOT NULL auto_increment,\n\taddress VARCHAR ( 255 ),\n\tindustry VARCHAR ( 255 ),\n\tLEVEL VARCHAR ( 255 ),\n\tNAME VARCHAR ( 255 ),\n\tphone VARCHAR ( 255 ),\nsource VARCHAR ( 255 ),\nPRIMARY KEY ( id )) ENGINE = INNODB;\n\nCREATE TABLE link_man (\n\tid BIGINT NOT NULL auto_increment,\n\temail VARCHAR ( 255 ),\n\tgender VARCHAR ( 255 ),\n\tmobile VARCHAR ( 255 ),\n\tNAME VARCHAR ( 255 ),\n\tphone VARCHAR ( 255 ),\n\tposition VARCHAR ( 255 ),\n\tremark VARCHAR ( 255 ),\ncust_id BIGINT,\nPRIMARY KEY ( id )) ENGINE = INNODB;\n\n-- 外键约束\nalter table link_man add constraint FKd378jah5xd7bsqjolfsop35i foreign key (cust_id) references customer (id)\n\n-- 保存\ninsert into customer (address, industry, level, name, phone, source) values (?, ?, ?, ?, ?, ?)\ninsert into link_man (cust_id, email, gender, mobile, name, phone, position, remark) values (?, ?, ?, ?, ?, ?, ?, ?)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-1igeo40",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-1igeo40"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可见，"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "目前生成的建表语句竟然有 3 条"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，本应该只有 2 条！但是保存外键时"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "只用了 2 条 update"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "！所以推荐！"
				}
			]
		},
		{
			"ID": "20210707235333-j1mqu1u",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-j1mqu1u"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "改进：主表放弃外键维护"
				}
			]
		},
		{
			"ID": "20210707235333-q7pkiyz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-q7pkiyz"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Entity\npublic class Customer {\n\n\n    /* 客户编号（主键）*/\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long Id;\n\n    /* 客户名称（公司名称） */\n    private String name;\n\n    /* 客户信息来源 */\n    private String source;\n\n    /* 客户所属行业 */\n    private String industry;\n\n    /* 客户级别 */\n    private String level;\n\n    /* 客户联系地址 */\n    private String address;\n\n    /* 客户联系电话 */\n    private String phone;\n\n\n\n    // 主表应该放弃对外键的维护\n    // @OneToMany\n    // @JoinColumn(name = \"custId\")\n    // private Set\u003cLinkMan\u003e linkManSet;\n\n    @OneToMany(mappedBy = \"customer\")\n    private Set\u003cLinkMan\u003e linkManSet;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-nv582a4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-nv582a4"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其余不变，但是注意测试方法只有 testSave2 可以添加外键值了！因为只有从表才能维护外键了"
				}
			]
		},
		{
			"ID": "20210707235333-zk4a9qy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-zk4a9qy"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "实战：级联 ☠️"
				}
			]
		},
		{
			"ID": "20210707235333-pqiohdg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-pqiohdg"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "删除从表"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "数据：可以随时任意删除"
				}
			]
		},
		{
			"ID": "20210707235333-6rac0ma",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-6rac0ma"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "删除主表"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "数据："
				}
			]
		},
		{
			"ID": "20210707235333-yw9o46f",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707235333-yw9o46f"
			},
			"Children": [
				{
					"ID": "20210707235333-l79kw17",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-l79kw17"
					},
					"Children": [
						{
							"ID": "20210707235333-7uk2sox",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-7uk2sox"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "没有从表数据引用：随便删"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-g028jd4",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-g028jd4"
					},
					"Children": [
						{
							"ID": "20210707235333-tj6jzbd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-tj6jzbd"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "有从表数据："
								}
							]
						},
						{
							"ID": "20210707235333-9lqk1l9",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707235333-9lqk1l9"
							},
							"Children": [
								{
									"ID": "20210707235333-gt54oep",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-gt54oep"
									},
									"Children": [
										{
											"ID": "20210707235333-qjvuta4",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-qjvuta4"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "在默认情况下，它会把外键字段置为 null，然后删除主表数据。如果在数据库的表结构上，外键字段有非空约束，默认情况就会报错了"
												}
											]
										}
									]
								},
								{
									"ID": "20210707235333-uvjam2j",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-uvjam2j"
									},
									"Children": [
										{
											"ID": "20210707235333-y04ucjw",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-y04ucjw"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果配置了放弃维护关联关系的权利，则不能删除（与外键字段是否允许为 null，没有关系）因为在删除时，它根本不会去更新从表的外键字段了"
												}
											]
										}
									]
								},
								{
									"ID": "20210707235333-um3s6qj",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-um3s6qj"
									},
									"Children": [
										{
											"ID": "20210707235333-buwbled",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-buwbled"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果还想删除，使用级联删除引用。在实际开发中，级联删除请慎用！(在一对多的情况下)"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-38h276l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-38h276l"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "级联"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "：操作一个对象的同时操作他的关联对象"
				}
			]
		},
		{
			"ID": "20210707235333-qv71qvf",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707235333-qv71qvf"
			},
			"Children": [
				{
					"ID": "20210707235333-rvpt59k",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-rvpt59k"
					},
					"Children": [
						{
							"ID": "20210707235333-etpv1pa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-etpv1pa"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "级联操作： 1.需要"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "区分操作主体"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 2.需要在操作主体的实体类上（主表或维护表），添加级联属性"
								},
								{
									"Type": "NodeCodeSpan",
									"CodeMarkerLen": 1,
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker",
											"Data": "`"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "cascade"
										},
										{
											"Type": "NodeCodeSpanCloseMarker",
											"Data": "`"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "（需要添加到多表映射关系的注解上）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-cwdsuci",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-cwdsuci"
					},
					"Children": [
						{
							"ID": "20210707235333-0jflxaa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-0jflxaa"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "级联添加，案例：当我保存一个客户的同时保存联系人（在代码中只需保存客户！）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-vuq6uig",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-vuq6uig"
					},
					"Children": [
						{
							"ID": "20210707235333-xufyux2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-xufyux2"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "级联删除，案例：当我删除一个客户的同时删除此客户的所有联系人，有中间表会先删除中间表（在代码中只需删除客户！）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-wa02f7x",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-wa02f7x"
					},
					"Children": [
						{
							"ID": "20210707235333-1188anm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-1188anm"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "级联更新，略"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-mdig7bd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-mdig7bd"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "默认是不进行级联操作"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，需要在"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "操作主表配置（一般配置在主表，虽然从表也可以配置）"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "如下注解："
				}
			]
		},
		{
			"ID": "20210707235333-u3gr8tq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-u3gr8tq"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Entity\npublic class Customer {\n\n\n    /* 客户编号（主键）*/\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long Id;\n\n    /* 客户名称（公司名称） */\n    private String name;\n\n    /* 客户信息来源 */\n    private String source;\n\n    /* 客户所属行业 */\n    private String industry;\n\n    /* 客户级别 */\n    private String level;\n\n    /* 客户联系地址 */\n    private String address;\n\n    /* 客户联系电话 */\n    private String phone;\n\n    // 可以单独配置级联保存、删除，还可以配置更新等操作，也可以直接配置全部\n    @OneToMany(mappedBy = \"customer\", cascade =CascadeType.ALL)\n    private Set\u003cLinkMan\u003e linkManSet;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-ooq8s6d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-ooq8s6d"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "测试"
				}
			]
		},
		{
			"ID": "20210707235333-np89don",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-np89don"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n// DataJpaTest、MybatisTest 会默认使用其测试数据源替代，若要使用自己配置的，需要添加如下注解\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\npublic class One2ManyTest {\n\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Autowired\n    private LinkManRepository linkManRepository;\n\n    /**\n     * 级联添加，保存一个客户的同时保存联系人\n     */\n    @Test\n    @Rollback(false)\n    @Transactional\n    void testCascadeSave() {\n        Customer customer = Customer.builder().name(\"腾讯\").linkManSet(new HashSet\u003c\u003e()).build();\n\n        LinkMan linkMan = LinkMan.builder()\n                .name(\"小马\")\n                .customer(customer)// 双向关联，从表维护外键（这个是维护外键的，和级联没有关系！！！）\n                .build();\n\n        customer.getLinkManSet().add(linkMan);\n\n        customerRepository.save(customer);\n    }\n\n    /**\n     * 级联删除，删除一个客户的同时删除此客户的所有联系人。执行删除前记得把 ddl-auto 改为 update\n     */\n    @Test\n    @Rollback(false)\n    @Transactional\n    void testCascadeRemove() {\n        customerRepository.deleteById(1L);\n    }\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-jabc6md",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-jabc6md"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "级联保存的 sql"
				}
			]
		},
		{
			"ID": "20210707235333-oy1i5ch",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-oy1i5ch"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Hibernate: insert into customer (address, industry, level, name, phone, source) values (?, ?, ?, ?, ?, ?)\nHibernate: insert into link_man (cust_id, email, gender, mobile, name, phone, position, remark) values (?, ?, ?, ?, ?, ?, ?, ?)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-2b2ilve",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-2b2ilve"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "级联删除的 sql"
				}
			]
		},
		{
			"ID": "20210707235333-u8l3tgg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-u8l3tgg"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Hibernate: select customer0_.id as id1_1_0_, customer0_.address as address2_1_0_, customer0_.industry as industry3_1_0_, customer0_.level as level4_1_0_, customer0_.name as name5_1_0_, customer0_.phone as phone6_1_0_, customer0_.source as source7_1_0_ from customer customer0_ where customer0_.id=?\nHibernate: select linkmanset0_.cust_id as cust_id9_2_0_, linkmanset0_.id as id1_2_0_, linkmanset0_.id as id1_2_1_, linkmanset0_.cust_id as cust_id9_2_1_, linkmanset0_.email as email2_2_1_, linkmanset0_.gender as gender3_2_1_, linkmanset0_.mobile as mobile4_2_1_, linkmanset0_.name as name5_2_1_, linkmanset0_.phone as phone6_2_1_, linkmanset0_.position as position7_2_1_, linkmanset0_.remark as remark8_2_1_ from link_man linkmanset0_ where linkmanset0_.cust_id=?\nHibernate: delete from link_man where id=?\nHibernate: delete from customer where id=?\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-lmka1ov",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-lmka1ov"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "最佳实践 🔥"
				}
			]
		},
		{
			"ID": "20210707235333-tdcar3z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-tdcar3z"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "配置并使用多的一方维护关联关系（外键），保存时直接对外键赋值；配置并使用一的一方维护关联关系，还会执行 1 条 update 语句（多余！）。所以 JPA 协议有规定："
				}
			]
		},
		{
			"ID": "20210707235333-xxmu8vz",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707235333-xxmu8vz"
			},
			"Children": [
				{
					"ID": "20210707235333-1hbwpp9",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-1hbwpp9"
					},
					"Children": [
						{
							"ID": "20210707235333-y93q35f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-y93q35f"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "若配置"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "单向"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "关联，关联关系的维护直接"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "配置在拥有外键的一方（从表）"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "即可。拉勾课程推荐使用单向关联，不推荐双向关联，主表查询时使用 sql 查询。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-oj6nyhd",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-oj6nyhd"
					},
					"Children": [
						{
							"ID": "20210707235333-rb65d90",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-rb65d90"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "若配置"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "双向"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "关联，"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "维护关联关系的是拥有外键的一方（从表）"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，而"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "另一方（主表）必须配置 mappedBy 放弃外键维护"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "；"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-lbeot9j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-lbeot9j"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "尽量避免双向关联，即只用一个注解@ManyToOne"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。"
				},
				{
					"Type": "NodeLink",
					"Children": [
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "JPA 中的 OneToMany 和 ManyToOne 的最佳实践"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "http://www.wangzhenhua.rocks/zh-hans/java/jpa-one-to-many-many-to-one-best-practice"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-cczaq2b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-cczaq2b"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一切级联更新和 orphanRemoval 都保持默认规则，并且 fetch 采用 lazy 延迟加载（也是默认规则）。"
				}
			]
		},
		{
			"ID": "20210707235333-389pkry",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-389pkry"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意："
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "放弃外键维护和级联操作没有半点关系"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-kjb40uf",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707235333-kjb40uf"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "多对多"
				}
			]
		},
		{
			"ID": "20210707235333-c72s9vp",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-c72s9vp"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "案例介绍"
				}
			]
		},
		{
			"ID": "20210707235333-z5986al",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-z5986al"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "用户和角色（多对多关系），不用多逼逼了，就是 RBAC 模型"
				}
			]
		},
		{
			"ID": "20210707235333-egdxr5b",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-egdxr5b"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "分析步骤"
				}
			]
		},
		{
			"ID": "20210707235333-jb5rl02",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 3,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20210707235333-jb5rl02"
			},
			"Children": [
				{
					"ID": "20210707235333-234hrqj",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20210707235333-234hrqj"
					},
					"Children": [
						{
							"ID": "20210707235333-05selp8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-05selp8"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "明确表关系：一对多关系"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-w3z1d15",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20210707235333-w3z1d15"
					},
					"Children": [
						{
							"ID": "20210707235333-gxdkjzt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-gxdkjzt"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "确定表关系（中间表）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-w1ckb4b",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20210707235333-w1ckb4b"
					},
					"Children": [
						{
							"ID": "20210707235333-x9c9xsy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-x9c9xsy"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "编写实体类，再实体类中描述表关系（"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "组合"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "）"
								}
							]
						},
						{
							"ID": "20210707235333-qinsnz2",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707235333-qinsnz2"
							},
							"Children": [
								{
									"ID": "20210707235333-tlib9lq",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-tlib9lq"
									},
									"Children": [
										{
											"ID": "20210707235333-skj120m",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-skj120m"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "用户：包含角色的集合"
												}
											]
										}
									]
								},
								{
									"ID": "20210707235333-tznygfb",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-tznygfb"
									},
									"Children": [
										{
											"ID": "20210707235333-y72p4jn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-y72p4jn"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "角色：包含用户的集合"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-6atzcmz",
					"Type": "NodeListItem",
					"Data": "4",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 4,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "NA==",
						"Num": 4
					},
					"Properties": {
						"id": "20210707235333-6atzcmz"
					},
					"Children": [
						{
							"ID": "20210707235333-b0vvrth",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-b0vvrth"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "配置映射关系"
								}
							]
						},
						{
							"ID": "20210707235333-n99pvwe",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 45,
								"Padding": 2,
								"Marker": "LQ==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707235333-n99pvwe"
							},
							"Children": [
								{
									"ID": "20210707235333-5qwgk6w",
									"Type": "NodeListItem",
									"Data": "-",
									"ListData": {
										"Tight": true,
										"BulletChar": 45,
										"Padding": 2,
										"Marker": "LQ==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707235333-5qwgk6w"
									},
									"Children": [
										{
											"ID": "20210707235333-sz6x3t6",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707235333-sz6x3t6"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "使用 "
												},
												{
													"Type": "NodeStrong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "JPA 注解配置一对多映射关系"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-hsnt7t8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-hsnt7t8"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "@ManyToMany 实战 🔥"
				}
			]
		},
		{
			"ID": "20210707235333-hq32swz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-hq32swz"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@ManyToMany 代表多对多的关联关系，这种关联关系"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "任何一方都可以维护关联关系"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-9r84xaa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-9r84xaa"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实际开发者对 @ManyToMany "
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "用得比较少"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，一般我们会"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "用成对的 @ManyToOne 和 @OneToMany 代替"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，因为我们的中间表可能还有一些约定的公共字段，如 ID、update_time、create_time 等其他字段，当然"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "要是没有这些字段，可以使用"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " @ManyToMany"
				}
			]
		},
		{
			"ID": "20210707235333-djqyqjb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-djqyqjb"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Entity\npublic class SysUser {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long userId;\n    private String userName;\n    private Integer age;\n\n\n    @ManyToMany\n    @JoinTable(name = \"sys_user_role\",\n            joinColumns = @JoinColumn(name = \"user_id\"),\n            inverseJoinColumns = @JoinColumn(name = \"role_id\"))\n    private Set\u003cSysRole\u003e roles;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-19k5t4w",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-19k5t4w"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Entity\npublic class SysRole {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long roleId;\n    private String roleName;\n\n    // 放弃中间表维护权\n    @ManyToMany(mappedBy = \"roles\")\n    private Set\u003cSysUser\u003e users;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-umktx54",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-umktx54"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface SysUserRepository extends JpaRepository\u003cSysUser,Long\u003e, JpaSpecificationExecutor\u003cSysUser\u003e {\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-9vmkqzt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-9vmkqzt"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface SysRoleRepository extends JpaRepository\u003cSysRole,Long\u003e, JpaSpecificationExecutor\u003cSysRole\u003e {\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-57ud0zu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-57ud0zu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "测试"
				}
			]
		},
		{
			"ID": "20210707235333-ddsizds",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-ddsizds"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n// DataJpaTest、MybatisTest 会默认使用其测试数据源替代，若要使用自己配置的，需要添加如下注解\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\npublic class Many2ManyTest {\n\n    @Autowired\n    private SysUserRepository sysUserRepository;\n\n    @Autowired\n    private SysRoleRepository sysRoleRepository;\n\n\n    /**\n     * 保存一个用户、一个角色\n     */\n    @Test\n    @Rollback(false)\n    @Transactional\n    void testSave() {\n\n        SysUser sysUser = SysUser.builder().userName(\"conanan\").roles(new HashSet\u003c\u003e()).build();\n\n        SysRole sysRole = SysRole.builder().roleName(\"架构师\").users(new HashSet\u003c\u003e()).build();\n\n        // 配置用户到角色的关系，可以对中间表进行维护\n        sysUser.getRoles().add(sysRole);\n        // 配置角色到用户的关系，可以对中间表进行维护\n        // sysRole.getUsers().add(sysUser);\n        // 但是不能同时维护，因为联合主键不能重复！\n        // 报错 Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '1-1' for key 'sys_user_role.PRIMARY'\n        // 放弃被选择一方（如角色）的中间表维护权即可！\n\n        sysUserRepository.save(sysUser);\n        sysRoleRepository.save(sysRole);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-vrarq55",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-vrarq55"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "生成的 sql："
				}
			]
		},
		{
			"ID": "20210707235333-ifqnzk1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-ifqnzk1"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "create table sys_user_role (user_id bigint not null, role_id bigint not null, primary key (user_id, role_id)) engine=InnoDB\ncreate table sys_role (role_id bigint not null auto_increment, role_name varchar(255), primary key (role_id)) engine=InnoDB\ncreate table sys_user (user_id bigint not null auto_increment, age integer, user_name varchar(255), primary key (user_id)) engine=InnoDB\n\nalter table sys_user_role add constraint FKhh52n8vd4ny9ff4x9fb8v65qx foreign key (role_id) references sys_role (role_id)\nalter table sys_user_role add constraint FKb40xxfch70f5qnyfw8yme1n1s foreign key (user_id) references sys_user (user_id)\n\n-- 保存\ninsert into sys_user (age, user_name) values (?, ?)\ninsert into sys_role (role_name) values (?)\ninsert into sys_user_role (user_id, role_id) values (?, ?)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-vvpwkx1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-vvpwkx1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可见，"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "目前生成的建表语句竟然有 5 条"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，本应该只有 3 条！"
				}
			]
		},
		{
			"ID": "20210707235333-w12ilgy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-w12ilgy"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "@ManyToMany 实战：级联 ☠️"
				}
			]
		},
		{
			"ID": "20210707235333-p1jx978",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-p1jx978"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "配置同一对多"
				}
			]
		},
		{
			"ID": "20210707235333-ch5zang",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-ch5zang"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Entity\npublic class SysUser {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long userId;\n    private String userName;\n    private Integer age;\n\n\n    @ManyToMany(cascade = CascadeType.ALL)\n    @JoinTable(name = \"sys_user_role\",\n            joinColumns = @JoinColumn(name = \"user_id\"),\n            inverseJoinColumns = @JoinColumn(name = \"role_id\"))\n    private Set\u003cSysRole\u003e roles;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-miaxej2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-miaxej2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "测试"
				}
			]
		},
		{
			"ID": "20210707235333-ewj0uwz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-ewj0uwz"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n// DataJpaTest、MybatisTest 会默认使用其测试数据源替代，若要使用自己配置的，需要添加如下注解\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\npublic class Many2ManyTest {\n\n    @Autowired\n    private SysUserRepository sysUserRepository;\n\n    @Autowired\n    private SysRoleRepository sysRoleRepository;\n\n\n    /**\n     * 保存一个用户、一个角色\n     */\n    @Test\n    @Rollback(false)\n    @Transactional\n    void testSave() {\n\n        SysUser sysUser = SysUser.builder().userName(\"conanan\").roles(new HashSet\u003c\u003e()).build();\n\n        SysRole sysRole = SysRole.builder().roleName(\"架构师\").users(new HashSet\u003c\u003e()).build();\n\n        // 配置用户到角色的关系，可以对中间表进行维护\n        sysUser.getRoles().add(sysRole);\n        // 配置角色到用户的关系，可以对中间表进行维护\n        // sysRole.getUsers().add(sysUser);\n        // 但是不能同时维护，因为联合主键不能重复！\n        // 报错 Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '1-1' for key 'sys_user_role.PRIMARY'\n        // 放弃被选择一方（如角色）的中间表维护权即可！\n\n        sysUserRepository.save(sysUser);\n        sysRoleRepository.save(sysRole);\n    }\n\n\n    /**\n     * 测试级联添加（保存一个用户同时保存用户相关角色及中间表关联信息）\n     */\n    @Test\n    @Rollback(false)\n    @Transactional\n    void testCascadeAdd() {\n\n        SysUser sysUser = SysUser.builder().userName(\"conanan\").roles(new HashSet\u003c\u003e()).build();\n\n\n        Optional\u003cSysRole\u003e byId = sysRoleRepository.findById(5L);\n\n        SysRole sysRole = SysRole.builder().roleId(5L).users(new HashSet\u003c\u003e()).build();\n\n        // 配置用户到角色的关系，可以对中间表进行维护。若还配置了级联，则这里也维护了级联关系\n        sysUser.getRoles().add(byId.orElse(new SysRole()));\n        // 配置角色到用户的关系，可以对中间表进行维护\n        // sysRole.getUsers().add(sysUser);\n        // 但是不能同时维护，因为联合主键不能重复！\n        // 报错 Caused by: java.sql.SQLIntegrityConstraintViolationException: Duplicate entry '1-1' for key 'sys_user_role.PRIMARY'\n        // 放弃被选择一方（如角色）的中间表维护权即可！\n\n        sysUserRepository.save(sysUser);\n    }\n\n    /**\n     * 测试级联删除（删除一个用户同时删除中间表关联信息及用户相关角色）\n     */\n    @Test\n    @Rollback(false)\n    @Transactional\n    void testCascadeRemove() {\n\n        sysUserRepository.deleteById(5L);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-dq2kywu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-dq2kywu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "保存的 sql"
				}
			]
		},
		{
			"ID": "20210707235333-9yf4lho",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-9yf4lho"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "create table sys_user_role (user_id bigint not null, role_id bigint not null, primary key (user_id, role_id)) engine=InnoDB\ncreate table sys_role (role_id bigint not null auto_increment, role_name varchar(255), primary key (role_id)) engine=InnoDB\ncreate table sys_user (user_id bigint not null auto_increment, age integer, user_name varchar(255), primary key (user_id)) engine=InnoDB\n\nalter table sys_user_role add constraint FKhh52n8vd4ny9ff4x9fb8v65qx foreign key (role_id) references sys_role (role_id)\nalter table sys_user_role add constraint FKb40xxfch70f5qnyfw8yme1n1s foreign key (user_id) references sys_user (user_id)\n\n-- 保存\ninsert into sys_user (age, user_name) values (?, ?)\ninsert into sys_role (role_name) values (?)\ninsert into sys_user_role (user_id, role_id) values (?, ?)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-jkx8p2o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-jkx8p2o"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可见，"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "目前生成的建表语句竟然有 5 条"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，本应该只有 3 条！其余的一模一样"
				}
			]
		},
		{
			"ID": "20210707235333-o1w4xs1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-o1w4xs1"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "级联删除的 sql"
				}
			]
		},
		{
			"ID": "20210707235333-hw1cwrd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-hw1cwrd"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "select sysuser0_.user_id as user_id1_5_0_, sysuser0_.age as age2_5_0_, sysuser0_.user_name as user_nam3_5_0_ from sys_user sysuser0_ where sysuser0_.user_id=?\nselect roles0_.user_id as user_id1_3_0_, roles0_.role_id as role_id2_3_0_, sysrole1_.role_id as role_id1_4_1_, sysrole1_.role_name as role_nam2_4_1_ from sys_user_role roles0_ inner join sys_role sysrole1_ on roles0_.role_id=sysrole1_.role_id where roles0_.user_id=?\ndelete from sys_user_role where user_id=?\ndelete from sys_role where role_id=?\ndelete from sys_user where user_id=?\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-awrzjcq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-awrzjcq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有可能删除报错！因为在删除中间表后，删除角色表时，该角色可能还被其他用户引用！"
				}
			]
		},
		{
			"ID": "20210707235333-ciyqgcn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-ciyqgcn"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "@ManyToOne 和 @OneToMany 表示 🔥"
				}
			]
		},
		{
			"ID": "20210707235333-75vjzs2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-75vjzs2"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需要新建一个中间表 @Entity 类，并在该类中维护映射关系，记得在 2 个主表中配置 mappedBy。此时可见，"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "目前生成的建表语句就只有 3 条"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，非常正常！"
				}
			]
		},
		{
			"ID": "20210707235333-x583anq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707235333-x583anq"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "多对多的最佳实践 🔥"
				}
			]
		},
		{
			"ID": "20210707235333-my2p36y",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707235333-my2p36y"
			},
			"Children": [
				{
					"ID": "20210707235333-r1x2s1x",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-r1x2s1x"
					},
					"Children": [
						{
							"ID": "20210707235333-92uyv8f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-92uyv8f"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "@ManyToMany 使用一般较少，除非没有额外字段"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-iur61kg",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-iur61kg"
					},
					"Children": [
						{
							"ID": "20210707235333-ilunn2h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-ilunn2h"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "上面我们介绍的 @OneToMany 的最佳实践同样适用，我为了说明方便，采用的是双向关联，而"
								},
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "实际生产一般是在中间表对象里面做单向关联"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，这样会让实体之间的关联关系简单很多。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-rw7maby",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-rw7maby"
					},
					"Children": [
						{
							"ID": "20210707235333-jd71p6h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-jd71p6h"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "与 @OneToMany 一样的道理，不要用级联删除和 orphanRemoval=true。默认配置即可！"
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-irkpnn2",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-irkpnn2"
					},
					"Children": [
						{
							"ID": "20210707235333-obibhnn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-obibhnn"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "FetchType 采用默认方式：fetch = FetchType.LAZY 的方式。默认配置即可！"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-z7d0jo2",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707235333-z7d0jo2"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "对象导航查询 🔥"
				}
			]
		},
		{
			"ID": "20210707235333-2wbqcjj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-2wbqcjj"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对象导航查询是根据已经加载的对象，导航到他的关联对象。它利用类与类之间的关系来检索对象。例如：我们通过 ID 查询方式查出一个客户，可以调用 Customer 类中的 getLinkMans()方法来获取该客户的所有联系人。对象导航查询的使用要求是：两个对象之间必须存在关联关系。"
				}
			]
		},
		{
			"ID": "20210707235333-d1sl7ut",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-d1sl7ut"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对象导航查询"
				}
			]
		},
		{
			"ID": "20210707235333-l5vqtsk",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707235333-l5vqtsk"
			},
			"Children": [
				{
					"ID": "20210707235333-q6f20wf",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-q6f20wf"
					},
					"Children": [
						{
							"ID": "20210707235333-r9q51dt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-r9q51dt"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "从一方查询多方：默认延迟加载"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707235333-yjnyslj",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707235333-yjnyslj"
					},
					"Children": [
						{
							"ID": "20210707235333-nq2pw0q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707235333-nq2pw0q"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "从多方查询一方：默认立即加载"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-9tokll6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-9tokll6"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以修改配置将其改为立即加载（不推荐！），"
				},
				{
					"Type": "NodeStrong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "fetch 配置在多表关系中主体（或一方或多方）的注解上"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20210707235333-5w754ak",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-5w754ak"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一对多中的例子，无需任何修改"
				}
			]
		},
		{
			"ID": "20210707235333-c2bxcm9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-c2bxcm9"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@DataJpaTest\n// DataJpaTest、MybatisTest 会默认使用其测试数据源替代，若要使用自己配置的，需要添加如下注解\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\npublic class ObjectNavigationTest {\n\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Autowired\n    private LinkManRepository linkManRepository;\n\n\n    /**\n     * 对象导航查询默认也是使用延迟加载，使用关联对象时才查询，仅仅.调用不会执行查询\n     */\n    @Test\n    void testSelect1() {\n        Customer customer = customerRepository.getOne(1L);\n        Set\u003cLinkMan\u003e linkManSet = customer.getLinkManSet();\n        System.out.println(linkManSet);// 此时才查询\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-spc2m2a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-spc2m2a"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从一方查询多方：默认延迟加载"
				}
			]
		},
		{
			"ID": "20210707235333-4880m56",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-4880m56"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "select * from customer customer0_ where customer0_.id=?\nselect * from link_man linkmanset0_ where linkmanset0_.cust_id=?\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-mxx1cg9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-mxx1cg9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从多方查询一方：默认立即加载"
				}
			]
		},
		{
			"ID": "20210707235333-isriusj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c3Fs",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707235333-isriusj"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "SELECT\n -- 略掉字段\n *\nFROM\n\tlink_man linkman0_\n\tLEFT OUTER JOIN customer customer1_ ON linkman0_.cust_id = customer1_.id\nWHERE\n\tlinkman0_.id =?\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707235333-thu5jio",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707235333-thu5jio"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "未整理"
				}
			]
		},
		{
			"ID": "20210707235333-03lftz3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-03lftz3"
			},
			"Children": [
				{
					"Type": "NodeLink",
					"Children": [
						{
							"Type": "NodeOpenBracket",
							"Data": "["
						},
						{
							"Type": "NodeLinkText",
							"Data": "JPA 中的 OneToMany 和 ManyToOne 的最佳实践"
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]"
						},
						{
							"Type": "NodeOpenParen",
							"Data": "("
						},
						{
							"Type": "NodeLinkDest",
							"Data": "http://www.wangzhenhua.rocks/zh-hans/java/jpa-one-to-many-many-to-one-best-practice"
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，还有篇博客"
				}
			]
		},
		{
			"ID": "20210707235333-1w0v3zm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707235333-1w0v3zm"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "太复杂了，JPA 变用边写吧。。。"
				}
			]
		},
		{
			"ID": "20210914234915-bosm43n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210914234915-bosm43n",
				"updated": "20210914234915"
			}
		}
	]
}