{
	"ID": "20210707233138-8yyjjv7",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20210707233138-8yyjjv7",
		"title": "202.IoC",
		"type": "doc"
	},
	"Children": [
		{
			"ID": "20210707233138-aw08c5d",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707233138-aw08c5d"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "问题—程序间耦合"
				}
			]
		},
		{
			"ID": "20210707233138-2iapkax",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 45,
				"Padding": 2,
				"Marker": "LQ==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707233138-2iapkax"
			},
			"Children": [
				{
					"ID": "20210707233138-xermdqa",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233138-xermdqa"
					},
					"Children": [
						{
							"ID": "20210707233138-079g14n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-079g14n"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在软件工程中，耦合指的就是就是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "对象之间的依赖性"
								},
								{
									"Type": "NodeText",
									"Data": "。对象之间的耦合越高，维护成本越高。因此对象的设计应使类和构件之间的耦合最小。软件设计中通常用耦合度和内聚度作为衡量模块独立程度的标准。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "划分模块的一个准则"
								},
								{
									"Type": "NodeText",
									"Data": "就是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "高内聚低耦合"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233138-i8wxepy",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233138-i8wxepy"
					},
					"Children": [
						{
							"ID": "20210707233138-91jogbv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-91jogbv"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Bean"
								},
								{
									"Type": "NodeText",
									"Data": "：计算机英语中，有"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "可重用组件"
								},
								{
									"Type": "NodeText",
									"Data": "的含义"
								}
							]
						},
						{
							"ID": "20210707233138-39h9d7r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-39h9d7r"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JavaBean：用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Java语言编写的可重用组件"
								},
								{
									"Type": "NodeText",
									"Data": "。JavaBean\u003e实体类"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233138-arsmfm1",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233138-arsmfm1"
					},
					"Children": [
						{
							"ID": "20210707233138-146tg3r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-146tg3r"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "实际开发中，应做到："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "编译期不依赖，运行时才依赖（想到多态了吧，只是类似）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233138-bhmxk4l",
					"Type": "NodeListItem",
					"Data": "-",
					"ListData": {
						"Tight": true,
						"BulletChar": 45,
						"Padding": 2,
						"Marker": "LQ==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233138-bhmxk4l"
					},
					"Children": [
						{
							"ID": "20210707233138-w76yayi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-w76yayi"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "解耦的思路（工厂模式）"
								},
								{
									"Type": "NodeText",
									"Data": "："
								}
							]
						},
						{
							"ID": "20210707233138-5mxzdza",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1,
								"Tight": true,
								"Start": 1,
								"Delimiter": 46,
								"Padding": 3,
								"Marker": "MQ==",
								"Num": 1
							},
							"Properties": {
								"id": "20210707233138-5mxzdza"
							},
							"Children": [
								{
									"ID": "20210707233138-hbykvct",
									"Type": "NodeListItem",
									"Data": "1",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 1,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "MQ==",
										"Num": 1
									},
									"Properties": {
										"id": "20210707233138-hbykvct"
									},
									"Children": [
										{
											"ID": "20210707233138-zoslcrh",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707233138-zoslcrh"
											},
											"Children": [
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "读取配置文件的key"
												},
												{
													"Type": "NodeText",
													"Data": "获取要创建对象的"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "全限定类名value"
												},
												{
													"Type": "NodeText",
													"Data": "；"
												}
											]
										}
									]
								},
								{
									"ID": "20210707233138-uuwbdu5",
									"Type": "NodeListItem",
									"Data": "2",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 2,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "Mg==",
										"Num": 2
									},
									"Properties": {
										"id": "20210707233138-uuwbdu5"
									},
									"Children": [
										{
											"ID": "20210707233138-pjj5is0",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707233138-pjj5is0"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "使用"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "反射创建对象"
												},
												{
													"Type": "NodeText",
													"Data": "，避免使用new关键字；"
												}
											]
										}
									]
								},
								{
									"ID": "20210707233138-e93766b",
									"Type": "NodeListItem",
									"Data": "3",
									"ListData": {
										"Typ": 1,
										"Tight": true,
										"Start": 3,
										"Delimiter": 46,
										"Padding": 3,
										"Marker": "Mw==",
										"Num": 3
									},
									"Properties": {
										"id": "20210707233138-e93766b"
									},
									"Children": [
										{
											"ID": "20210707233138-zjchu2t",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707233138-zjchu2t"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "定义一个map"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "容器"
												},
												{
													"Type": "NodeText",
													"Data": "，在静态代码块中创建所有对象并存放。获取对象时直接返回对应key的value，是单例的"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707233138-qtumdi4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707233138-qtumdi4"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "OCP—开闭原则"
				}
			]
		},
		{
			"ID": "20210707233138-si31qd5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707233138-si31qd5"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "awkward 版"
				}
			]
		},
		{
			"ID": "20210707233138-ut5qst0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-ut5qst0"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 青冈影\n */\npublic class Camille {\n\n    public void q(){\n        System.out.println(\"Camille Q\");\n    }\n\n    public void w(){\n        System.out.println(\"Camille W\");\n    }\n\n    public void e(){\n        System.out.println(\"Camille E\");\n    }\n\n    public void r(){\n        System.out.println(\"Camille R\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-2hdgn8i",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-2hdgn8i"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 黛安娜\n */\npublic class Diana {\n\n    public void q(){\n        System.out.println(\"Diana Q\");\n    }\n\n    public void w(){\n        System.out.println(\"Diana W\");\n    }\n\n    public void e(){\n        System.out.println(\"Diana E\");\n    }\n\n    public void r(){\n        System.out.println(\"Diana R\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-xsy01wl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-xsy01wl"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Main {\n\n    public static void main(String[] args) {\n        String heroName = getPlayerInput();\n        switch (heroName){\n            case \"Diana\":\n                Diana diana = new Diana();\n                diana.r();\n                break;\n            case \"Irilia\":\n                Irilia irilia = new Irilia();\n                irilia.r();\n                break;\n            case \"Camille\":\n                Camille camille = new Camille();\n                camille.r();\n                break;\n            default:\n                break;\n        }\n      \t// 每次根据用户输入 new 新对象，并用该对象调用技能方法\n    }\n\n    private static String getPlayerInput(){\n        System.out.print(\"Enter a hero's name: \");\n        Scanner scanner = new Scanner(System.in);\n        return scanner.nextLine();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-gtut8yt",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707233138-gtut8yt"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "abstraction 版"
				}
			]
		},
		{
			"ID": "20210707233138-1spxb49",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-1spxb49"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface ISkill {\n\n    void q();\n\n    void w();\n\n    void e();\n\n    void r();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-qhboh5d",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-qhboh5d"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 青冈影\n */\npublic class Camille implements ISkill {\n\n    public void q(){\n        System.out.println(\"Camille Q\");\n    }\n\n    public void w(){\n        System.out.println(\"Camille W\");\n    }\n\n    public void e(){\n        System.out.println(\"Camille E\");\n    }\n\n    public void r(){\n        System.out.println(\"Camille R\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-q2f8ruh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-q2f8ruh"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 黛安娜\n */\npublic class Diana implements ISkill {\n\n    public void q(){\n        System.out.println(\"Diana Q\");\n    }\n\n    public void w(){\n        System.out.println(\"Diana W\");\n    }\n\n    public void e(){\n        System.out.println(\"Diana E\");\n    }\n\n    public void r(){\n        System.out.println(\"Diana R\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-0dzozva",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-0dzozva"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Main {\n\n    public static void main(String[] args) {\n        String heroName = getPlayerInput();\n        ISkill iSkill;\n        // 对象实例化\n        switch (heroName){\n            case \"Diana\":\n                iSkill = new Diana();\n                break;\n            case \"Irilia\":\n                iSkill = new Irilia();\n                break;\n            case \"Camille\":\n                iSkill = new Camille();\n                break;\n            default:\n                throw new RuntimeException();\n        }\n        // 面向对象：实例化对象，调用方法（完成业务逻辑）\n        // 单纯的 Interface 只能统一方法的调用，不能统一对象的实例化。即多态好处：运行时确定要调用的方法\n        iSkill.r();\n\n    }\n\n    private static String getPlayerInput(){\n        System.out.print(\"Enter a hero's name: \");\n        Scanner scanner = new Scanner(System.in);\n        return scanner.nextLine();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-xntht3e",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707233138-xntht3e"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "factory 版"
				}
			]
		},
		{
			"ID": "20210707233138-4ynvzah",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-4ynvzah"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface ISkill {\n\n    void q();\n\n    void w();\n\n    void e();\n\n    void r();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-62r38ez",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-62r38ez"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 青冈影\n */\npublic class Camille implements ISkill {\n\n    public void q(){\n        System.out.println(\"Camille Q\");\n    }\n\n    public void w(){\n        System.out.println(\"Camille W\");\n    }\n\n    public void e(){\n        System.out.println(\"Camille E\");\n    }\n\n    public void r(){\n        System.out.println(\"Camille R\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-y0kif98",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-y0kif98"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 黛安娜\n */\npublic class Diana implements ISkill {\n\n    public void q(){\n        System.out.println(\"Diana Q\");\n    }\n\n    public void w(){\n        System.out.println(\"Diana W\");\n    }\n\n    public void e(){\n        System.out.println(\"Diana E\");\n    }\n\n    public void r(){\n        System.out.println(\"Diana R\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-yuj8tip",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-yuj8tip"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class HeroFactory {\n\n    public static ISkill getHero(String heroName){\n\n        ISkill iSkill;\n        // 对象实例化\n        switch (heroName){\n            case \"Diana\":\n                iSkill = new Diana();\n                break;\n            case \"Irilia\":\n                iSkill = new Irilia();\n                break;\n            case \"Camille\":\n                iSkill = new Camille();\n                break;\n            default:\n                throw new RuntimeException();\n        }\n        return iSkill;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-d0bfzrt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-d0bfzrt"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Main {\n\n    public static void main(String[] args) {\n        String heroName = getPlayerInput();\n        // HeroFactory 如何消除？\n        // 此时是静态调用，在工厂类中实例化时还是 new 操作，并且强耦合了，新增时还需修改工厂类\n        ISkill iSkill = HeroFactory.getHero(heroName);\n        iSkill.r();\n\n    }\n\n    private static String getPlayerInput(){\n        System.out.print(\"Enter a hero's name: \");\n        Scanner scanner = new Scanner(System.in);\n        return scanner.nextLine();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-f09n6rw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707233138-f09n6rw"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "reflect 版"
				}
			]
		},
		{
			"ID": "20210707233138-0xasije",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-0xasije"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public interface ISkill {\n\n    void q();\n\n    void w();\n\n    void e();\n\n    void r();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-0652llc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-0652llc"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 青冈影\n */\npublic class Camille implements ISkill {\n\n    public void q(){\n        System.out.println(\"Camille Q\");\n    }\n\n    public void w(){\n        System.out.println(\"Camille W\");\n    }\n\n    public void e(){\n        System.out.println(\"Camille E\");\n    }\n\n    public void r(){\n        System.out.println(\"Camille R\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-xuov98f",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-xuov98f"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 黛安娜\n */\npublic class Diana implements ISkill {\n\n    public void q(){\n        System.out.println(\"Diana Q\");\n    }\n\n    public void w(){\n        System.out.println(\"Diana W\");\n    }\n\n    public void e(){\n        System.out.println(\"Diana E\");\n    }\n\n    public void r(){\n        System.out.println(\"Diana R\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-8qttlym",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-8qttlym"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class HeroFactory {\n\n    public static ISkill getHero(Class\u003c? extends ISkill\u003e clazz) throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n\n        // 对象实例化\n        Constructor\u003c? extends ISkill\u003e constructor = clazz.getDeclaredConstructor();\n        return constructor.newInstance();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-16veh59",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-16veh59"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Main {\n\n    public static void main(String[] args) throws \n      InstantiationException, \n  IllegalAccessException, \n  NoSuchMethodException, \n  InvocationTargetException {\n        ISkill hero = HeroFactory.getHero(Irilia.class);\n        hero.r();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-0agkerz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707233138-0agkerz"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "接口 + 工厂实现 OCP 🔥"
				}
			]
		},
		{
			"ID": "20210707233138-qm2f7g9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233138-qm2f7g9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "面向对象：实例化对象，调用方法（完成业务逻辑）"
				}
			]
		},
		{
			"ID": "20210707233138-33z2kq5",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707233138-33z2kq5"
			},
			"Children": [
				{
					"ID": "20210707233138-en95axa",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233138-en95axa"
					},
					"Children": [
						{
							"ID": "20210707233138-m29wgxg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-m29wgxg"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "单纯的 Interface 只能"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "统一方法的调用"
								},
								{
									"Type": "NodeText",
									"Data": "，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "不能统一对象的实例化"
								},
								{
									"Type": "NodeText",
									"Data": "。即多态好处：运行时确定要调用的方法"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233138-h6rf8k9",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233138-h6rf8k9"
					},
					"Children": [
						{
							"ID": "20210707233138-ydv6j1g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-ydv6j1g"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "只有一段代码中没有 new 出现，才能保持代码的相对稳定，才能逐步实现 OCP。但是代码中总会存在不稳定，需要"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "隔离这些不稳定因素（采用配置类、配置文件等方式）"
								},
								{
									"Type": "NodeText",
									"Data": "，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "保证其他的代码是稳定的"
								},
								{
									"Type": "NodeText",
									"Data": "。即对象的实例化应该和其他分开！"
								}
							]
						},
						{
							"ID": "20210707233138-8b5sxpn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-8b5sxpn"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不稳定表面看是由于 new 实例化对象，其实是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "用户的输入（变化）"
								},
								{
									"Type": "NodeText",
									"Data": "导致需要频繁修改 new 实例化"
								}
							]
						},
						{
							"ID": "20210707233138-6aqquip",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 42,
								"Padding": 2,
								"Marker": "Kg==",
								"Num": -1
							},
							"Properties": {
								"id": "20210707233138-6aqquip"
							},
							"Children": [
								{
									"ID": "20210707233138-w53w9ez",
									"Type": "NodeListItem",
									"Data": "*",
									"ListData": {
										"Tight": true,
										"BulletChar": 42,
										"Padding": 2,
										"Marker": "Kg==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707233138-w53w9ez"
									},
									"Children": [
										{
											"ID": "20210707233138-szh3qfo",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707233138-szh3qfo"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "配置文件的"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "集中性"
												}
											]
										}
									]
								},
								{
									"ID": "20210707233138-2mdywrp",
									"Type": "NodeListItem",
									"Data": "*",
									"ListData": {
										"Tight": true,
										"BulletChar": 42,
										"Padding": 2,
										"Marker": "Kg==",
										"Num": -1
									},
									"Properties": {
										"id": "20210707233138-2mdywrp"
									},
									"Children": [
										{
											"ID": "20210707233138-lgswlhs",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20210707233138-lgswlhs"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "配置文件"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "strong",
													"TextMarkTextContent": "清晰（但是多了后也不清晰），没有业务逻辑"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20210707233138-zvohszj",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233138-zvohszj"
					},
					"Children": [
						{
							"ID": "20210707233138-q2nlgqk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-q2nlgqk"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "简单工厂模式"
								},
								{
									"Type": "NodeText",
									"Data": "后，该工厂获取 Bean 的方法是静态的，虽然看起来没有 new 对象，但是其实是依赖了具体实现。且需要不同类型的 Bean 时总是需要新建一个工厂类，同一类型的不同 Bean 也需要修改工厂类"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233138-qrd0j3k",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233138-qrd0j3k"
					},
					"Children": [
						{
							"ID": "20210707233138-9s2i29x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-9s2i29x"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "此时可以使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "抽象工厂模式"
								},
								{
									"Type": "NodeText",
									"Data": "，当然它也有类似的问题"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233138-0xlvqxn",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233138-0xlvqxn"
					},
					"Children": [
						{
							"ID": "20210707233138-ubafkqp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-ubafkqp"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "只有这个工厂特别大，可以获得所有 Bean 时，才认为它相对稳定。如 IoC 容器，特别是 Spring 的 ApplicationContext 等接口容器"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233138-jyf31rx",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233138-jyf31rx"
					},
					"Children": [
						{
							"ID": "20210707233138-ujvi0go",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-ujvi0go"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "但是！工厂模式 + 反射并不是 IoC 和 DI"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707233138-lp81n06",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20210707233138-lp81n06"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## "
				},
				{
					"Type": "NodeText",
					"Data": "如何理解 IoC、DI 、DIP 🔥"
				}
			]
		},
		{
			"ID": "20210707233138-p4gijws",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707233138-p4gijws"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "IoC"
				}
			]
		},
		{
			"ID": "20210707233138-fqhi9tf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233138-fqhi9tf"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "该概念的由来是 Java 社区的轻量级容器能够帮助开发者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "将来自不同项目的组件（或服务，理解即可）装配（组合）成一个内聚的项目（应用）"
				},
				{
					"Type": "NodeText",
					"Data": "，而这种操作就是 IoC，它决定了这些容器进行组件装配的方式"
				}
			]
		},
		{
			"ID": "20210707233138-mbyj0x5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233138-mbyj0x5"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "IoC 的主要实现的作用就是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "将组件（Bean）注册到到容器"
				},
				{
					"Type": "NodeText",
					"Data": "中，并能给使用者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "提供自动注入"
				},
				{
					"Type": "NodeText",
					"Data": "功能"
				}
			]
		},
		{
			"ID": "20210707233138-5qhxlfo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233138-5qhxlfo"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "控制反转，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "把创建对象的权利交给容器（或工厂）"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "但其实需要配合接口（抽象）才能算将其使用更好"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20210707233138-vmve6rl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233138-vmve6rl"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "解决了程序和对象之间的耦合，其具体实现就是 DI"
				}
			]
		},
		{
			"ID": "20210707233138-6kkawpc",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707233138-6kkawpc"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "DI（Dependency Injection）"
				}
			]
		},
		{
			"ID": "20210707233138-nsmajc7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233138-nsmajc7"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "::: tip"
				}
			]
		},
		{
			"ID": "20210707233138-cgzrl95",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233138-cgzrl95"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://martinfowler.com/articles/injection.html",
					"TextMarkTextContent": "martinfowler 博客"
				},
				{
					"Type": "NodeText",
					"Data": "及 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://insights.thoughtworks.cn/injection/",
					"TextMarkTextContent": "ThoughtWork 的翻译"
				}
			]
		},
		{
			"ID": "20210707233138-givayef",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233138-givayef"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": ":::"
				}
			]
		},
		{
			"ID": "20210707233138-y5o41sq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233138-y5o41sq"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "DI（依赖注入） 的目的在于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "将组件的配置与使用分离开"
				},
				{
					"Type": "NodeText",
					"Data": "。如何在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "运行时（不是编译时）"
				},
				{
					"Type": "NodeText",
					"Data": "将"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "组件（抽象的具体实现可能有多个，所以编译时无法确定哪个）动态连入程序"
				},
				{
					"Type": "NodeText",
					"Data": "中（这里是不是想起接口的概念了）"
				}
			]
		},
		{
			"ID": "20210707233138-usx715d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233138-usx715d"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里的组件可以指代服务（Service也行）"
				}
			]
		},
		{
			"ID": "20210707233138-d4y9nyw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233138-d4y9nyw"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "即调用类对某一接口实现类的依赖关系由第三方容器或协作类注入，移除调用类对某一接口实现类的依赖。"
				}
			]
		},
		{
			"ID": "20210707233138-uabkhyu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233138-uabkhyu"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一般完成特定的业务逻辑可能会需要多个类之间进行协作。按传统的做法，每个对象负责管理与自己互相协作的对象(它所依赖的对象)的引用，这会导致高度耦合并难以测试的代码。利用依赖注入，每个对象可以直接获取所依赖的对象"
				}
			]
		},
		{
			"ID": "20210707233138-efceubc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233138-efceubc"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "最开始的 new 对象，强依赖；后来使用工厂，要对象，弱依赖；最后使用 IoC 和 DI，IoC 容器注入对象（被动）。⚙️"
				}
			]
		},
		{
			"ID": "20210707233138-rl8bnaf",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707233138-rl8bnaf"
			},
			"Children": [
				{
					"ID": "20210707233138-p07zmgv",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233138-p07zmgv"
					},
					"Children": [
						{
							"ID": "20210707233138-ouwf0g6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-ouwf0g6"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "属性注入（set）"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233138-wv348vz",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233138-wv348vz"
					},
					"Children": [
						{
							"ID": "20210707233138-b3vtqvj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-b3vtqvj"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造注入"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233138-7mtjmo6",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233138-7mtjmo6"
					},
					"Children": [
						{
							"ID": "20210707233138-rwysybi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-rwysybi"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "接口注入"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707233138-xpewfbn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20210707233138-xpewfbn"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### "
				},
				{
					"Type": "NodeText",
					"Data": "DIP（Dependency Inversion Principle）"
				}
			]
		},
		{
			"ID": "20210707233138-fb9a7e9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233138-fb9a7e9"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "依赖倒置原则"
				}
			]
		},
		{
			"ID": "20210707233138-i28ixpg",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20210707233138-i28ixpg"
			},
			"Children": [
				{
					"ID": "20210707233138-kjg6y9m",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233138-kjg6y9m"
					},
					"Children": [
						{
							"ID": "20210707233138-fdorb2a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-fdorb2a"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "高层模块（抽象）不该依赖低层模块（实现），两者都应该"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "依赖抽象"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233138-ereu2cg",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233138-ereu2cg"
					},
					"Children": [
						{
							"ID": "20210707233138-1kxp0e3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-1kxp0e3"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "抽象不应该依赖细节"
								}
							]
						}
					]
				},
				{
					"ID": "20210707233138-6y0diw1",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20210707233138-6y0diw1"
					},
					"Children": [
						{
							"ID": "20210707233138-jrqwfoa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20210707233138-jrqwfoa"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "细节应该依赖抽象"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20210707233138-6gmv4lg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233138-6gmv4lg"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "总之就是说要"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "依赖抽象"
				},
				{
					"Type": "NodeText",
					"Data": "。比如"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "依赖的 Service 不应该是具体类，而应该是接口（注入的只能是具体类，理解即可）"
				}
			]
		},
		{
			"ID": "20210707233138-xf8q0tl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20210707233138-xf8q0tl"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Autowired\nprivate UserService userService;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3
				}
			]
		},
		{
			"ID": "20210707233138-jxg1cum",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20210707233138-jxg1cum"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时使用的是类型注入，依赖的是 UserService 接口，IoC 容器会在运行时将该类型的具体对象注入！"
				}
			]
		}
	]
}